source("~/Desktop/MLINDIV_analysisDC/MidlifeDesktopBehavior/explore_SNAG_final.R")
working_dir <-"/Volumes/Google Drive/My Drive/MLINDIV_SNAG_preprocessing/old"
working_dir <-"/Volumes/Google Drive/My Drive/MLINDIV_SNAG_preprocessing/old"
setwd(working_dir)
getwd()
source("~/Desktop/MLINDIV_analysisDC/MidlifeDesktopBehavior/explore_SNAG_final.R")
source("~/Desktop/MLINDIV_analysisDC/MidlifeDesktopBehavior/explore_SNAG_final.R")
source("~/Desktop/MLINDIV_analysisDC/MidlifeDesktopBehavior/explore_SNAG_final.R")
source("~/Desktop/MLINDIV_analysisDC/MidlifeDesktopBehavior/trial_master_SNAG_final.R")
source("~/Desktop/MLINDIV_analysisDC/MidlifeDesktopBehavior/path_distances_SNAG_final.R")
source("~/Desktop/MLINDIV_analysisDC/MidlifeDesktopBehavior/path_distances_SNAG_final.R")
debugSource("~/Desktop/MLINDIV_analysisDC/MidlifeDesktopBehavior/path_distances_SNAG_final.R")
debugSource("~/Desktop/MLINDIV_analysisDC/MidlifeDesktopBehavior/path_distances_SNAG_final.R")
getwd()
setwd(working_dir)
# csvs need to be in the same location as your dir
pd <- read.csv("pathdistances.csv")
loc <- read.csv("location.csv")
pd$node_pairs <- paste0(pd$n1, pd$n2)
path_distance <- 0
sum_path_dist <- function(pathscol){
path_distances <- c()
error_list <- c()
for (i in 1:length(pathscol)){
path_distance <- 0
path <- strsplit(as.character(pathscol[i]), " ")[[1]]
for (j in 1:(length(path) - 1)){
node_pair <- paste0(path[j], path[j + 1])
if (node_pair %in% pd$node_pairs){
path_dist <- pd$distance[which(pd$node_pairs == node_pair)]
} else if (path[j] == path[j+1]){
path_dist <- 0
} else {
path_dist <- 0
error_list <- c(error_list, node_pair)
}
path_distance <- path_distance + path_dist
error_list <- error_list
}
path_distances <- c(path_distances, path_distance)
error_list <- error_list
}
return(path_distances)
}
calc_euc_dist <- function(pathscol){
euc_dist_trav <- c()
for (i in 1:length(pathscol)){
path <- strsplit(as.character(pathscol[i]), " ")[[1]]
start <- path[1]
end <- path[length(path)]
x_start <- loc[loc$Location == start, 2]
y_start <- loc[loc$Location == start, 3]
x_end <- loc[loc$Location == end, 2]
y_end <- loc[loc$Location == end, 3]
x_diff <- x_end - x_start
y_diff <- y_end - y_start
euc_dist <- sqrt(sum(x_diff^2, y_diff^2))
euc_dist_trav <- c(euc_dist_trav, euc_dist)
}
return(euc_dist_trav)
}
tm <- read.csv("MLINDIV_trial_master.csv")
tm <- tm %>% mutate(path_dist_trav = sum_path_dist(paths))
tm <- tm %>% mutate(euc_dist_trav = calc_euc_dist(paths))
write.csv(tm, "MLINDIV_trial_master.csv")
pd <- read.csv("pathdistances.csv")
pd$node_pairs <- paste0(pd$n1, pd$n2)
calc_pd <- function(pathscol){
path_distances <- c()
for (i in 1:length(pathscol)){
path_distance <- 0
path <- strsplit(as.character(pathscol[i]), " ")[[1]]
for (j in 1:(length(path) - 1)){
node_pair <- paste0(path[j], path[j + 1])
if (node_pair %in% pd$node_pairs){
path_dist <- pd$distance[which(pd$node_pairs == node_pair)]
} else if (path[j] == path[j+1]){
path_dist <- 0
} else {
path_dist <- 0
}
path_distance <- path_distance + path_dist
}
path_distances <- c(path_distances, path_distance)
}
return(path_distances)
}
tm <- read.csv("MLINDIV_trial_master.csv")
path_efficiencies <- c()
tm$paths <- as.character(tm$paths)
# Calculate path efficiencies
for (i in 1:nrow(tm)){
path_eff <- 0
if (!is.na(tm$Procedure[i]) & !is.na(tm$select_made[i])){
path_eff <- tm$path_dist_trav[i] / tm$Path.Distance[i]
# path_eff <- tm$path_dist_trav[i] / tm$Path.Distance[which(tm$StartAt == tm$StartAt[i] & tm$EndAt == as.character(tm$end_location[i]))[1]]
}
else {
path_eff <- NA
}
if (tm$StartAt[i] == tm$end_location[i] & !is.na(tm$StartAt[i])){
path_eff <- NA
if (length(strsplit(as.character(tm$paths[i]), " ")[[1]]) == 2){
tm$paths[i] <- strsplit(as.character(tm$paths[i]), " ")[[1]][2]
}
}
path_efficiencies <- c(path_efficiencies, path_eff)
}
tm_new <- cbind(tm, path_efficiencies)
# Grab Time Stamp of experiment session
dates <- c()
times <- c()
#reset wd so that loop below works
working_dir <-  "/Users/vaisakhputhusseryppady/Desktop/UCI_Postdoc/Work/My Projects/SNAG_Exploration/Analysis/Preprocessing/SNAG_Midlife"
setwd(working_dir)
for (i in 1:nrow(tm_new)){
filename <- sprintf("%03d/%s.txt", tm$Subject[i], tm$eprocs[i]) # assumes that you're in the directory with all of the raw txt files
print(filename)
ss_date <- read_eprime(filename)[14]
ss_time <- read_eprime(filename)[15]
dates <- c(dates, ss_date)
times <- c(times, ss_time)
}
for (time in 1:length(times)){
times[time] <- as.character(strsplit(as.character(times[time]), " ")[[1]][2])
}
tm_new <- cbind(dates, times, tm_new)
tm_new <- tm_new[, c(3, 1:2, 4:ncol(tm_new))]
tm_new$dates <- as.Date(tm_new$dates, "SessionDate: %m-%d-%Y")
#changing wd back to what was originally intended
working_dir <-  "/Users/vaisakhputhusseryppady/Desktop/UCI_Postdoc/Work/My Projects/SNAG_Exploration/Analysis/Preprocessing/SNAG_Midlife/Output_Iteration2"
setwd(working_dir)
write.csv(tm_new, "MLINDIV_trial_master.csv", row.names = FALSE)
source("~/Desktop/MLINDIV_analysisDC/MidlifeDesktopBehavior/path_distances_SNAG_final.R")
library(rprime)
library(tidyverse)
library(wrapr)
library(plyr)
library(dplyr)
# set your working dir. Helps if it's the same as your explore script dir
working_dir <- "/Volumes/GoogleDrive/My Drive/MLINDIV_SNAG_preprocessing/Raw sub data"
setwd(working_dir)
# csvs need to be in the same location as your dir
pd <- read.csv("pathdistances.csv")
loc <- read.csv("location.csv")
pd$node_pairs <- paste0(pd$n1, pd$n2)
path_distance <- 0
sum_path_dist <- function(pathscol){
path_distances <- c()
error_list <- c()
for (i in 1:length(pathscol)){
path_distance <- 0
path <- strsplit(as.character(pathscol[i]), " ")[[1]]
for (j in 1:(length(path) - 1)){
node_pair <- paste0(path[j], path[j + 1])
if (node_pair %in% pd$node_pairs){
path_dist <- pd$distance[which(pd$node_pairs == node_pair)]
} else if (path[j] == path[j+1]){
path_dist <- 0
} else {
path_dist <- 0
error_list <- c(error_list, node_pair)
}
path_distance <- path_distance + path_dist
error_list <- error_list
}
path_distances <- c(path_distances, path_distance)
error_list <- error_list
}
return(path_distances)
}
calc_euc_dist <- function(pathscol){
euc_dist_trav <- c()
for (i in 1:length(pathscol)){
path <- strsplit(as.character(pathscol[i]), " ")[[1]]
start <- path[1]
end <- path[length(path)]
x_start <- loc[loc$Location == start, 2]
y_start <- loc[loc$Location == start, 3]
x_end <- loc[loc$Location == end, 2]
y_end <- loc[loc$Location == end, 3]
x_diff <- x_end - x_start
y_diff <- y_end - y_start
euc_dist <- sqrt(sum(x_diff^2, y_diff^2))
euc_dist_trav <- c(euc_dist_trav, euc_dist)
}
return(euc_dist_trav)
}
tm <- read.csv("MLINDIV_trial_master.csv")
tm <- tm %>% mutate(path_dist_trav = sum_path_dist(paths))
tm <- tm %>% mutate(euc_dist_trav = calc_euc_dist(paths))
write.csv(tm, "MLINDIV_trial_master.csv")
pd <- read.csv("pathdistances.csv")
pd$node_pairs <- paste0(pd$n1, pd$n2)
calc_pd <- function(pathscol){
path_distances <- c()
for (i in 1:length(pathscol)){
path_distance <- 0
path <- strsplit(as.character(pathscol[i]), " ")[[1]]
for (j in 1:(length(path) - 1)){
node_pair <- paste0(path[j], path[j + 1])
if (node_pair %in% pd$node_pairs){
path_dist <- pd$distance[which(pd$node_pairs == node_pair)]
} else if (path[j] == path[j+1]){
path_dist <- 0
} else {
path_dist <- 0
}
path_distance <- path_distance + path_dist
}
path_distances <- c(path_distances, path_distance)
}
return(path_distances)
}
tm <- read.csv("MLINDIV_trial_master.csv")
path_efficiencies <- c()
tm$paths <- as.character(tm$paths)
# Calculate path efficiencies
for (i in 1:nrow(tm)){
path_eff <- 0
if (!is.na(tm$Procedure[i]) & !is.na(tm$select_made[i])){
path_eff <- tm$path_dist_trav[i] / tm$Path.Distance[i]
# path_eff <- tm$path_dist_trav[i] / tm$Path.Distance[which(tm$StartAt == tm$StartAt[i] & tm$EndAt == as.character(tm$end_location[i]))[1]]
}
else {
path_eff <- NA
}
if (tm$StartAt[i] == tm$end_location[i] & !is.na(tm$StartAt[i])){
path_eff <- NA
if (length(strsplit(as.character(tm$paths[i]), " ")[[1]]) == 2){
tm$paths[i] <- strsplit(as.character(tm$paths[i]), " ")[[1]][2]
}
}
path_efficiencies <- c(path_efficiencies, path_eff)
}
tm_new <- cbind(tm, path_efficiencies)
# Grab Time Stamp of experiment session
dates <- c()
times <- c()
for (i in 1:nrow(tm_new)){
filename <- sprintf("%03d/%s.txt", tm$Subject[i], tm$eprocs[i]) # assumes that you're in the directory with all of the raw txt files
print(filename)
ss_date <- read_eprime(filename)[14]
ss_time <- read_eprime(filename)[15]
dates <- c(dates, ss_date)
times <- c(times, ss_time)
}
for (time in 1:length(times)){
times[time] <- as.character(strsplit(as.character(times[time]), " ")[[1]][2])
}
tm_new <- cbind(dates, times, tm_new)
tm_new <- tm_new[, c(3, 1:2, 4:ncol(tm_new))]
tm_new$dates <- as.Date(tm_new$dates, "SessionDate: %m-%d-%Y")
write.csv(tm_new, "MLINDIV_trial_master.csv", row.names = FALSE)
source("~/Desktop/MLINDIV_analysisDC/MidlifeDesktopBehavior/path_distances_SNAG_final.R")
# Loading libraries
library(rprime)
library(tidyverse)
library(wrapr)
library(plyr)
library(dplyr)
# set your working dir. Helps if it's the same as your explore script dir
working_dir <- "/Volumes/GoogleDrive/My Drive/MLINDIV_SNAG_preprocessing/Raw sub data"
setwd(working_dir)
# csvs need to be in the same location as your dir
pd <- read.csv("pathdistances.csv")
loc <- read.csv("location.csv")
pd$node_pairs <- paste0(pd$n1, pd$n2)
path_distance <- 0
sum_path_dist <- function(pathscol){
path_distances <- c()
error_list <- c()
for (i in 1:length(pathscol)){
path_distance <- 0
path <- strsplit(as.character(pathscol[i]), " ")[[1]]
for (j in 1:(length(path) - 1)){
node_pair <- paste0(path[j], path[j + 1])
if (node_pair %in% pd$node_pairs){
path_dist <- pd$distance[which(pd$node_pairs == node_pair)]
} else if (path[j] == path[j+1]){
path_dist <- 0
} else {
path_dist <- 0
error_list <- c(error_list, node_pair)
}
path_distance <- path_distance + path_dist
error_list <- error_list
}
path_distances <- c(path_distances, path_distance)
error_list <- error_list
}
return(path_distances)
}
calc_euc_dist <- function(pathscol){
euc_dist_trav <- c()
for (i in 1:length(pathscol)){
path <- strsplit(as.character(pathscol[i]), " ")[[1]]
start <- path[1]
end <- path[length(path)]
x_start <- loc[loc$Location == start, 2]
y_start <- loc[loc$Location == start, 3]
x_end <- loc[loc$Location == end, 2]
y_end <- loc[loc$Location == end, 3]
x_diff <- x_end - x_start
y_diff <- y_end - y_start
euc_dist <- sqrt(sum(x_diff^2, y_diff^2))
euc_dist_trav <- c(euc_dist_trav, euc_dist)
}
return(euc_dist_trav)
}
tm <- read.csv("MLINDIV_trial_master.csv")
tm <- tm %>% mutate(path_dist_trav = sum_path_dist(paths))
tm <- tm %>% mutate(euc_dist_trav = calc_euc_dist(paths))
write.csv(tm, "MLINDIV_trial_master.csv")
pd <- read.csv("pathdistances.csv")
pd$node_pairs <- paste0(pd$n1, pd$n2)
calc_pd <- function(pathscol){
path_distances <- c()
for (i in 1:length(pathscol)){
path_distance <- 0
path <- strsplit(as.character(pathscol[i]), " ")[[1]]
for (j in 1:(length(path) - 1)){
node_pair <- paste0(path[j], path[j + 1])
if (node_pair %in% pd$node_pairs){
path_dist <- pd$distance[which(pd$node_pairs == node_pair)]
} else if (path[j] == path[j+1]){
path_dist <- 0
} else {
path_dist <- 0
}
path_distance <- path_distance + path_dist
}
path_distances <- c(path_distances, path_distance)
}
return(path_distances)
}
tm <- read.csv("MLINDIV_trial_master.csv")
path_efficiencies <- c()
tm$paths <- as.character(tm$paths)
# Calculate path efficiencies
for (i in 1:nrow(tm)){
path_eff <- 0
if (!is.na(tm$Procedure[i]) & !is.na(tm$select_made[i])){
path_eff <- tm$path_dist_trav[i] / tm$Path.Distance[i]
# path_eff <- tm$path_dist_trav[i] / tm$Path.Distance[which(tm$StartAt == tm$StartAt[i] & tm$EndAt == as.character(tm$end_location[i]))[1]]
}
else {
path_eff <- NA
}
if (tm$StartAt[i] == tm$end_location[i] & !is.na(tm$StartAt[i])){
path_eff <- NA
if (length(strsplit(as.character(tm$paths[i]), " ")[[1]]) == 2){
tm$paths[i] <- strsplit(as.character(tm$paths[i]), " ")[[1]][2]
}
}
path_efficiencies <- c(path_efficiencies, path_eff)
}
tm_new <- cbind(tm, path_efficiencies)
# Grab Time Stamp of experiment session
dates <- c()
times <- c()
for (i in 1:nrow(tm_new)){
filename <- sprintf("%03d/%s.txt", tm$Subject[i], tm$eprocs[i]) # assumes that you're in the directory with all of the raw txt files
print(filename)
ss_date <- read_eprime(filename)[14]
ss_time <- read_eprime(filename)[15]
dates <- c(dates, ss_date)
times <- c(times, ss_time)
}
for (time in 1:length(times)){
times[time] <- as.character(strsplit(as.character(times[time]), " ")[[1]][2])
}
tm_new <- cbind(dates, times, tm_new)
tm_new <- tm_new[, c(3, 1:2, 4:ncol(tm_new))]
tm_new$dates <- as.Date(tm_new$dates, "SessionDate: %m-%d-%Y")
write.csv(tm_new, "MLINDIV_trial_master.csv", row.names = FALSE)
debugSource("~/Desktop/MLINDIV_analysisDC/MidlifeDesktopBehavior/path_distances_SNAG_final.R")
View(tm_new)
source("~/Desktop/MLINDIV_analysisDC/MidlifeDesktopBehavior/participant_master_SNAG_final.R")
source("~/Desktop/MLINDIV_analysisDC/MidlifeDesktopBehavior/participant_master_SNAG_final.R")
workdir<- "/Users/danielacossio/Desktop/MLINDIV_analysisDC/MidlifeDesktopBehavior/MLINDIV_trial_master.csv"
setwd(workdir)
#-------------------------------------------------------------------------------
#load in packages
library(ggplot2)
library(plyr)
library(dplyr)
library(tidyr)
library(stringr)
library(data.table)
library(network)
library(tidygraph)
library(ggraph)
library(igraph)
library(networkD3)
library(CINNA)
library(umap)
library(plotly)
library(factoextra)
library(lsr)
library(car)
library(ggpubr)
library(entropy)
library(ds4psy)
library(pROC)
library(devtools)
#-------------------------------------------------------------------------------
workdir<- "/Users/danielacossio/Desktop/MLINDIV_analysisDC/MidlifeDesktopBehavior/"
setwd(workdir)
# read files in
trialDF<-read.csv ("MLINDIV_trial_master.csv")
participantDF<-read.csv ("MLINDIV_participant_master.csv")
subjInfo <- read.csv("particantinfo.csv")
View(participantDF)
View(subjInfo)
# read files in
trialDF<-read.csv ("MLINDIV_trial_master.csv")
participantDF<-read.csv ("MLINDIV_participant_master.csv")
subjInfo <- read.csv("MAZE_data_old.csv")
View(subjInfo)
View(participantDF)
trialDF<-read.csv ("MLINDIV_trial_master.csv")
participantDF<-read.csv ("MLINDIV_participant_master.csv")
subjInfo <- read.csv("/Users/danielacossio/Desktop/MLINDIV_analysisDC/MidlifeDesktopBehavior/all_SNAG_participant.csv")
View(subjInfo)
View(participantDF)
View(participantDF)
workdir<- "/Users/danielacossio/Desktop/MLINDIV_analysisDC/MidlifeDesktopBehavior/"
setwd(workdir)
# read files in
#infosheet with age/sex
subjInfo<-read.csv ("MLINDIV_participant_master.csv")  %>% select(Subject.ID,Sex,Age.Scan..years.,MAZE.Accuracy....) %>% `colnames<-` (c("Subject","sex","age","accuracy")) %>% drop_na()  %>% arrange(.$Subject)
#preprocessed data
trialDF<-read.csv ("MLINDIV_trial_master.csv") %>% filter(Subject %in% c(as.character(participant_info$Subject)))
participantDF<-read.csv ("MLINDIV_participant_master.csv") %>%  filter(Subject %in% c(as.character(participant_info$Subject)))
subjInfo<-read.csv ("/MAZE_data_old.csv")  %>% select(Subject.ID,Sex,Age.Scan..years.,MAZE.Accuracy....) %>% `colnames<-` (c("Subject","sex","age","accuracy")) %>% drop_na()  %>% arrange(.$Subject)
subjInfo<-read.csv ("MAZE_data_old.csv")  %>% select(Subject.ID,Sex,Age.Scan..years.,MAZE.Accuracy....) %>% `colnames<-` (c("Subject","sex","age","accuracy")) %>% drop_na()  %>% arrange(.$Subject)
trialDF<-read.csv ("MLINDIV_trial_master.csv") %>% filter(Subject %in% c(as.character(participant_info$Subject)))
participantDF<-read.csv ("MLINDIV_participant_master.csv") %>%  filter(Subject %in% c(as.character(participant_info$Subject)))
#infosheet with age/sex
subjInfo<-read.csv ("MAZE_data_old.csv")  %>% select(Subject.ID,Sex,Age.Scan..years.,MAZE.Accuracy....) %>% `colnames<-` (c("Subject","sex","age","accuracy")) %>% drop_na()  %>% arrange(.$Subject)
#preprocessed data
trialDF<-read.csv ("MLINDIV_trial_master.csv") %>% filter(Subject %in% c(as.character(subjInfo$Subject)))
participantDF<-read.csv ("MLINDIV_participant_master.csv") %>%  filter(Subject %in% c(as.character(subjInfo$Subject)))
View(subjInfo)
View(participantDF)
subjInfo<-read.csv ("MAZE_data_old.csv")  %>% select(Subject.ID,Sex,Age.Scan..years.,) %>% `colnames<-` (c("Subject","sex","age")) %>% drop_na()  %>% arrange(.$Subject)
#preprocessed data
trialDF<-read.csv ("MLINDIV_trial_master.csv") %>% filter(Subject %in% c(as.character(subjInfo$Subject)))
participantDF<-read.csv ("MLINDIV_participant_master.csv") %>%  filter(Subject %in% c(as.character(subjInfo$Subject)))
master_trial <- inner_join(subjInfo, trialDF, by="Subject")
master_participant <- inner_join(subjInfo, participantDF, by="Subject")
View(master_trial)
View(master_participant)
idx2rm<- which(master_participant$n_trials!=24)
View(trialDF)
View(master_participant)
locs <- c('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', "Y", "Z")
objs_orientations<- c('A4', 'I2', 'K4', 'L2', 'N3', 'O2', 'P2', 'Y2', 'W4')
objects<-c('A', 'I', 'K', 'L', 'N', 'O', 'P', 'Y', 'W')
hallways <- c('B', 'C', 'D', 'E', 'F', 'G', 'H', 'J', 'M', 'Q', 'R', 'S', 'T', 'U', "V", 'X', "Z")
explr <- master_trial %>% filter(is.na(accuracy) == TRUE) %>% filter(Task_type == 1 | Task_type == 2) #
View(explr)
explr <- master_trial %>% filter(is.na(accuracy) == TRUE) %>% filter(Task_type == 1 | Task_type == 2) #
explrDF<- data.frame(matrix(nrow = nrow(explr)))#creating empty dataframe to store contents of for loop into
for (i in 1:nrow(explr)){
e_string_orient<-as.list(strsplit(explr$e_paths[i],split=" ")) #splitting exploration path trajectory (with orientations) of subject into individual strings and storing as list
e_string<-as.list(strsplit(explr$paths[i],split=" ")) #splitting exploration path trajectories (w/o orientations) of subject into individual strings
F3_index<-which(sapply(e_string_orient[[1]], FUN=function(X) "F3" %in% X))+1 #finding which element in string list is F3, and we need to add a constant of 1 to
#match this up to where the same element would be in the "paths" variable. If element doesn't exist, R takes this into account and doesn't add a 1 (i.e., it keeps the
#index value as 'non existent' even after adding a 1)
e_string[[1]][F3_index]<-"N" #replacing with N
V2_index<-which(sapply(e_string_orient[[1]], FUN=function(X) "V2" %in% X))+1#finding which element in string list is V2, and we need to add a constant of 1 to
#match this up to where the same element would be in the "paths" variable. If element doesn't exist, R takes this into account and doesn't add a 1 (i.e., it keeps the
#index value as 'non existent' even after adding 1)
e_string[[1]][V2_index]<-"Y" #replacing with Y
e_string<-paste(e_string[[1]], collapse = " ") #collapsing exploration path trajectory into single string list
explrDF[i,1]<-e_string #storing transposed version into dataframe
}
View(explrDF)
View(explr)
explrDF$Subject<-explr$Subject #adding subject ID to dataframe
explrDF <- explr %>% rename(paths = matrix.nrow...nrow.explr..) #renaming column containing exploration trajectories
explrDF <- explr %>% rename(paths = matrix.nrow...nrow.explr..)
View(explrDF)
explrDF <- explrDF %>% rename(paths = matrix.nrow...nrow.explr..) #renaming column containing exploration trajectories
View(explrDF)
View(master_participant)
master_participant <- inner_join(master_participant,explrDF)
View(master_participant)
explr <- master_trial %>% filter(is.na(accuracy) == TRUE) %>% filter(Task_type == 1 | Task_type == 2) #
explrDF<- data.frame(matrix(nrow = nrow(explr)))#creating empty dataframe to store contents of for loop into
for (i in 1:nrow(explr)){
e_string_orient<-as.list(strsplit(explr$e_paths[i],split=" ")) #splitting exploration path trajectory (with orientations) of subject into individual strings and storing as list
e_string<-as.list(strsplit(explr$paths[i],split=" ")) #splitting exploration path trajectories (w/o orientations) of subject into individual strings
F3_index<-which(sapply(e_string_orient[[1]], FUN=function(X) "F3" %in% X))+1 #finding which element in string list is F3, and we need to add a constant of 1 to
#match this up to where the same element would be in the "paths" variable. If element doesn't exist, R takes this into account and doesn't add a 1 (i.e., it keeps the
#index value as 'non existent' even after adding a 1)
e_string[[1]][F3_index]<-"N" #replacing with N
V2_index<-which(sapply(e_string_orient[[1]], FUN=function(X) "V2" %in% X))+1#finding which element in string list is V2, and we need to add a constant of 1 to
#match this up to where the same element would be in the "paths" variable. If element doesn't exist, R takes this into account and doesn't add a 1 (i.e., it keeps the
#index value as 'non existent' even after adding 1)
e_string[[1]][V2_index]<-"Y" #replacing with Y
e_string<-paste(e_string[[1]], collapse = " ") #collapsing exploration path trajectory into single string list
explrDF[i,1]<-e_string #storing transposed version into dataframe
}
explrDF$Subject<-explr$Subject #adding subject ID to dataframe
explrDF <- explrDF %>% rename(exploration_paths #renaming column containing exploration trajectories
master_participant <- inner_join(master_participant,explrDF)
