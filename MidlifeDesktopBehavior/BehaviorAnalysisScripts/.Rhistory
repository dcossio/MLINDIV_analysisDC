# library(plotly)
library(factoextra)
library(lsr)
# library(car)
library(ggpubr)
library(entropy)
#library(ds4psy)
# library(pROC)
library(devtools)
library(BRRR)
library(stats)
library(afex)
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
workdir<- "/Users/danielacossio/Desktop/MLINDIV_analysisDC/MidlifeDesktopBehavior"
setwd(workdir)
#Path Roaming Entropy
mid_exp_paths<-as.data.frame(mid_big_explore$subject) #building empty dataframe which we will populate with output from for loop below (part 1)
mid_exp_paths$paths<-rep("TBC",nrow(mid_exp_paths)) #adding TBCs for now, this will be replaced with output from for loop below
#For loop to condense path trajectories from midlife_big_explore into single sequence, and remove "repeats" and "none"
for (i in 1:nrow(mid_big_explore)){
cols<-2:length(mid_big_explore) #indexing columns to condense into single sequence
mid_exp_paths[i,2]<-paste(mid_big_explore[i,cols], collapse = '') #combining all characters into single sequence
mid_exp_paths[i,2]<-gsub('[repeatsnone]', '', mid_exp_paths[i,2])#removing strings "repeats" and "none" from sequence
}
#Combining each subject's exploration trajectories across both sessions into one exploration trajectory
mid_exp_paths<- mid_exp_paths %>% group_by(`mid_big_explore$subject`) %>% mutate(newcol=paste(paths, collapse = '')) #combining trajectories for each subject
mid_exp_paths<- mid_exp_paths %>% filter (row_number() %% 2 !=0) #deletes even rows, which are duplicates with regards to combined trajectories
names(mid_exp_paths)[names(mid_exp_paths) == 'newcol'] <- 'CombinedPaths' #renaming column
mid_exp_paths<-as.data.frame(mid_exp_paths) #converting to df so that for loop below works
#For loop to calculate path roaming entropies
for (i in 1:nrow(mid_exp_paths)){
y<-strsplit(mid_exp_paths[i,3],split = "")
y_counts_table<-table(y)
y_counts_vals<-as.numeric(y_counts_table)
y_entropy<-entropy(y_counts_vals,method = c("ML")) #calculate Shannon's Entropy
mid_exp_paths$entropy[i]<-y_entropy
}
#midlife_exploration_analysis$pathentropy<-midlife_exp_paths$entropy #adding to main analysis dataframe
View(mid_exp_paths)
View(mid_big_explore)
mid_big_explore<-as.data.frame(str_split_fixed(mid_expl_df$paths," ",nrow(mid_expl_df)))
mid_big_explore <- mid_big_explore %>% mutate(subject = mid_expl_df$Subject)
mid_big_explore <-mid_big_explore[,c(ncol(mid_big_explore), 1:(ncol(mid_big_explore)-1))]
row_labels<-c(1:nrow(mid_big_explore))
mid_big_explore<- split( mid_big_explore , f = row_labels)
#for loop to find consecutive location repeats, and remove them
for (i in 1:length(mid_big_explore)){
mid_big_explore[[i]]<-t(mid_big_explore[[i]])
mid_big_explore[[i]][mid_big_explore[[i]] == ""] <- NA
repeat_logical<-t(c(NA, mid_big_explore[[i]]) == c(mid_big_explore[[i]], NA))[1:length(mid_big_explore[[i]])]
repeats<- grep("TRUE",repeat_logical)
mid_big_explore[[i]][repeats,1]<-"repeats"
mid_big_explore[[i]]<-t(mid_big_explore[[i]])
mid_big_explore[[i]]<-as.data.frame(mid_big_explore[[i]])
}
mid_big_explore<-unsplit(mid_big_explore,row_labels)#merging all chunks back into single dataframe
mid_big_explore[is.na(mid_big_explore)]<-"none" #replacing all NAs with string, otherwise for loop below won't work
mid_big_explore <-  mid_big_explore %>% mutate(sex = mid_expl_df$sex) %>% mutate(age = mid_expl_df$age)
#for loop to determine location counts
mid_big_explore_counts <- data.frame(matrix(ncol = 0, nrow = nrow(mid_big_explore)))#creating dataframe to store counts into
for (i in locs){
mid_big_explore_counts$subject <- mid_big_explore$subject
d <- as.data.frame(apply(mid_big_explore,1,function(x) sum(x==i))) # not sure what this function is
names(d) <- i
mid_big_explore_counts <- cbind(d, mid_big_explore_counts)
}
mid_big_explore_counts <- mid_big_explore_counts %>% mutate(sex=mid_expl_df$sex) %>% mutate(age =mid_expl_df$age)
#location visits
yng_big_explore<-as.data.frame(str_split_fixed(yng_expl_df$paths," ",nrow(yng_expl_df)))
yng_big_explore <- yng_big_explore %>% mutate(subject = yng_expl_df$Subject)
yng_big_explore <-yng_big_explore[,c(ncol(yng_big_explore), 1:(ncol(yng_big_explore)-1))]
row_labels<-c(1:nrow(yng_big_explore))
yng_big_explore<- split( yng_big_explore , f = row_labels)
#for loop to find consecutive location repeats, and remove them
for (i in 1:length(yng_big_explore)){
yng_big_explore[[i]]<-t(yng_big_explore[[i]])
yng_big_explore[[i]][yng_big_explore[[i]] == ""] <- NA
repeat_logical<-t(c(NA, yng_big_explore[[i]]) == c(yng_big_explore[[i]], NA))[1:length(yng_big_explore[[i]])]
repeats<- grep("TRUE",repeat_logical)
yng_big_explore[[i]][repeats,1]<-"repeats"
yng_big_explore[[i]]<-t(yng_big_explore[[i]])
yng_big_explore[[i]]<-as.data.frame(yng_big_explore[[i]])
}
yng_big_explore<-unsplit(yng_big_explore,row_labels)#merging all chunks back into single dataframe
yng_big_explore[is.na(yng_big_explore)]<-"none" #replacing all NAs with string, otherwise for loop below won't work
yng_big_explore <-  yng_big_explore %>% mutate(sex = yng_expl_df$sex)%>% mutate(age = yng_expl_df$age)
#for loop to determine location counts
yng_big_explore_counts <- data.frame(matrix(ncol = 0, nrow = nrow(yng_big_explore)))#creating dataframe to store counts into
for (i in locs){
yng_big_explore_counts$subject <- yng_big_explore$subject
d <- as.data.frame(apply(yng_big_explore,1,function(x) sum(x==i))) # not sure what this function is
names(d) <- i
yng_big_explore_counts <- cbind(d, yng_big_explore_counts)
}
yng_big_explore_counts <- yng_big_explore_counts %>% mutate(sex=yng_expl_df$sex) %>% mutate(age =yng_expl_df$age)
#location visits
yng_big_explore<-as.data.frame(str_split_fixed(yng_expl_df$paths," ",nrow(yng_expl_df)))
yng_big_explore <- yng_big_explore %>% mutate(subject = yng_expl_df$Subject)
yng_big_explore <-yng_big_explore[,c(ncol(yng_big_explore), 1:(ncol(yng_big_explore)-1))]
row_labels<-c(1:nrow(yng_big_explore))
yng_big_explore<- split( yng_big_explore , f = row_labels)
#for loop to find consecutive location repeats, and remove them
for (i in 1:length(yng_big_explore)){
yng_big_explore[[i]]<-t(yng_big_explore[[i]])
yng_big_explore[[i]][yng_big_explore[[i]] == ""] <- NA
repeat_logical<-t(c(NA, yng_big_explore[[i]]) == c(yng_big_explore[[i]], NA))[1:length(yng_big_explore[[i]])]
repeats<- grep("TRUE",repeat_logical)
yng_big_explore[[i]][repeats,1]<-"repeats"
yng_big_explore[[i]]<-t(yng_big_explore[[i]])
yng_big_explore[[i]]<-as.data.frame(yng_big_explore[[i]])
}
yng_big_explore<-unsplit(yng_big_explore,row_labels)#merging all chunks back into single dataframe
yng_big_explore[is.na(yng_big_explore)]<-"none" #replacing all NAs with string, otherwise for loop below won't work
yng_big_explore <-  yng_big_explore %>% mutate(sex = yng_expl_df$sex)%>% mutate(age = yng_expl_df$age)
#for loop to determine location counts
yng_big_explore_counts <- data.frame(matrix(ncol = 0, nrow = nrow(yng_big_explore)))#creating dataframe to store counts into
for (i in locs){
yng_big_explore_counts$subject <- yng_big_explore$subject
d <- as.data.frame(apply(yng_big_explore,1,function(x) sum(x==i))) # not sure what this function is
names(d) <- i
yng_big_explore_counts <- cbind(d, yng_big_explore_counts)
}
yng_big_explore_counts <- yng_big_explore_counts %>% mutate(sex=yng_expl_df$sex) %>% mutate(age =yng_expl_df$age)
#Path Roaming Entropy
mid_exp_paths<-as.data.frame(mid_big_explore$subject) #building empty dataframe which we will populate with output from for loop below (part 1)
mid_exp_paths$paths<-rep("TBC",nrow(mid_exp_paths)) #adding TBCs for now, this will be replaced with output from for loop below
#For loop to condense path trajectories from midlife_big_explore into single sequence, and remove "repeats" and "none"
for (i in 1:nrow(mid_big_explore)){
cols<-2:length(mid_big_explore) #indexing columns to condense into single sequence
mid_exp_paths[i,2]<-paste(mid_big_explore[i,cols], collapse = '') #combining all characters into single sequence
mid_exp_paths[i,2]<-gsub('[repeatsnone]', '', mid_exp_paths[i,2])#removing strings "repeats" and "none" from sequence
}
#Combining each subject's exploration trajectories across both sessions into one exploration trajectory
mid_exp_paths<- mid_exp_paths %>% group_by(`mid_big_explore$subject`) %>% mutate(newcol=paste(paths, collapse = '')) #combining trajectories for each subject
mid_exp_paths<- mid_exp_paths %>% filter (row_number() %% 2 !=0) #deletes even rows, which are duplicates with regards to combined trajectories
names(mid_exp_paths)[names(mid_exp_paths) == 'newcol'] <- 'CombinedPaths' #renaming column
mid_exp_paths<-as.data.frame(mid_exp_paths) #converting to df so that for loop below works
#For loop to calculate path roaming entropies
for (i in 1:nrow(mid_exp_paths)){
y<-strsplit(mid_exp_paths[i,3],split = "")
y_counts_table<-table(y)
y_counts_vals<-as.numeric(y_counts_table)
y_entropy<-entropy(y_counts_vals,method = c("ML")) #calculate Shannon's Entropy
mid_exp_paths$entropy[i]<-y_entropy
}
#midlife_exploration_analysis$pathentropy<-midlife_exp_paths$entropy #adding to main analysis dataframe
View(mid_exp_paths)
mid_exp_paths<-as.data.frame(mid_big_explore[,c("Subjects", "sez", "age")])
View(mid_big_explore_counts)
#Path Roaming Entropy
mid_exp_paths<-as.data.frame(mid_big_explore[,c("subject", "sex", "age")]) #building empty dataframe which we will populate with output from for loop below (part 1)
mid_exp_paths$paths<-rep("TBC",nrow(mid_exp_paths)) #adding TBCs for now, this will be replaced with output from for loop below
#For loop to condense path trajectories from midlife_big_explore into single sequence, and remove "repeats" and "none"
for (i in 1:nrow(mid_big_explore)){
cols<-2:length(mid_big_explore) #indexing columns to condense into single sequence
mid_exp_paths[i,2]<-paste(mid_big_explore[i,cols], collapse = '') #combining all characters into single sequence
mid_exp_paths[i,2]<-gsub('[repeatsnone]', '', mid_exp_paths[i,2])#removing strings "repeats" and "none" from sequence
}
#Combining each subject's exploration trajectories across both sessions into one exploration trajectory
mid_exp_paths<- mid_exp_paths %>% group_by(`mid_big_explore$subject`) %>% mutate(newcol=paste(paths, collapse = '')) #combining trajectories for each subject
#Path Roaming Entropy
mid_exp_paths<-as.data.frame(mid_big_explore[,c("subject", "sex", "age")]) #building empty dataframe which we will populate with output from for loop below (part 1)
mid_exp_paths$paths<-rep("TBC",nrow(mid_exp_paths)) #adding TBCs for now, this will be replaced with output from for loop below
#For loop to condense path trajectories from midlife_big_explore into single sequence, and remove "repeats" and "none"
for (i in 1:nrow(mid_big_explore)){
cols<-2:length(mid_big_explore) #indexing columns to condense into single sequence
mid_exp_paths[i,2]<-paste(mid_big_explore[i,cols], collapse = '') #combining all characters into single sequence
mid_exp_paths[i,2]<-gsub('[repeatsnone]', '', mid_exp_paths[i,2])#removing strings "repeats" and "none" from sequence
}
#Combining each subject's exploration trajectories across both sessions into one exploration trajectory
mid_exp_paths<- mid_exp_paths %>% group_by(`mid_big_explore$subject`) %>% mutate(newcol=paste(paths, collapse = '')) #combining trajectories for each subject
mid_exp_paths<-as.data.frame(mid_big_explore[,c("subject", "sex", "age")])
mid_exp_paths$paths<-rep("TBC",nrow(mid_exp_paths))
for (i in 1:nrow(mid_big_explore)){
cols<-2:length(mid_big_explore) #indexing columns to condense into single sequence
mid_exp_paths[i,4]<-paste(mid_big_explore[i,cols], collapse = '') #combining all characters into single sequence
mid_exp_paths[i,4]<-gsub('[repeatsnone]', '', mid_exp_paths[i,2])#removing strings "repeats" and "none" from sequence
}
for (i in 1:nrow(mid_big_explore)){
cols<-4:length(mid_big_explore) #indexing columns to condense into single sequence
mid_exp_paths[i,4]<-paste(mid_big_explore[i,cols], collapse = '') #combining all characters into single sequence
mid_exp_paths[i,4]<-gsub('[repeatsnone]', '', mid_exp_paths[i,2])#removing strings "repeats" and "none" from sequence
}
ncol(yng_big_explore)
ncol(mid_big_explore)
View(yng_big_explore)
yng_big_explore <-yng_big_explore[,c(1,102,103,3:101)]
View(d)
mid_big_explore <-mid_big_explore[,c(1,106,107,3:105)]
View(mid_big_explore)
mid_big_explore<-as.data.frame(str_split_fixed(mid_expl_df$paths," ",nrow(mid_expl_df)))
mid_big_explore <- mid_big_explore %>% mutate(subject = mid_expl_df$Subject)
mid_big_explore <-mid_big_explore[,c(ncol(mid_big_explore), 1:(ncol(mid_big_explore)-1))]
row_labels<-c(1:nrow(mid_big_explore))
mid_big_explore<- split( mid_big_explore , f = row_labels)
#for loop to find consecutive location repeats, and remove them
for (i in 1:length(mid_big_explore)){
mid_big_explore[[i]]<-t(mid_big_explore[[i]])
mid_big_explore[[i]][mid_big_explore[[i]] == ""] <- NA
repeat_logical<-t(c(NA, mid_big_explore[[i]]) == c(mid_big_explore[[i]], NA))[1:length(mid_big_explore[[i]])]
repeats<- grep("TRUE",repeat_logical)
mid_big_explore[[i]][repeats,1]<-"repeats"
mid_big_explore[[i]]<-t(mid_big_explore[[i]])
mid_big_explore[[i]]<-as.data.frame(mid_big_explore[[i]])
}
mid_big_explore<-unsplit(mid_big_explore,row_labels)#merging all chunks back into single dataframe
mid_big_explore[is.na(mid_big_explore)]<-"none" #replacing all NAs with string, otherwise for loop below won't work
mid_big_explore <-  mid_big_explore %>% mutate(sex = mid_expl_df$sex) %>% mutate(age = mid_expl_df$age)
ncol(mid_big_explore)
mid_big_explore<-as.data.frame(str_split_fixed(mid_expl_df$paths," ",nrow(mid_expl_df)))
mid_big_explore <- mid_big_explore %>% mutate(subject = mid_expl_df$Subject)
mid_big_explore <-mid_big_explore[,c(ncol(mid_big_explore), 1:(ncol(mid_big_explore)-1))]
row_labels<-c(1:nrow(mid_big_explore))
mid_big_explore<- split( mid_big_explore , f = row_labels)
#for loop to find consecutive location repeats, and remove them
for (i in 1:length(mid_big_explore)){
mid_big_explore[[i]]<-t(mid_big_explore[[i]])
mid_big_explore[[i]][mid_big_explore[[i]] == ""] <- NA
repeat_logical<-t(c(NA, mid_big_explore[[i]]) == c(mid_big_explore[[i]], NA))[1:length(mid_big_explore[[i]])]
repeats<- grep("TRUE",repeat_logical)
mid_big_explore[[i]][repeats,1]<-"repeats"
mid_big_explore[[i]]<-t(mid_big_explore[[i]])
mid_big_explore[[i]]<-as.data.frame(mid_big_explore[[i]])
}
mid_big_explore<-unsplit(mid_big_explore,row_labels)#merging all chunks back into single dataframe
mid_big_explore[is.na(mid_big_explore)]<-"none" #replacing all NAs with string, otherwise for loop below won't work
mid_big_explore <-  mid_big_explore %>% mutate(sex = mid_expl_df$sex) %>% mutate(age = mid_expl_df$age)
mid_big_explore <-mid_big_explore[,c(1,176,177,3:175)]
#for loop to determine location counts
mid_big_explore_counts <- data.frame(matrix(ncol = 0, nrow = nrow(mid_big_explore)))#creating dataframe to store counts into
for (i in locs){
mid_big_explore_counts$subject <- mid_big_explore$subject
d <- as.data.frame(apply(mid_big_explore,1,function(x) sum(x==i))) # not sure what this function is
names(d) <- i
mid_big_explore_counts <- cbind(d, mid_big_explore_counts)
}
mid_big_explore_counts <- mid_big_explore_counts %>% mutate(sex=mid_expl_df$sex) %>% mutate(age =mid_expl_df$age)
View(mid_big_explore_counts)
ncol(mid_big_explore)
mid_big_explore<-as.data.frame(str_split_fixed(mid_expl_df$paths," ",nrow(mid_expl_df)))
mid_big_explore <- mid_big_explore %>% mutate(subject = mid_expl_df$Subject)
mid_big_explore <-mid_big_explore[,c(ncol(mid_big_explore), 1:(ncol(mid_big_explore)-1))]
row_labels<-c(1:nrow(mid_big_explore))
mid_big_explore<- split( mid_big_explore , f = row_labels)
#for loop to find consecutive location repeats, and remove them
for (i in 1:length(mid_big_explore)){
mid_big_explore[[i]]<-t(mid_big_explore[[i]])
mid_big_explore[[i]][mid_big_explore[[i]] == ""] <- NA
repeat_logical<-t(c(NA, mid_big_explore[[i]]) == c(mid_big_explore[[i]], NA))[1:length(mid_big_explore[[i]])]
repeats<- grep("TRUE",repeat_logical)
mid_big_explore[[i]][repeats,1]<-"repeats"
mid_big_explore[[i]]<-t(mid_big_explore[[i]])
mid_big_explore[[i]]<-as.data.frame(mid_big_explore[[i]])
}
mid_big_explore<-unsplit(mid_big_explore,row_labels)#merging all chunks back into single dataframe
mid_big_explore[is.na(mid_big_explore)]<-"none" #replacing all NAs with string, otherwise for loop below won't work
mid_big_explore <-  mid_big_explore %>% mutate(sex = mid_expl_df$sex) %>% mutate(age = mid_expl_df$age)
ncol(mid_big_explore)
mid_big_explore[,177]
mid_big_explore[,176]
mid_big_explore[,175]
mid_big_explore <-mid_big_explore[,c(1,176,177,2:175)]
mid_big_explore<-as.data.frame(str_split_fixed(mid_expl_df$paths," ",nrow(mid_expl_df)))
mid_big_explore <- mid_big_explore %>% mutate(subject = mid_expl_df$Subject)
mid_big_explore <-mid_big_explore[,c(ncol(mid_big_explore), 1:(ncol(mid_big_explore)-1))]
row_labels<-c(1:nrow(mid_big_explore))
mid_big_explore<- split( mid_big_explore , f = row_labels)
#for loop to find consecutive location repeats, and remove them
for (i in 1:length(mid_big_explore)){
mid_big_explore[[i]]<-t(mid_big_explore[[i]])
mid_big_explore[[i]][mid_big_explore[[i]] == ""] <- NA
repeat_logical<-t(c(NA, mid_big_explore[[i]]) == c(mid_big_explore[[i]], NA))[1:length(mid_big_explore[[i]])]
repeats<- grep("TRUE",repeat_logical)
mid_big_explore[[i]][repeats,1]<-"repeats"
mid_big_explore[[i]]<-t(mid_big_explore[[i]])
mid_big_explore[[i]]<-as.data.frame(mid_big_explore[[i]])
}
mid_big_explore<-unsplit(mid_big_explore,row_labels)#merging all chunks back into single dataframe
mid_big_explore[is.na(mid_big_explore)]<-"none" #replacing all NAs with string, otherwise for loop below won't work
mid_big_explore <-  mid_big_explore %>% mutate(sex = mid_expl_df$sex) %>% mutate(age = mid_expl_df$age)
mid_big_explore <-mid_big_explore[,c(1,176,177,2:175)]
#for loop to determine location counts
mid_big_explore_counts <- data.frame(matrix(ncol = 0, nrow = nrow(mid_big_explore)))#creating dataframe to store counts into
for (i in locs){
mid_big_explore_counts$subject <- mid_big_explore$subject
d <- as.data.frame(apply(mid_big_explore,1,function(x) sum(x==i))) # not sure what this function is
names(d) <- i
mid_big_explore_counts <- cbind(d, mid_big_explore_counts)
}
mid_big_explore_counts <- mid_big_explore_counts %>% mutate(sex=mid_expl_df$sex) %>% mutate(age =mid_expl_df$age)
mid_big_explore<-as.data.frame(str_split_fixed(mid_expl_df$paths," ",nrow(mid_expl_df)))
mid_big_explore <- mid_big_explore %>% mutate(subject = mid_expl_df$Subject)
mid_big_explore <-mid_big_explore[,c(ncol(mid_big_explore), 1:(ncol(mid_big_explore)-1))]
row_labels<-c(1:nrow(mid_big_explore))
mid_big_explore<- split( mid_big_explore , f = row_labels)
#for loop to find consecutive location repeats, and remove them
for (i in 1:length(mid_big_explore)){
mid_big_explore[[i]]<-t(mid_big_explore[[i]])
mid_big_explore[[i]][mid_big_explore[[i]] == ""] <- NA
repeat_logical<-t(c(NA, mid_big_explore[[i]]) == c(mid_big_explore[[i]], NA))[1:length(mid_big_explore[[i]])]
repeats<- grep("TRUE",repeat_logical)
mid_big_explore[[i]][repeats,1]<-"repeats"
mid_big_explore[[i]]<-t(mid_big_explore[[i]])
mid_big_explore[[i]]<-as.data.frame(mid_big_explore[[i]])
}
mid_big_explore<-unsplit(mid_big_explore,row_labels)#merging all chunks back into single dataframe
mid_big_explore[is.na(mid_big_explore)]<-"none" #replacing all NAs with string, otherwise for loop below won't work
mid_big_explore <-  mid_big_explore %>% mutate(sex = mid_expl_df$sex) %>% mutate(age = mid_expl_df$age)
mid_big_explore <-mid_big_explore[,c(1,176,177,2:175)]
#for loop to determine location counts
mid_big_explore_counts <- data.frame(matrix(ncol = 0, nrow = nrow(mid_big_explore)))#creating dataframe to store counts into
for (i in locs){
mid_big_explore_counts$subject <- mid_big_explore$subject
d <- as.data.frame(apply(mid_big_explore,1,function(x) sum(x==i))) # not sure what this function is
names(d) <- i
mid_big_explore_counts <- cbind(d, mid_big_explore_counts)
}
mid_big_explore_counts <- mid_big_explore_counts %>% mutate(sex=mid_expl_df$sex) %>% mutate(age =mid_expl_df$age)
mid_exp_paths<-as.data.frame(mid_big_explore[,c("subject", "sex", "age")]) #building empty dataframe which we will populate with output from for loop below (part 1)
mid_exp_paths$paths<-rep("TBC",nrow(mid_exp_paths))
cols<-2:length(mid_big_explore)
View(mid_exp_paths)
mid_exp_paths[i,4]<-paste(mid_big_explore[i,cols], collapse = '')
mid_exp_paths[i,4]<-gsub('[repeatsnone]', '', mid_exp_paths[i,4])
"repeats" and "none"
#For loop to condense path trajectories from midlife_big_explore into single sequence, and remove "repeats" and "none"
for (i in 1:nrow(mid_big_explore)){
cols<-4:length(mid_big_explore) #indexing columns to condense into single sequence
mid_exp_paths[i,4]<-paste(mid_big_explore[i,cols], collapse = '') #combining all characters into single sequence
mid_exp_paths[i,4]<-gsub('[repeatsnone]', '', mid_exp_paths[i,4])#removing strings "repeats" and "none" from sequence
}
#Path Roaming Entropy
mid_exp_paths<-as.data.frame(mid_big_explore[,c("subject", "sex", "age")]) #building empty dataframe which we will populate with output from for loop below (part 1)
mid_exp_paths$paths<-rep("TBC",nrow(mid_exp_paths)) #adding TBCs for now, this will be replaced with output from for loop below
#For loop to condense path trajectories from midlife_big_explore into single sequence, and remove "repeats" and "none"
for (i in 1:nrow(mid_big_explore)){
cols<-4:length(mid_big_explore) #indexing columns to condense into single sequence
mid_exp_paths[i,4]<-paste(mid_big_explore[i,cols], collapse = '') #combining all characters into single sequence
mid_exp_paths[i,4]<-gsub('[repeatsnone]', '', mid_exp_paths[i,4])#removing strings "repeats" and "none" from sequence
}
mid_exp_paths<- mid_exp_paths %>% group_by(`mid_big_explore$subject`) %>% mutate(newcol=paste(paths, collapse = '')) #combining trajectories for each subject
View(mid_big_explore)
mid_exp_paths<- mid_exp_paths %>% group_by(`subject`) %>% mutate(newcol=paste(paths, collapse = ''))
View(mid_exp_paths)
mid_exp_paths %>% group_by(`subject`)
mid_exp_paths %>% group_by(`subject`)
mid_exp_paths %>% group_by(subject)
mid_exp_paths %>% group_by(subject)
#Path Roaming Entropy
mid_exp_paths<-as.data.frame(mid_big_explore[,c("subject", "sex", "age")]) #building empty dataframe which we will populate with output from for loop below (part 1)
mid_exp_paths$paths<-rep("TBC",nrow(mid_exp_paths)) #adding TBCs for now, this will be replaced with output from for loop below
#For loop to condense path trajectories from midlife_big_explore into single sequence, and remove "repeats" and "none"
for (i in 1:nrow(mid_big_explore)){
cols<-4:length(mid_big_explore) #indexing columns to condense into single sequence
mid_exp_paths[i,4]<-paste(mid_big_explore[i,cols], collapse = '') #combining all characters into single sequence
mid_exp_paths[i,4]<-gsub('[repeatsnone]', '', mid_exp_paths[i,4])#removing strings "repeats" and "none" from sequence
}
mid_exp_paths %>% group_by(subject)
mid_exp_paths<- mid_exp_paths %>% group_by(subject) %>% mutate(newcol=paste(paths, collapse = ''))
mid_exp_paths<- mid_exp_paths %>% group_by(subject) %>% mutate(newcol=paste(paths, collapse = '')) #combining trajectories for each subject
mid_exp_paths<- mid_exp_paths %>% filter (row_number() %% 2 !=0) #deletes even rows, which are duplicates with regards to combined trajectories
names(mid_exp_paths)[names(mid_exp_paths) == 'newcol'] <- 'CombinedPaths' #renaming column
mid_exp_paths<-as.data.frame(mid_exp_paths) #converting to df so that for loop below works
mid_exp_paths[1,3]
mid_exp_paths[1,4]
mid_exp_paths[1,5]
for (i in 1:nrow(mid_exp_paths)){
y<-strsplit(mid_exp_paths[i,3],split = "")
y_counts_table<-table(y)
y_counts_vals<-as.numeric(y_counts_table)
y_entropy<-entropy(y_counts_vals,method = c("ML")) #calculate Shannon's Entropy
mid_exp_paths$entropy[i]<-y_entropy
}
#For loop to calculate path roaming entropies
for (i in 1:nrow(mid_exp_paths)){
y<-strsplit(mid_exp_paths[i,5],split = "")
y_counts_table<-table(y)
y_counts_vals<-as.numeric(y_counts_table)
y_entropy<-entropy(y_counts_vals,method = c("ML")) #calculate Shannon's Entropy
mid_exp_paths$entropy[i]<-y_entropy
}
mid_female_analysis$entropy <- mid_exp_paths %>% filter(sex=="Female") %>% select(entropy)
View(mid_female_analysis)
mid_male_analysis$entropy <- mid_exp_paths %>% filter(sex=="Male") %>% select(entropy)
mid_male_analysis$entropy <- mid_exp_paths %>% filter(sex=="Male") %>% select(entropy)
View(mid_male_analysis)
View(mid_female_analysis)
mid_female_analysis$entropy <- mid_exp_paths %>% filter(sex=="Female") %>% select(.$entropy)
#Path Roaming Entropy
mid_exp_paths<-as.data.frame(mid_big_explore[,c("subject", "sex", "age")]) #building empty dataframe which we will populate with output from for loop below (part 1)
mid_exp_paths$paths<-rep("TBC",nrow(mid_exp_paths)) #adding TBCs for now, this will be replaced with output from for loop below
#For loop to condense path trajectories from midlife_big_explore into single sequence, and remove "repeats" and "none"
for (i in 1:nrow(mid_big_explore)){
cols<-4:length(mid_big_explore) #indexing columns to condense into single sequence
mid_exp_paths[i,4]<-paste(mid_big_explore[i,cols], collapse = '') #combining all characters into single sequence
mid_exp_paths[i,4]<-gsub('[repeatsnone]', '', mid_exp_paths[i,4])#removing strings "repeats" and "none" from sequence
}
#Combining each subject's exploration trajectories across both sessions into one exploration trajectory
mid_exp_paths<- mid_exp_paths %>% group_by(subject) %>% mutate(newcol=paste(paths, collapse = '')) #combining trajectories for each subject
mid_exp_paths<- mid_exp_paths %>% filter (row_number() %% 2 !=0) #deletes even rows, which are duplicates with regards to combined trajectories
names(mid_exp_paths)[names(mid_exp_paths) == 'newcol'] <- 'CombinedPaths' #renaming column
mid_exp_paths<-as.data.frame(mid_exp_paths) #converting to df so that for loop below works
#For loop to calculate path roaming entropies
for (i in 1:nrow(mid_exp_paths)){
y<-strsplit(mid_exp_paths[i,5],split = "")
y_counts_table<-table(y)
y_counts_vals<-as.numeric(y_counts_table)
y_entropy<-entropy(y_counts_vals,method = c("ML")) #calculate Shannon's Entropy
mid_exp_paths$entropy[i]<-y_entropy
}
mid_female_analysis$entropy <- mid_exp_paths %>% filter(sex=="Female") %>% select(.$entropy)
mid_exp_paths %>% filter(sex=="Female")
mid_exp_paths %>% filter(sex=="Female") %>% select(.$entropy)
mid_female_analysis$entropy <- mid_exp_paths %>% filter(sex=="Female") %>% select(c(entropy))
mid_female_analysis$entropy <- mid_exp_paths %>% filter(sex=="Female") %>% .[,c("entropy")]
mid_female_analysis$entropy <- mid_exp_paths %>% filter(sex=="Female") %>% .[,c("entropy")]
mid_male_analysis$entropy <- mid_exp_paths %>% filter(sex=="Male") %>% .[,c("entropy")]
#Path Roaming Entropy
yng_exp_paths<-as.data.frame(yng_big_explore[,c("subject", "sex", "age")]) #building empty dataframe which we will populate with output from for loop below (part 1)
yng_exp_paths$paths<-rep("TBC",nrow(yng_exp_paths)) #adding TBCs for now, this will be replaced with output from for loop below
#For loop to condense path trajectories from ynglife_big_explore into single sequence, and remove "repeats" and "none"
for (i in 1:nrow(yng_big_explore)){
cols<-4:length(yng_big_explore) #indexing columns to condense into single sequence
yng_exp_paths[i,4]<-paste(yng_big_explore[i,cols], collapse = '') #combining all characters into single sequence
yng_exp_paths[i,4]<-gsub('[repeatsnone]', '', yng_exp_paths[i,4])#removing strings "repeats" and "none" from sequence
}
#Combining each subject's exploration trajectories across both sessions into one exploration trajectory
yng_exp_paths<- yng_exp_paths %>% group_by(subject) %>% mutate(newcol=paste(paths, collapse = '')) #combining trajectories for each subject
yng_exp_paths<- yng_exp_paths %>% filter (row_number() %% 2 !=0) #deletes even rows, which are duplicates with regards to combined trajectories
names(yng_exp_paths)[names(yng_exp_paths) == 'newcol'] <- 'CombinedPaths' #renaming column
yng_exp_paths<-as.data.frame(yng_exp_paths) #converting to df so that for loop below works
#For loop to calculate path roaming entropies
for (i in 1:nrow(yng_exp_paths)){
y<-strsplit(yng_exp_paths[i,5],split = "")
y_counts_table<-table(y)
y_counts_vals<-as.numeric(y_counts_table)
y_entropy<-entropy(y_counts_vals,method = c("ML")) #calculate Shannon's Entropy
yng_exp_paths$entropy[i]<-y_entropy
}
yng_female_analysis$entropy <- yng_exp_paths %>% filter(sex=="Female") %>% .[,c("entropy")]
yng_male_analysis$entropy <- yng_exp_paths %>% filter(sex=="Male") %>% .[,c("entropy")]
View(yng_female_analysis)
Entropy <- rbind(mid_exp_paths,yng_exp_paths) %>% select(Subject,sex,age,entropy)
rbind(mid_exp_paths,yng_exp_paths)
Entropy <- rbind(mid_exp_paths,yng_exp_paths) %>% select(subject,sex,age,entropy)
View(Entropy)
shapiro.test(yng_female_analysis$entropy)
shapiro.test(yng_male_analysis$entropy)
shapiro.test(mid_female_analysis$entropy)
shapiro.test(mid_male_analysis$entropy)
entropy_aov<- aov(formula=entropy ~ sex*age ,BP)
entropy_aov<- aov(formula=entropy ~ sex*age ,Entropy)
summary(entropy_aov)
#Longest Hallway Sequence
#For loop to identify longest hallway sequence
for (i in 1:nrow(mid_exp_paths)){
z<-strsplit(mid_exp_paths[i,5],split = "")
logical<-as.vector(sapply(z, `%in%`, objects)) #finding if each visited location is an object or not in binary form (true=object, false=hallway)
mid_exp_paths$hallwayseq[i]<-with(rle(logical),max(lengths))#finding longest sequence of hallway visits that is not interrupted by an object visit; note that max seq is bound to be hallway as you can't have long sequences of obj visits ('Trues')
}
mid_female_analysis$hallwayseq <- mid_exp_paths %>% filter(sex=="Female") %>% .[,c("hallwayseq")]
mid_male_analysis$hallwayseq <- mid_exp_paths %>% filter(sex=="Male") %>% .[,c("hallwayseq")]
#Longest Hallway Sequence
#For loop to identify longest hallway sequence
for (i in 1:nrow(mid_exp_paths)){
z<-strsplit(mid_exp_paths[i,5],split = "")
logical<-as.vector(sapply(z, `%in%`, objects)) #finding if each visited location is an object or not in binary form (true=object, false=hallway)
mid_exp_paths$hallwayseq[i]<-with(rle(logical),max(lengths))#finding longest sequence of hallway visits that is not interrupted by an object visit; note that max seq is bound to be hallway as you can't have long sequences of obj visits ('Trues')
}
mid_female_analysis$hallwayseq <- mid_exp_paths %>% filter(sex=="Female") %>% .[,c("hallwayseq")]
mid_male_analysis$hallwayseq <- mid_exp_paths %>% filter(sex=="Male") %>% .[,c("hallwayseq")]
## young
for (i in 1:nrow(yng_exp_paths)){
z<-strsplit(yng_exp_paths[i,5],split = "")
logical<-as.vector(sapply(z, `%in%`, objects))
yng_exp_paths$hallwayseq[i]<-with(rle(logical),max(lengths))
}
yng_female_analysis$hallwayseq <- yng_exp_paths %>% filter(sex=="Female") %>% .[,c("hallwayseq")]
yng_male_analysis$hallwayseq <- yng_exp_paths %>% filter(sex=="Male") %>% .[,c("hallwayseq")]
shapiro.test(yng_female_analysis$hallwayseq)
shapiro.test(yng_male_analysis$hallwayseq)
shapiro.test(mid_female_analysis$hallwayseq)
shapiro.test(mid_male_analysis$hallwayseq)
#Longest Hallway Sequence
#For loop to identify longest hallway sequence
for (i in 1:nrow(mid_exp_paths)){
z<-strsplit(mid_exp_paths[i,5],split = "")
logical<-as.vector(sapply(z, `%in%`, objects)) #finding if each visited location is an object or not in binary form (true=object, false=hallway)
mid_exp_paths$hallwayseq[i]<-with(rle(logical),max(lengths))#finding longest sequence of hallway visits that is not interrupted by an object visit; note that max seq is bound to be hallway as you can't have long sequences of obj visits ('Trues')
}
mid_female_analysis$hallwayseq <- mid_exp_paths %>% filter(sex=="Female") %>% .[,c("hallwayseq")]
mid_male_analysis$hallwayseq <- mid_exp_paths %>% filter(sex=="Male") %>% .[,c("hallwayseq")]
## young
for (i in 1:nrow(yng_exp_paths)){
z<-strsplit(yng_exp_paths[i,5],split = "")
logical<-as.vector(sapply(z, `%in%`, objects))
yng_exp_paths$hallwayseq[i]<-with(rle(logical),max(lengths))
}
yng_female_analysis$hallwayseq <- yng_exp_paths %>% filter(sex=="Female") %>% .[,c("hallwayseq")]
yng_male_analysis$hallwayseq <- yng_exp_paths %>% filter(sex=="Male") %>% .[,c("hallwayseq")]
shapiro.test(yng_female_analysis$hallwayseq)
shapiro.test(yng_male_analysis$hallwayseq)
shapiro.test(mid_female_analysis$hallwayseq)
shapiro.test(mid_male_analysis$hallwayseq)
longesthall <- rbind(mid_exp_paths,yng_exp_paths) %>% select(subject,sex,age,hallwayseq)
View(longesthall)
longesthall_aov<- aov(formula=hallwayseq ~ sex*age,longesthall)
summary(entropy_aov)
mediation_df <- rbind(mid_female_analysis,mid_male_analysis)
View(mediation_df)
mediation_df <- rbind(mediation_df,yng_female_analysis)
mediation_df <- rbind(mediation_df,yng_male_analysis)
