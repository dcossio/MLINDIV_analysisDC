midlifeDF <- read.csv(paste0(workdir,"Midlife_explorationVars.csv"), header=FALSE)
View(midlife_analysis)
midlifeDF <- read.csv(paste0(workdir,"Midlife_explorationVars.csv"), col.names = TRUE)
midlifeDF <- read.csv(paste0(workdir,"Midlife_explorationVars.csv"), header = TRUE)
midlifeDF %>% filter(sex == "female")
x <- midlifeDF %>% filter(sex == "female")
View(x)
View(midlifeDF)
midlifeDF %>% filter(sex == "Female")
x <- midlifeDF %>% filter(sex == "Female")
View(x)
midlifeDF %>% filter(sex == "Female") %>% shapiro.test(.$TotalObjVisits)
midlifeDF %>% filter(sex == "Female") %>% select(TotalObjVisits)
x <- midlifeDF %>% filter(sex == "Female") %>% select(TotalObjVisits)
View(x)
shapiro.test(x)
class(midlife_analysis$TotalObjVisits)
class(midlifeDF$TotalObjVisits)
class(x)
midlifeDF %>% filter(sex == "Female") %>% select(TotalObjVisits) %>% as.numeric()
midlifeDF %>% filter(sex == "Female") %>% select(TotalObjVisits) %>% as.numeric()
midlifeDF %>% filter(sex == "Female") %>% select(TotalObjVisits) %>% as.numeric()
midlifeDF %>% filter(sex == "Female") %>% [,TotalObjVisits]
x <- midlifeDF %>% filter(sex == "Female") %>% .$TotalObjVisits
x
midlifeDF %>% filter(sex == "Female") %>% .$TotalObjVisits %>% shapiro.test()
print(midlifeDF %>% filter(sex == "Female") %>% .$TotalObjVisits %>% shapiro.test())
# Data distribution and nromality
fem_mid_objs <- midlifeDF %>% filter(sex == "Female") %>% .$TotalObjVisits %>% shapiro.test()
View(fem_mid_objs)
as.table(fem_mid_objs)
summary(fem_mid_objs)
summarise(fem_mid_objs)
clean(fem_mid_objs)
summary(fem_mid_objs)
View(fem_mid_objs)
View(fem_mid_objs)
fem_mid_objs[["method"]]
df <- as.data.frame(fem_mid_objs[["method"]])
View(df)
df <- as.data.frame(fem_mid_objs[["method"]],fem_mid_objs[["statistic", fem_mid_objs[["p.value"]]]])
df <- data.frame(fem_mid_objs[["method"]],fem_mid_objs[["statistic", fem_mid_objs[["p.value"]]]])
df <- data.frame(fem_mid_objs[["method"]],fem_mid_objs[["statistic"]], fem_mid_objs[["p.value"]])
View(df)
fem_mid_objs[["p.value","method"]]
fem_mid_objs["p.value","method"]
fem_mid_objs[C("p.value","method")]
fem_mid_objs[c("p.value","method")]
data.frame(fem_mid_objs[c("p.value","method")])
as.data.frame(fem_mid_objs[c("p.value","method")])
fem_mid_objs <- midlifeDF %>% filter(sex == "Female") %>% .$TotalObjVisits %>% shapiro.test()
fem_mid_objs <- midlifeDF %>% filter(sex == "Female") %>% .$TotalObjVisits %>% shapiro.test() %>% [c("p.value","method", "statistic")]
fem_mid_objs <- midlifeDF %>% filter(sex == "Female") %>% .$TotalObjVisits %>% shapiro.test() %>% .[c("p.value","method", "statistic")]
View(fem_mid_objs)
fem_mid_objs <- midlifeDF %>% filter(sex == "Female") %>% .$TotalObjVisits %>% shapiro.test() %>% .[c("p.value","method", "statistic")] %>% as.data.frame()
View(fem_mid_objs)
Norm1 <- midlifeDF %>% filter(sex == "Female") %>% .$TotalObjVisits %>% shapiro.test() %>% .[c("p.value","method", "statistic")] %>% as.data.frame() %>% mutate(group = midlife_female)
Norm1 <- midlifeDF %>% filter(sex == "Female") %>% .$TotalObjVisits %>% shapiro.test() %>% .[c("p.value","method", "statistic")] %>% as.data.frame() %>% mutate(group = midlife_female)
Norm1 <- midlifeDF %>% filter(sex == "Female") %>% .$TotalObjVisits %>% shapiro.test() %>% .[c("p.value","method", "statistic")] %>% as.data.frame() %>% mutate(group = "midlife_female")
norm2 <- midlifeDF %>% filter(sex == "Male") %>% .$TotalObjVisits %>% shapiro.test() %>% .[c("p.value","method", "statistic")] %>% as.data.frame() %>% mutate(group = "midlife_male")
View(norm2)
norm1 <- midlifeDF %>% filter(sex == "Female") %>% .$TotalObjVisits %>% shapiro.test() %>% .[c("p.value","method", "statistic")] %>% as.data.frame() %>% mutate(group = "midlife_female")
normality_ObjVisits <- rbind(norm1,norm2)
normality_ObjVisits <- rbind(norm1,norm2,norm3, norm4)
norm3 <- youngDF %>% filter(sex == "Male") %>% .$TotalObjVisits %>% shapiro.test() %>% .[c("p.value","method", "statistic")] %>% as.data.frame() %>% mutate(group = "young_male")
norm4 <- youngDF %>% filter(sex == "Female") %>% .$TotalObjVisits %>% shapiro.test() %>% .[c("p.value","method", "statistic")] %>% as.data.frame() %>% mutate(group = "young_female")
normality_ObjVisits <- rbind(norm1,norm2,norm3, norm4)
View(normality_ObjVisits)
youngDF %>% filter(sex == "Male")
View(norm3)
norm3 <- youngDF %>% filter(sex == "Male") %>% .$TotalObjVisits %>% shapiro.test()
View(Norm1)
View(norm4)
View(youngDF)
View(yng_master_participant)
View(young_analysis)
View(youngDF)
write.csv(midlife_analysis, paste0(workdir,"Midlife_explorationVars.csv"))
write.csv(young_analysis, paste0(workdir,"young_explorationVars.csv"))
# for some reaons there's a new column. Just ignore X
midlifeDF <- read.csv(paste0(workdir,"Midlife_explorationVars.csv"))
youngDF <- read.csv(paste0(workdir,"young_explorationVars.csv"))
# Data distribution and normality
norm1 <- midlifeDF %>% filter(sex == "Female") %>% .$TotalObjVisits %>% shapiro.test() %>% .[c("p.value","method", "statistic")] %>% as.data.frame() %>% mutate(group = "midlife_female")
norm2 <- midlifeDF %>% filter(sex == "Male") %>% .$TotalObjVisits %>% shapiro.test() %>% .[c("p.value","method", "statistic")] %>% as.data.frame() %>% mutate(group = "midlife_male")
norm3 <- youngDF %>% filter(sex == "Male") %>% .$TotalObjVisits %>% shapiro.test() %>% .[c("p.value","method", "statistic")] %>% as.data.frame() %>% mutate(group = "young_male")
norm3 <- youngDF %>% filter(sex == "Male") %>% .$TotalObjVisits
View(youngDF)
# Getting list ouptut into a nice table
TableOutput <- function(YoungMale,YoungFemale,MidlifeMale,MidlifeFemale){
df <- as.data.frame(c("Group", "method","pval")
YoungMale[["method"]])
Obj_aov <- aov(formula=TotalObjVisits ~ sex * age ,ObjVisits)
masterDF <- rbind(midlifeDF,youngDF)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
#(plyr)
library(tidyverse)
library(dplyr)
# library(tidyr)
library(stringr)
# library(data.table)
# library(network)
# library(tidygraph)
# library(ggraph)
# library(igraph)
# library(networkD3)
# library(CINNA)
# library(umap)
# library(plotly)
library(factoextra)
library(lsr)
# library(car)
library(ggpubr)
library(entropy)
#library(ds4psy)
# library(pROC)
library(devtools)
library(stats)
library(afex)
#library(mediation) not install on laptop
library(plotrix)
library(ggpubr)
#library(afex)
library(knitr)
library(janitor)
library(car)
library(ggiraph)
library(ggiraphExtra)
library(moonBook)
library(nationalparkcolors)
library(gridExtra)
library(markdown)
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
workdir<- "/Users/danielacossio/Desktop/SNAG_Exploration_sexdiff/"
setwd(workdir)
# # Getting list ouptut into a nice table
# TableOutput <- function(YoungMale,YoungFemale,MidlifeMale,MidlifeFemale){
#
#   df <- as.data.frame(c("Group", "method","pval")
#
#     YoungMale[["method"]])
#
#   testoutput[["statistic"]]
#   # have shiny output
#   table <- knitr::kable(var1, row.names=F)%>%
#   kable_styling(bootstrap_options =  c("striped", "hover", "condensed")) %>%
#   scroll_box(width = "800px", height = "400px")
#   #print
#   pdf_name <- deparse(substitute(var1)) %>% paste0("_",metric,".pdf")
#   pdf(pdf_name, width=15, height=12)
#   grid.table(var1,rows = NULL)
#   dev.off()
#   return(table)
# }
#infosheet with age/sex
subjInfo<-read.csv (paste0(workdir,"MAZE_data_old.csv"))  %>% dplyr::select(Subject.ID,Sex,Age.Spatial..years.,) %>% `colnames<-` (c("Subject","sex","age")) %>% arrange(.$Subject)
#preprocessed trial data
midlife_trial<-read.csv (paste0(workdir,"Midlife_trial_master.csv")) %>% filter(Subject %in% c(as.character(subjInfo$Subject)))
#preprocessed participant data
midlife_participant<-read.csv (paste0(workdir,"Midlife_participant_master.csv")) %>%  filter(Subject %in% c(as.character(subjInfo$Subject)))
# # Combining sex and age columns to trial and participant sheet
# mid_master_trial <- inner_join(subjInfo, midlife_trial, by="Subject")
# mid_master_trial$agegroup <- as.factor("midlife")
# mid_master_trial$sex <- as.factor(mid_master_trial$sex)
mid_master_trial <- midlife_trial
mid_master_participant <- inner_join(subjInfo, midlife_participant, by="Subject")
mid_master_participant$agegroup <- as.factor("midlife")
mid_master_participant$sex <- as.factor(mid_master_participant$sex)
#repeating what i did for midlife to the young group.
yngsubjInfo<-read.csv(paste0(workdir,"young_snag_participantinfo.csv"))  %>% dplyr::select(subject_id,sex,age_spatial_years) %>% `colnames<-` (c("Subject","sex","age"))
yngtrialDF<-read.csv (paste0(workdir,"Young_trial_master.csv")) %>% filter(Subject %in% c(as.character(yngsubjInfo$Subject)))
yngparticipantDF <-read.csv(paste0(workdir,"Young_participant_master.csv")) %>% filter(Subject %in% c(as.character(yngsubjInfo$Subject)))
# yng_master_trial <- inner_join(yngsubjInfo, yngtrialDF, by="Subject")
# yng_master_trial$age <- as.factor("young")
# yng_master_trial$sex <- as.factor(yng_master_trial$sex)
yng_master_trial <- yngtrialDF
yng_master_participant <- inner_join(yngsubjInfo, yngparticipantDF, by="Subject")
yng_master_participant$age <-as.factor("young")
yng_master_participant$sex <-as.factor(yng_master_participant$sex)
locs <- c('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', "Y", "Z")
objs_orientations<- c('A4', 'I2', 'K4', 'L2', 'N3', 'O2', 'P2', 'Y2', 'W4')
objects<-c('A', 'I', 'K', 'L', 'N', 'O', 'P', 'Y', 'W')
hallways <- c('B', 'C', 'D', 'E', 'F', 'G', 'H', 'J', 'M', 'Q', 'R', 'S', 'T', 'U', "V", 'X', "Z")
#A=guitar
#I=snowman
#L=spaceship
#K=lamp post
#N=chicken
#O=trophy
#P=chair
#Y=umbrella
#W=cuckoo clock
#ttest output colnames for data later
#colttest <-  c("estimate","statistic", "p.value", "parameter"," conf.low"," conf.high"," method","alternative")
midlife_analysis<-mid_master_participant %>% dplyr::select(Subject,sex,age) %>% as.data.frame() %>% mutate(agegroup = as.factor("midlife"))     #creating master analysis data-frame to store all final exploration variable outputs into
young_analysis<-yng_master_participant %>% dplyr::select(Subject,sex,age) %>% as.data.frame()    %>% mutate(agegroup = as.factor("young"))    #creating master analysis data-frame to store all final exploration variable outputs into
mid_explore_trials <- mid_master_trial %>% filter(is.na(accuracy) == TRUE)
#creating empty dataframe to store contents of for loop into
mid_explore_df<- data.frame(matrix(nrow = nrow(mid_explore_trials)))
for (i in 1:nrow(mid_explore_trials)){
e_string_orient<-as.list(strsplit(mid_explore_trials$e_paths[i],split=" "))
e_string<-as.list(strsplit(mid_explore_trials$paths[i],split=" "))
F3_index<-which(sapply(e_string_orient[[1]], FUN=function(X) "F3" %in% X))+1
e_string[[1]][F3_index]<-"N" #replacing with N
V2_index<-which(sapply(e_string_orient[[1]], FUN=function(X) "V2" %in% X))+1
e_string[[1]][V2_index]<-"Y" #replacing with Y
e_string<-paste(e_string[[1]], collapse = " ")
mid_explore_df[i,1]<-e_string
}
mid_explore_df$Subject<-mid_explore_trials$Subject
mid_explore_df <- mid_explore_df %>% rename(paths = matrix.nrow...nrow.mid_explore_trials..)
mid_big_explore<-as.data.frame(str_split_fixed(mid_explore_df$paths," ",nrow(mid_explore_df)))
mid_big_explore <- mid_big_explore %>% mutate(subject = mid_explore_df$Subject)
mid_big_explore <-mid_big_explore[,c(ncol(mid_big_explore), 1:(ncol(mid_big_explore)-1))]
row_labels<-c(1:nrow(mid_big_explore))
mid_big_explore<- split( mid_big_explore , f = row_labels)
#for loop to find consecutive location repeats, and remove them
for (i in 1:length(mid_big_explore)){
mid_big_explore[[i]]<-t(mid_big_explore[[i]])
mid_big_explore[[i]][mid_big_explore[[i]] == ""] <- NA
repeat_logical<-t(c(NA, mid_big_explore[[i]]) == c(mid_big_explore[[i]], NA))[1:length(mid_big_explore[[i]])]
repeats<- grep("TRUE",repeat_logical)
mid_big_explore[[i]][repeats,1]<-"repeats"
mid_big_explore[[i]]<-t(mid_big_explore[[i]])
mid_big_explore[[i]]<-as.data.frame(mid_big_explore[[i]])
}
mid_big_explore<-unsplit(mid_big_explore,row_labels)#merging all chunks back into single dataframe
mid_big_explore[is.na(mid_big_explore)]<-"none" #replacing all NAs with string, otherwise for loop below won't work
#for loop to determine location counts
mid_big_explore_counts <- data.frame(matrix(ncol = 0, nrow = nrow(mid_big_explore)))#creating dataframe to store counts into
for (i in locs){
mid_big_explore_counts$subject <- mid_big_explore$subject
d <- as.data.frame(apply(mid_big_explore,1,function(x) sum(x==i))) # not sure what this function is
names(d) <- i
mid_big_explore_counts <- cbind(d, mid_big_explore_counts)
}
#midlife
midlife_obj_visits <- mid_big_explore_counts %>%transmute(subject,A, I, L, K, N, O, P, Y, W)
cols_sum<-c(2:length(midlife_obj_visits))
midlife_obj_visits$total= rowSums(midlife_obj_visits[,cols_sum])
midObj_ave <-aggregate(midlife_obj_visits$total, list(midlife_obj_visits$subject), FUN=mean)
midlife_analysis$TotalObjVisits <- midObj_ave$x
#midlife male
mid_hall_visits <- mid_big_explore_counts %>% transmute(subject,B, C, D, E, `F`,G, H, J, M, Q, R, S, `T`, U, V, X, Z)
cols_sum<-c(2:length(mid_hall_visits))
mid_hall_visits$total<-rowSums(mid_hall_visits[,cols_sum])#finding total hallway counts for each subject for each session
mid_hall_visits_mean<-aggregate(mid_hall_visits$total, list(mid_hall_visits$subject), FUN=mean)
midlife_analysis$TotalHallwayVisits<-mid_hall_visits_mean$x
mid_spreadObjs <-
midlife_obj_visits %>% gather("location", "count", objects) %>%
pivot_wider(
id_cols = c("subject"),
names_from = location,
values_from = count,
values_fn = sum
)
mid_spreadObjs <-
mid_spreadObjs %>% mutate(std = apply(mid_spreadObjs[objects], 1, sd))
mid_flip_objs <-
mid_spreadObjs %>% gather("location", "count", objects) %>% pivot_wider(
id_cols = location,
names_from = subject,
values_from = count,
values_fn = sum
)
mid_TotalVisits <-
as.data.frame(apply(mid_spreadObjs[objects], 2, sum)) %>% mutate(sd = apply(mid_spreadObjs[objects], 2, sd)) %>% mutate(location = mid_flip_objs$location)
midlife_analysis$obj_evenness <- mid_spreadObjs$std
midlife_spreadHalls <-
mid_hall_visits %>% gather("location", "count",hallways) %>%
pivot_wider(
id_cols = c("subject"),
names_from = location,
values_from = count,
values_fn = sum
)
midlife_spreadHalls <-
midlife_spreadHalls %>% mutate(std = apply(midlife_spreadHalls[hallways], 1, sd))
mid_flip_halls <-
midlife_spreadHalls %>% gather("location", "count", hallways) %>% pivot_wider(
id_cols = location,
names_from = subject,
values_from = count,
values_fn = sum
)
mid_totalhallvis <-
as.data.frame(apply(midlife_spreadHalls[hallways], 2, sum)) %>% mutate(sd = apply(midlife_spreadHalls[hallways], 2, sd)) %>% mutate(location = mid_flip_halls$location)
midlife_analysis$HallEvenness <- midlife_spreadHalls$std
mid_button_press_mean<-aggregate(mid_explore_trials$nodesturns_count, list(mid_explore_trials$Subject), FUN=mean) #calculating mean number of button presses
midlife_analysis$ButtonPress<-mid_button_press_mean$x
midlife_analysis$Dist <-
mid_master_participant %>% pull(em_path_dist_trav)
midlife_analysis$speed<-mid_master_participant %>% dplyr::select(em_path_dist_trav) %>% .$em_path_dist_trav/480
#Path Roaming Entropy
mid_exp_paths<-as.data.frame(mid_big_explore$subject) %>% `colnames<-`("subject") #building empty dataframe which we will populate with output from for loop below (part 1)
mid_exp_paths$paths<-rep("TBC",nrow(mid_exp_paths)) #adding TBCs for now, this will be replaced with output from for loop below
#For loop to condense path trajectories from midlife_big_explore into single sequence, and remove "repeats" and "none"
for (i in 1:nrow(mid_big_explore)){
cols<-2:length(mid_big_explore) #indexing columns to condense into single sequence
mid_exp_paths[i,2]<-paste(mid_big_explore[i,cols], collapse = '') #combining all characters into single sequence
mid_exp_paths[i,2]<-gsub('[repeatsnone]', '', mid_exp_paths[i,2])#removing strings "repeats" and "none" from sequence
}
#Combining each subject's exploration trajectories across both sessions into one exploration trajectory
mid_exp_paths<- mid_exp_paths %>% group_by(subject) %>% mutate(newcol=paste(paths, collapse = '')) #combining trajectories for each subject
mid_exp_paths<- mid_exp_paths %>% filter (row_number() %% 2 !=0) #deletes even rows, which are duplicates with regards to combined trajectories
names(mid_exp_paths)[names(mid_exp_paths) == 'newcol'] <- 'CombinedPaths' #renaming column
mid_exp_paths<-as.data.frame(mid_exp_paths) #converting to df so that for loop below works
#For loop to calculate path roaming entropies
for (i in 1:nrow(mid_exp_paths)){
y<-strsplit(mid_exp_paths[i,2],split = "")
y_counts_table<-table(y)
y_counts_vals<-as.numeric(y_counts_table)
y_entropy<-entropy(y_counts_vals,method = c("ML")) #calculate Shannon's Entropy
mid_exp_paths$entropy[i]<-y_entropy
}
midlife_analysis$entropy <- mid_exp_paths %>% .[,c("entropy")]
midlife_analysis$turns <- mid_master_participant %>% pull(em_turns_count)
midlife_analysis$pauses <- mid_master_participant %>% pull(em_average_RT)
yng_explore_trials <- yng_master_trial %>% filter(is.na(accuracy) == TRUE)
yng_explore_df<- data.frame(matrix(nrow = nrow(yng_explore_trials)))
for (i in 1:nrow(yng_explore_trials)){
e_string_orient<-as.list(strsplit(yng_explore_trials$e_paths[i],split=" "))
e_string<-as.list(strsplit(yng_explore_trials$paths[i],split=" "))
F3_index<-which(sapply(e_string_orient[[1]], FUN=function(X) "F3" %in% X))+1
e_string[[1]][F3_index]<-"N" #replacing with N
V2_index<-which(sapply(e_string_orient[[1]], FUN=function(X) "V2" %in% X))+1
e_string[[1]][V2_index]<-"Y" #replacing with Y
e_string<-paste(e_string[[1]], collapse = " ")
yng_explore_df[i,1]<-e_string
}
yng_explore_df$Subject<-yng_explore_trials$Subject
yng_explore_df <- yng_explore_df %>% rename(paths = matrix.nrow...nrow.yng_explore_trials..)
#location visits
yng_big_explore<-as.data.frame(str_split_fixed(yng_explore_df$paths," ",nrow(yng_explore_df)))
yng_big_explore <- yng_big_explore %>% mutate(subject = yng_explore_df$Subject)
yng_big_explore <-yng_big_explore[,c(ncol(yng_big_explore), 1:(ncol(yng_big_explore)-1))]
row_labels<-c(1:nrow(yng_big_explore))
yng_big_explore<- split( yng_big_explore , f = row_labels)
#for loop to find consecutive location repeats, and remove them
for (i in 1:length(yng_big_explore)){
yng_big_explore[[i]]<-t(yng_big_explore[[i]])
yng_big_explore[[i]][yng_big_explore[[i]] == ""] <- NA
repeat_logical<-t(c(NA, yng_big_explore[[i]]) == c(yng_big_explore[[i]], NA))[1:length(yng_big_explore[[i]])]
repeats<- grep("TRUE",repeat_logical)
yng_big_explore[[i]][repeats,1]<-"repeats"
yng_big_explore[[i]]<-t(yng_big_explore[[i]])
yng_big_explore[[i]]<-as.data.frame(yng_big_explore[[i]])
}
yng_big_explore<-unsplit(yng_big_explore,row_labels)#merging all chunks back into single dataframe
yng_big_explore[is.na(yng_big_explore)]<-"none" #replacing all NAs with string, otherwise for loop below won't work
#for loop to determine location counts
yng_big_explore_counts <- data.frame(matrix(ncol = 0, nrow = nrow(yng_big_explore)))#creating dataframe to store counts into
for (i in locs){
yng_big_explore_counts$subject <- yng_big_explore$subject
d <- as.data.frame(apply(yng_big_explore,1,function(x) sum(x==i))) # not sure what this function is
names(d) <- i
yng_big_explore_counts <- cbind(d, yng_big_explore_counts)
}
#Young
young_obj_visits <- yng_big_explore_counts %>%transmute(subject,A, I, L, K, N, O, P, Y, W)
cols_sum<-c(2:length(young_obj_visits))
yng_big_explore_counts$total= rowSums(yng_big_explore_counts[,cols_sum])
yngObj_ave <-aggregate(yng_big_explore_counts$total, list(young_obj_visits$subject), FUN=mean)
young_analysis$TotalObjVisits <- yngObj_ave$x
#Young
yng_hall_visits <- yng_big_explore_counts %>% transmute(subject,B, C, D, E, `F`,G, H, J, M, Q, R, S, `T`, U, V, X, Z)
cols_sum<-c(2:length(yng_hall_visits))
yng_hall_visits$total<-rowSums(yng_hall_visits[,cols_sum])#finding total hallway counts for each subject for each session
yng_hall_visits_mean<-aggregate(yng_hall_visits$total, list(yng_hall_visits$subject), FUN=mean)
young_analysis$TotalHallwayVisits<-yng_hall_visits_mean$x
yng_spreadObjs <-
young_obj_visits %>% gather("location", "count", objects) %>%
pivot_wider(
id_cols = c("subject"),
names_from = location,
values_from = count,
values_fn = sum
)
yng_spreadObjs <-
yng_spreadObjs %>% mutate(std = apply(yng_spreadObjs[objects], 1, sd))
yng_flip_objs <-
yng_spreadObjs %>% gather("location", "count", objects) %>% pivot_wider(
id_cols = location,
names_from = subject,
values_from = count,
values_fn = sum
)
yng_TotalVisits <-
as.data.frame(apply(yng_spreadObjs[objects], 2, sum)) %>% mutate(sd = apply(yng_spreadObjs[objects], 2, sd)) %>% mutate(location = yng_flip_objs$location)
young_analysis$obj_evenness <- yng_spreadObjs$std
young_spreadHalls <-
yng_hall_visits %>% gather("location", "count",hallways) %>%
pivot_wider(
id_cols = c("subject"),
names_from = location,
values_from = count,
values_fn = sum
)
young_spreadHalls <-
young_spreadHalls %>% mutate(std = apply(young_spreadHalls[hallways], 1, sd))
yng_flip_halls <-
young_spreadHalls %>% gather("location", "count", hallways) %>% pivot_wider(
id_cols = location,
names_from = subject,
values_from = count,
values_fn = sum
)
yng_totalhallvis <-
as.data.frame(apply(young_spreadHalls[hallways], 2, sum)) %>% mutate(sd = apply(young_spreadHalls[hallways], 2, sd)) %>% mutate(location = yng_flip_halls$location)
young_analysis$HallEvenness <- young_spreadHalls$std
yng_button_press_mean<-aggregate(yng_explore_trials$nodesturns_count, list(yng_explore_trials$Subject), FUN=mean) #calculating mean number of button presses
young_analysis$ButtonPress<-yng_button_press_mean$x
young_analysis$Dist <-
yng_master_participant %>% pull(em_path_dist_trav)
young_analysis$speed<-yng_master_participant %>% dplyr::select(em_path_dist_trav) %>% .$em_path_dist_trav/480
#Path Roaming Entropy
yng_exp_paths<-as.data.frame(yng_big_explore$subject) %>% `colnames<-`("subject") #building empty dataframe which we will populate with output from for loop below (part 1)
yng_exp_paths$paths<-rep("TBC",nrow(yng_exp_paths)) #adding TBCs for now, this will be replaced with output from for loop below
#For loop to condense path trajectories from midlife_big_explore into single sequence, and remove "repeats" and "none"
for (i in 1:nrow(yng_big_explore)){
cols<-2:length(yng_big_explore) #indexing columns to condense into single sequence
yng_exp_paths[i,2]<-paste(yng_big_explore[i,cols], collapse = '') #combining all characters into single sequence
yng_exp_paths[i,2]<-gsub('[repeatsnone]', '', yng_exp_paths[i,2])#removing strings "repeats" and "none" from sequence
}
#Combining each subject's exploration trajectories across both sessions into one exploration trajectory
yng_exp_paths<- yng_exp_paths %>% group_by(subject) %>% mutate(newcol=paste(paths, collapse = '')) #combining trajectories for each subject
yng_exp_paths<- yng_exp_paths %>% filter (row_number() %% 2 !=0) #deletes even rows, which are duplicates with regards to combined trajectories
names(yng_exp_paths)[names(yng_exp_paths) == 'newcol'] <- 'CombinedPaths' #renaming column
yng_exp_paths<-as.data.frame(yng_exp_paths) #converting to df so that for loop below works
#For loop to calculate path roaming entropies
for (i in 1:nrow(yng_exp_paths)){
y<-strsplit(yng_exp_paths[i,2],split = "")
y_counts_table<-table(y)
y_counts_vals<-as.numeric(y_counts_table)
y_entropy<-entropy(y_counts_vals,method = c("ML")) #calculate Shannon's Entropy
yng_exp_paths$entropy[i]<-y_entropy
}
young_analysis$entropy <- yng_exp_paths %>% .[,c("entropy")]
young_analysis$turns <- yng_master_participant %>% pull(em_turns_count)
young_analysis$pauses <- yng_master_participant %>% pull(em_average_RT)
write.csv(midlife_analysis, paste0(workdir,"Midlife_explorationVars.csv"))
write.csv(young_analysis, paste0(workdir,"young_explorationVars.csv"))
midlifeDF <- read.csv(paste0(workdir,"Midlife_explorationVars.csv"))
youngDF <- read.csv(paste0(workdir,"young_explorationVars.csv"))
masterDF <- rbind(midlifeDF,youngDF)
View(masterDF)
View(masterDF)
Obj_aov <- aov(formula=TotalObjVisits ~ sex * agegroup ,ObjVisits)
Obj_aov <- aov(formula=TotalObjVisits ~ sex * agegroup, masterDF)
summary(Obj_aov)
summary(Obj_aov)
Obj_aov[["p.value"]]
View(Obj_aov)
summary(Obj_aov)
Obj_aov[["qr"]][["tol"]]
Obj_aov[["effects"]]
TukeyHSD(Obj_aov)
library(lsr)
etaSquared(Obj_aov)
summary((yng_male_analysis[,c("TotalObjVisits")])) %>% broom::tidy() %>% mutate(SD= sd(yng_male_analysis[,c("TotalObjVisits")])) %>% mutate(SEM= std.error(yng_male_analysis[,c("TotalObjVisits")])) %>% mutate(Explore_variable = "TotalObjVisits", .before= minimum) %>% mutate(Group = "young male", .before= Explore_variable) %>% mutate(N= nrow(yng_male_analysis), .after=Group)
stats <- summary((youngDF[,c("TotalObjVisits")]))
stats
stats <- midlifeDF %>% filter(sex == "Male") %>% .$TotalObjVisits %>% summary()
stats
stats <- midlifeDF %>% filter(sex == "Male")
summary(stats$TotalObjVisits)
stats <- midlifeDF %>% filter(sex == "Male") %>% summary(.$TotalObjVisits)
stats
#Summary Stats
stats <- midlifeDF %>% filter(sex == "Male") %>% summary(.$TotalObjVisits) %>% broom::tidy()
mid_male <- midlifeDF %>% filter(sex=="Male")
mid_female <- midlifeDF %>% filter(sex=="Female")
yng_male <-youngDF %>% filter(sex=="Male")
yng_female <- youngDF %>% filter(sex=="Female")
stats <- summary(mid_male$TotalObjVisits)%>% broom::tidy()
View(stats)
stats2 <- get_summary_stats(mid_male$TotalObjVisits)
mid_male$TotalObjVisits
stats2 <- get_summary_stats(mid_male)
View(stats2)
stats2 <- get_summary_stats(mid_male) %>% select(n,mean,sd,se)
stats2 <- get_summary_stats(mid_male)
library(kableExtra)
stats2 <- get_summary_stats(mid_male) %>% select(variable,n,mean,sd,se) %>% filter(variable =="x")
stats2 <- get_summary_stats(mid_male) %>% select(variable,n,mean,sd,se) %>% filter(!(variable =="X"))
View(stats2)
View(mid_male)
length(mid_male)
midlife_malestats<- get_summary_stats(mid_male[,6:length(mid_male)]) %>% select(variable,n,mean,sd,se)
View(midlife_malestats)
masterdf %>% ggplot(aes(x=agegroup, y=TotalObjVisits, fill=sex)) +
geom_boxplot()
masterDF %>% ggplot(aes(x=agegroup, y=TotalObjVisits, fill=sex)) +
geom_boxplot()
cbPalette
masterDF %>% ggplot(aes(x=agegroup, y=TotalObjVisits, fill=sex)) +
geom_boxplot() +
scale_fill_manual(values=c("#009E73", "#CC79A7")
masterDF %>% ggplot(aes(x=agegroup, y=TotalObjVisits, fill=sex)) +
geom_boxplot() +
scale_fill_manual(values=c("#009E73", "#CC79A7"))
masterDF %>% ggplot(aes(x=agegroup, y=TotalObjVisits, fill=sex)) +
geom_boxplot() +
scale_fill_manual(values=c("#CC79A7","#009E73"))
Hallway_aov <- aov(formula=TotalHallwayVisits ~ sex * agegroup, masterDF)
summary(Hallway_aov)
Hallway_aov <- aov(formula=TotalHallwayVisits ~ agegroup * sex, masterDF)
summary(Hallway_aov)
Hallway_aov <- aov(formula=TotalHallwayVisits ~ sex * agegroup, masterDF)
summary(Hallway_aov)
etaSquared(Hallway_aov)
