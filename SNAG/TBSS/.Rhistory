for (roi in c(ROIs$V2)){
df <- data.frame(matrix(ncol = 6, nrow = 1))
pcortestresults <-pcor.test(dataframe[[roi]],dataframe[[task]], dataframe[, c(covariates)])
#if (pcortestresults$p.value < 0.05) {
df$X1 <- roi
df[,2:7] <- pcortestresults
#
finalDF <- rbind(finalDF,df)
#}
}
colnames(finalDF) <- c("ROI", colnames(pcortestresults))
return(finalDF)
}
WB_FA_male_maze <- RunningPcorTest(dataframe = male_FA, task ="loop_de_rad3_degree",covariates = c("age_scan_years"))
TableOutput(WB_FA_male_maze, "classic", 400, 200)
WB_FA_female_maze <- RunningPcorTest(dataframe = female_FA, task ="loop_de_rad3_degree",covariates = c("age_scan_years"))
TableOutput(WB_FA_male_maze, "classic", 400, 200)
WB_FA_female_maze <- RunningPcorTest(dataframe = female_FA, task ="loop_de_rad3_degree",covariates = c("age_scan_years"))
TableOutput(WB_FA_male_maze, "none", 400, 200)
WB_FA_male_maze <- RunningPcorTest(dataframe = male_FA, task ="loop_de_rad3_degree",covariates = c("age_scan_years"))
TableOutput(WB_FA_male_maze, "none", 400, 200)
# Lets read in our subject information
top_workdir <-"/Users/danielacossio/Documents/Chrastil_Lab/Projects/SNAG/MIDLIFE_TBSS/"
# laptop path "/Users/danielacossio/Library/CloudStorage/GoogleDrive-dcossio1@uci.edu/Other computers/My iMac/Chrastil_Lab/Projects/SNAG/MIDLIFE_TBSS/"
ROIs <- read.table(paste0(top_workdir,"JHU-WhiteMatter-labels-1mm.txt")) %>% dplyr::select(V2)
sub_info_master <- read.csv(paste0(top_workdir,"subject_info.csv"))
raw_FA <- read.csv(paste0(top_workdir,"JHU-skeletonized-FA.csv"), header=FALSE) %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
raw_MD <- read.csv(paste0(top_workdir,"JHU-skeletonized-MD.csv"))  %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
raw_AD <- read.csv(paste0(top_workdir,"JHU-skeletonized-AD.csv")) %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
raw_RD <- read.csv(paste0(top_workdir,"JHU-skeletonized-RD.csv")) %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
FA <- cbind(sub_info_master,raw_FA)
FA-temp <- FA %>% filter(!is.na(FA[["loop_de_rad3_degree"]]))
FA_temp <- FA %>% filter(!is.na(FA[["loop_de_rad3_degree"]]))
model1 <- lm(loop_de_rad3_degree ~ FA_temp[["Cingulum_(cingulate_gyrus)_R"]] + sex.1 + age_scan_years, data = FA_temp))
model1 <- lm(loop_de_rad3_degree ~ FA_temp[["Cingulum_(cingulate_gyrus)_R"]] + sex.1 + age_scan_years, data = FA_temp)
equation1=function(x){coef(model1)[2]*x+coef(model1)[1]}
equation2=function(x){coef(model1)[2]*x+coef(model1)[1]+coef(model1)[3]}
model1)[2]
model1)[2]
model1[2]
View(model1)
model1[["coefficients"]]
summary(model1)
FA_temp <- FA %>% filter(!is.na(FA[["loop_de_rad3_degree"]]))
model1 <- lm(loop_de_rad3_degree ~ FA_temp[["Cingulum_(cingulate_gyrus)_R"]] + sex.1 + age_scan_years, data = FA_temp)
equation1=function(x){coef(model1)[2]*x+coef(model1)[1]}
equation2=function(x){coef(model1)[2]*x+coef(model1)[1]+coef(model1)[3]}
ggplot(radial,aes(y=FA_temp,x=`Cingulum_(cingulate_gyrus)_R`,color=sex,1))+geom_point()+
stat_function(fun=equation1,geom="line",color=scales::hue_pal()(2)[1])+
stat_function(fun=equation2,geom="line",color=scales::hue_pal()(2)[2])
FA_temp
ggplot(FA_temp,aes(y=loop_de_rad3_degree,x=`Cingulum_(cingulate_gyrus)_R`,color=sex,1))+geom_point()+
stat_function(fun=equation1,geom="line",color=scales::hue_pal()(2)[1])+
stat_function(fun=equation2,geom="line",color=scales::hue_pal()(2)[2])
ggplot(FA_temp,aes(y=loop_de_rad3_degree,x=`Cingulum_(cingulate_gyrus)_R`,color=sex,1))+geom_point()+
stat_smooth(method = "lm")
ggPredict(model1, interactive=TRUE)
model1 <- lm(loop_de_rad3_degree ~ `Cingulum_(cingulate_gyrus)_R` + sex.1 + age_scan_years, data = FA_temp)
ggPredict(model1, interactive=TRUE)
model1 <- lm(loop_de_rad3_degree ~ `Cingulum_(cingulate_gyrus)_R` + sex.1 + age_scan_years, data = FA_temp)
ggPredict(model1, interactive=TRUE)
ggplot(FA_temp,aes(y=loop_de_rad3_degree,x=`Cingulum_(cingulate_gyrus)_R`,color=sex,1))+geom_point()+
stat_smooth(method = "lm")
model1
summary(model1)
FA_temp <- FA %>% filter(!is.na(FA[["loop_de_rad3_degree"]]))
model1 <- lm(loop_de_rad3_degree ~ `Cingulum_(cingulate_gyrus)_R` + sex.1 + age_scan_years, data = FA_temp)
equation1=function(x){coef(model1)[2]*x+coef(model1)[1]}
equation2=function(x){coef(model1)[2]*x+coef(model1)[1]+coef(model1)[3]}
ggplot(FA_temp,aes(y=loop_de_rad3_degree,x=`Cingulum_(cingulate_gyrus)_R`,color=sex,1))+geom_point()+
stat_smooth(method = "lm")
ggPredict(model1, interactive=TRUE)
FA_temp <- FA %>% filter(!is.na(FA[["loop_de_rad3_degree"]]))
model1 <- lm(loop_de_rad3_degree ~ `Cingulum_(cingulate_gyrus)_R` + sex.1 + age_scan_years, data = FA_temp)
equation1=function(x){coef(model1)[2]*x+coef(model1)[1]}
equation2=function(x){coef(model1)[2]*x+coef(model1)[1]+coef(model1)[3]}
ggplot(FA_temp,aes(y=loop_de_rad3_degree,x=`Cingulum_(cingulate_gyrus)_R`,color=sex,1))+geom_point()+
stat_smooth(method = "lm")
model1 <- lm(loop_de_rad3_degree ~ `Cingulum_(cingulate_gyrus)_L` + age_scan_years, data = male_apriori_FA)
summary(model1)
model1 <- lm(loop_de_rad3_degree ~ `Cingulum_(cingulate_gyrus)_L` + age_scan_years, data = female_apriori_FA)
summary(model1)
ggplot(FA_temp,aes(y=loop_de_rad3_degree,x=`Cingulum_(cingulate_gyrus)_R`,color=sex,1))+geom_point()+
geom_smooth(formula = y ~ x, method = "lm")+
labs(x= "Quantitative Anisotropy", y= "Proportion of correct trials" ) +
theme(legend.position = "none") +
stat_cor(method = "spearman", label.x.npc = 0.70, label.y.npc = 1) +
stat_regline_equation(label.y = 0.95, label.x = 6e-05, aes(label = ..rr.label..)) +
xlim(min(newDF$V2), max(newDF$V2)) +
font("xlab", size=30)+
font("ylab", size=30)
ggplot(FA_temp,aes(y=loop_de_rad3_degree,x=`Cingulum_(cingulate_gyrus)_R`,color=sex,1))+geom_point()+
geom_smooth(formula = y ~ x, method = "lm")+
labs(x= "Quantitative Anisotropy", y= "Proportion of correct trials" ) +
theme(legend.position = "none") +
stat_cor(method = "spearman", label.x.npc = 0.70, label.y.npc = 1) +
stat_regline_equation(label.y = 0.95, label.x = 6e-05, aes(label = ..rr.label..)) +
font("xlab", size=30)+
font("ylab", size=30)
ggplot(FA_temp,aes(y=loop_de_rad3_degree,x=`Cingulum_(cingulate_gyrus)_R`,color=sex,1))+geom_point()+
geom_smooth(formula = y ~ x, method = "lm")+
labs(x= "Quantitative Anisotropy", y= "Proportion of correct trials" ) +
theme(legend.position = "none")
ggplot(FA_temp,aes(y=loop_de_rad3_degree,x=`Cingulum_(cingulate_gyrus)_R`,color=sex,1))+geom_point()+
geom_smooth(formula = y ~ x, method = "lm")+
labs(x= "Quantitative Anisotropy", y= "Proportion of correct trials" ) +
theme(legend.position = "none") +
stat_cor(method = "spearman", label.x.npc = 0.70, label.y.npc = 1)
ggplot(FA_temp,aes(y=loop_de_rad3_degree,x=`Cingulum_(cingulate_gyrus)_R`,color=sex,1))+geom_point()+
geom_smooth(formula = y ~ x, method = "lm")+
labs(x= "Quantitative Anisotropy", y= "Proportion of correct trials" ) +
theme(legend.position = "none") +
stat_cor(method = "spearman", label.x.npc = 0.70, label.y.npc = 1) +
stat_regline_equation(label.y = 0.95, label.x = 6e-05, aes(label = ..rr.label..))
ggplot(FA_temp,aes(y=loop_de_rad3_degree,x=`Cingulum_(cingulate_gyrus)_R`,color=sex,1))+geom_point()+
geom_smooth(formula = y ~ x, method = "lm")+
labs(x= "Quantitative Anisotropy", y= "Proportion of correct trials" ) +
theme(legend.position = "none") +
stat_cor(method = "spearman", label.x.npc = 0.70, label.y.npc = 1) +
stat_regline_equation( aes(label = ..rr.label..))
resid1 <- lm(loop_de_rad3_degree ~   `Cingulum_(cingulate_gyrus)_L`+ sex.1 +age_scan_years, data = female_apriori_FA)
View(resid1)
resid1 <- resid(lm(loop_de_rad3_degree ~   `Cingulum_(cingulate_gyrus)_L`+ sex.1 +age_scan_years, data = female_apriori_FA))
plot(FA_temp$loop_de_rad3_degree, resid1)
length(resid1)
length(FA_temp)
plot(female_apriori_FA$loop_de_rad3_degree, resid1)
fem_FA_temp <- FA %>% filter(!is.na(FA[["loop_de_rad3_degree"]])) %>% filter(sex == "Female")
resid1 <- resid(lm(loop_de_rad3_degree ~   `Cingulum_(cingulate_gyrus)_L`+ sex.1 +age_scan_years, data = fem_FA_temp))
plot(fem_FA_temp$loop_de_rad3_degree, resid1)
plot(FA_temp$loop_de_rad3_degree, resid2)
resid2 <- resid(lm(loop_de_rad3_degree ~   `Cingulum_(cingulate_gyrus)_L`+ sex.1 +age_scan_years, data = FA_temp))
plot(FA_temp$loop_de_rad3_degree, resid2)
plot(lm(loop_de_rad3_degree ~   `Cingulum_(cingulate_gyrus)_L`+ sex.1 +age_scan_years, data = FA_temp))
plot(lm(loop_de_rad3_degree ~   `Cingulum_(cingulate_gyrus)_L` +age_scan_years, data = fem_FA_temp))
ggplot(FA_temp,
aes(x = `Cingulum_(cingulate_gyrus)_R`,
y = loop_de_rad3_degree,
color = sex)) +
geom_point(aes(color=sex)) +
geom_smooth(method = "lm",
mapping = aes(y = predict(resid1, FA_temp)))
resid1 <- lm(loop_de_rad3_degree ~   `Cingulum_(cingulate_gyrus)_L`+ sex.1 +age_scan_years, data = fem_FA_temp)
ggplot(FA_temp,
aes(x = `Cingulum_(cingulate_gyrus)_R`,
y = loop_de_rad3_degree,
color = sex)) +
geom_point(aes(color=sex)) +
geom_smooth(method = "lm",
mapping = aes(y = predict(resid1, FA_temp)))
resid1 <- lm(loop_de_rad3_degree ~   `Cingulum_(cingulate_gyrus)_L`+age_scan_years, data = fem_FA_temp)
ggplot(FA_temp,
aes(x = `Cingulum_(cingulate_gyrus)_R`,
y = loop_de_rad3_degree,
color = sex)) +
geom_point(aes(color=sex)) +
geom_smooth(method = "lm",
mapping = aes(y = predict(resid1, FA_temp)))
resid1 <- lm(loop_de_rad3_degree ~   `Cingulum_(cingulate_gyrus)_L`, data = fem_FA_temp)
ggplot(FA_temp,
aes(x = `Cingulum_(cingulate_gyrus)_R`,
y = loop_de_rad3_degree,
color = sex)) +
geom_point(aes(color=sex)) +
geom_smooth(method = "lm",
mapping = aes(y = predict(resid1, FA_temp)))
model1 <- lm(loop_de_rad3_degree ~   `Cingulum_(cingulate_gyrus)_L`+ sex.1 +age_scan_years, data = FA_temp)
ggplot(FA_temp,
aes(x = `Cingulum_(cingulate_gyrus)_R`,
y = loop_de_rad3_degree,
color = sex)) +
geom_point(aes(color=sex)) +
geom_smooth(method = "lm",
mapping = aes(y = predict(model1, FA_temp)))
model1 <- lm(loop_de_rad3_degree ~   `Cingulum_(cingulate_gyrus)_L`+ sex.1 +age_scan_years, data = FA_temp)
ggplot(FA_temp,
aes(x = `Cingulum_(cingulate_gyrus)_L`,
y = loop_de_rad3_degree,
color = sex)) +
geom_point(aes(color=sex)) +
geom_smooth(method = "lm",
mapping = aes(y = predict(model1, FA_temp)))
plot(lm(loop_de_rad3_degree ~   `Cingulum_(cingulate_gyrus)_L` + age_scan_years, data = fem_FA_temp))
model1 <- lm(loop_de_rad3_degree ~   `Cingulum_(cingulate_gyrus)_L`+ sex.1 +age_scan_years, data = FA_temp)
ggplot(FA_temp,
aes(x = `Cingulum_(cingulate_gyrus)_L`,
y = loop_de_rad3_degree)) +
geom_point() +
geom_smooth(method = "lm",
mapping = aes(y = predict(model1, FA_temp)))
model1 <- lm(loop_de_rad3_degree ~`Fornix_(column_and_body_of_fornix)`+ sex.1 +age_scan_years, data = FA_temp)
ggplot(FA_temp,
aes(x = `Fornix_(column_and_body_of_fornix)`,
y = loop_de_rad3_degree)) +
geom_point() +
geom_smooth(method = "lm",
mapping = aes(y = predict(model1, FA_temp)))
model1 <- lm(loop_de_rad3_degree ~`Fornix_(column_and_body_of_fornix)`+ sex.1 +age_scan_years, data = FA_temp)
ggplot(FA_temp,
aes(x = `Fornix_(column_and_body_of_fornix)`,
y = loop_de_rad3_degree)) +
geom_point() +
geom_smooth(method = "lm",
mapping = aes(y = predict(model1, FA_temp))) +
stat_cor(method = "spearman", label.x.npc = 0.70, label.y.npc = 1)
# Developmental version
devtools::install_github("johannesbjork/LaCroixColoR")
# Developmental version
devtools::install_github("m-clark/NineteenEightyR")
library(NineteenEightyR)
NineteenEightyR
install.packages("paletteer")
park_palette(NineteenEightyR)
paletteer::palettes_c_names
paletteer::palettes_c_names$palette
paletteer::palettes_c_names$package
paletteer::paletteer_packages
paletteer::paletteer_packages$Name
paletteer::paletteer_c(package = "NineteenEightyR")
paletteer::paletteer_c(package = "NineteenEightyR::hotpink")
paletteer_c(package = "NineteenEightyR::hotpink")
library(paletteer)
paletteer_c(package = "NineteenEightyR::hotpink")
paletteer_c(package = "NineteenEightyR::hotpink")z <-
z <- paletteer_c(package = "NineteenEightyR::hotpink")
paletteer_c("nord::frost")
library(paletteer)
paletteer_c()
paletteer_d(`"NineteenEightyR::malibu"`)
paletteer_d(`"NineteenEightyR::hotpink"`)
paletteer_c(`"gameofthrones::targaryen2"`)
paletteer_c(`"harrypotter::lunalovegood"`)
library(ggplot2)
#(plyr)
library(tidyverse)
# library(dplyr)
# library(tidyr)
library(stringr)
library(kableExtra)
# library(data.table)
# library(network)
# library(tidygraph)
# library(ggraph)
# library(igraph)
# library(networkD3)
# library(CINNA)
# library(umap)
# library(plotly)
#library(factoextra)
#library(lsr)
# library(car)
library(ggpubr)
#library(entropy)
#library(ds4psy)
# library(pROC)
#library(devtools)
#library(BRRR)
#library(stats)
#library(afex)
library(knitr)
library(janitor)
library(car)
library(ggiraph)
library(ggiraphExtra)
library(moonBook)
library(nationalparkcolors)
library(gridExtra)
library(markdown)
library(ppcor)
library(mediation)
CheckDistribution <- function(dataframe,threshold){
# Purpose of this is to take in a tbss csv dataframe and checking the distribution of each ROI. Then it spits out all the regions that are not normally distributed.
normality_check<- data.frame(matrix(ncol = 2, nrow = 0))
for (roi in c(ROIs$V2)){
df <- data.frame(matrix(ncol = 2, nrow = 1))
normcheck <- shapiro.test(dataframe[[roi]])
if (normcheck[["p.value"]] < threshold) {
df$X1 <- roi
df$X2 <- normcheck[["p.value"]]
#
normality_check <- rbind(normality_check,df)
}
}
colnames(normality_check) <- c("ROI","p.value")
return(normality_check)
}
# Craeting tables for html
TableOutput <- function(df, style, width, height){
if (style == "classic"){
knitr::kable(df, row.names=F) %>% kable_classic(full_width = F, html_font = "Cambria")
} else {
knitr::kable(df, row.names=F) %>% kable_styling(bootstrap_options =  c("striped", "hover", "condensed")) %>% scroll_box(width = paste0(width,"px"), height = paste0(height,"px"))
}
}
RunningPcorTest <- function(dataframe, task, covariates){
# Here we need a clean dataframe that contains only on wm metric (FA,AD,RD, MD) and it needs to be combined with the subject info data that we need. here i need maze accuracy, sex, and age. Also, need to remove any rows with NW
dataframe <-dataframe %>% filter(!is.na(dataframe[[task]]))
ROIs <- ROIs %>% filter(!V2 %in% c(ROIs2Ignore))
finalDF <-   data.frame(matrix(ncol = 7, nrow = 0))
for (roi in c(ROIs$V2)){
df <- data.frame(matrix(ncol = 6, nrow = 1))
pcortestresults <-pcor.test(dataframe[[roi]],dataframe[[task]], dataframe[, c(covariates)])
#if (pcortestresults$p.value < 0.05) {
df$X1 <- roi
df[,2:7] <- pcortestresults
#
finalDF <- rbind(finalDF,df)
#}
}
colnames(finalDF) <- c("ROI", colnames(pcortestresults))
return(finalDF)
}
AprioriPcorTest <-  function(dataframe,task, covariates){
# Here we have our list of ROIS
list_rois <- c("fornix_body", "fornix_R", "fornix_L","Cingulum_(cingulate_gyrus)_R","Cingulum_(cingulate_gyrus)_L","Cingulum_(hippocampus)_R", "Cingulum_(hippocampus)_L")
DF <-dataframe %>% filter(!is.na(dataframe[[task]]))
finalDF <- data.frame(matrix(ncol = 7, nrow = 0))
for (roi in c(list_rois)){
df <- data.frame(matrix(ncol = 6, nrow = 1))
pcortestresults <- pcor.test(DF[[roi]],DF[[task]],DF[, c(covariates)],method = "spearman")
#
df$X1 <- roi
df[,2:7] <- pcortestresults
#   #
finalDF <- rbind(finalDF,df)
#
}
colnames(finalDF) <- c("ROI", colnames(pcortestresults))
return(finalDF)
}
GetAprioriDF <- function(dataframe){
# List of a prior rois
apriori_ROIS <- c("Fornix_(column_and_body_of_fornix)","Fornix_(cres)_/_Stria_terminalis_(can_not_be_resolved_with_current_resolution)_R","Fornix_(cres)_/_Stria_terminalis_(can_not_be_resolved_with_current_resolution)_L", "Cingulum_(cingulate_gyrus)_R","Cingulum_(cingulate_gyrus)_L","Cingulum_(hippocampus)_R", "Cingulum_(hippocampus)_L")
# clean up the names
df <- dataframe %>% dplyr::select(. ,apriori_ROIS) %>% `colnames<-`(c("fornix_body", "fornix_R", "fornix_L","Cingulum_(cingulate_gyrus)_R","Cingulum_(cingulate_gyrus)_L","Cingulum_(hippocampus)_R", "Cingulum_(hippocampus)_L"))
return(df)
}
WholeBrainReg <- function(DF,task){
DF <-DF %>% filter(!is.na(DF[[task]]))
finalDF <- vector(mode='list', length=nrow(OtherROIS))
for (roi in 1:nrow(OtherROIS)){
finalDF[[roi]] <- broom::tidy(lm(DF[[task]] ~ DF[[OtherROIS[roi,]]] + sex.1 + age_scan_years, data = DF))
names(finalDF)[roi] <- OtherROIS[roi,]
finalDF[[roi]]["term"][2,] <- OtherROIS[roi,]
finalDF[[roi]]["term"][3,] <- "sex"
finalDF[[roi]]["term"][4,] <- "age"
}
return(finalDF)
}
ExtractSigROIs <- function(DF,pval){
#The list from the wholebrainreg function eneds to be input in this. Set p-val
ROIs2Check <- c()
index <- 0
for (roi in names(DF)){
modelsummary <- as.data.frame(DF[[roi]])
modelsummary <- filter(modelsummary, !(term == "(Intercept)"))
y <- sum(modelsummary$p.value < pval)
if (y > 0){
ROIs2Check[length(ROIs2Check)+ 1] <- roi
}
}
return(ROIs2Check)
}
# Lets read in our subject information
top_workdir <-"/Users/danielacossio/Documents/Chrastil_Lab/Projects/SNAG/MIDLIFE_TBSS/"
# laptop path "/Users/danielacossio/Library/CloudStorage/GoogleDrive-dcossio1@uci.edu/Other computers/My iMac/Chrastil_Lab/Projects/SNAG/MIDLIFE_TBSS/"
ROIs <- read.table(paste0(top_workdir,"JHU-WhiteMatter-labels-1mm.txt")) %>% dplyr::select(V2)
sub_info_master <- read.csv(paste0(top_workdir,"subject_info.csv"))
raw_FA <- read.csv(paste0(top_workdir,"JHU-skeletonized-FA.csv"), header=FALSE) %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
raw_MD <- read.csv(paste0(top_workdir,"JHU-skeletonized-MD.csv"))  %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
raw_AD <- read.csv(paste0(top_workdir,"JHU-skeletonized-AD.csv")) %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
raw_RD <- read.csv(paste0(top_workdir,"JHU-skeletonized-RD.csv")) %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
ggplot(FA_temp,aes(y=loop_de_rad3_degree,x=`Cingulum_(cingulate_gyrus)_L`,color=sex,1))+geom_point()
FA_temp <- FA %>% filter(!is.na(FA[["loop_de_rad3_degree"]]))
# Lets read in our subject information
top_workdir <-"/Users/danielacossio/Documents/Chrastil_Lab/Projects/SNAG/MIDLIFE_TBSS/"
# laptop path "/Users/danielacossio/Library/CloudStorage/GoogleDrive-dcossio1@uci.edu/Other computers/My iMac/Chrastil_Lab/Projects/SNAG/MIDLIFE_TBSS/"
ROIs <- read.table(paste0(top_workdir,"JHU-WhiteMatter-labels-1mm.txt")) %>% dplyr::select(V2)
sub_info_master <- read.csv(paste0(top_workdir,"subject_info.csv"))
raw_FA <- read.csv(paste0(top_workdir,"JHU-skeletonized-FA.csv"), header=FALSE) %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
raw_MD <- read.csv(paste0(top_workdir,"JHU-skeletonized-MD.csv"))  %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
raw_AD <- read.csv(paste0(top_workdir,"JHU-skeletonized-AD.csv")) %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
raw_RD <- read.csv(paste0(top_workdir,"JHU-skeletonized-RD.csv")) %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
FA <- cbind(sub_info_master,raw_FA)
FA_temp <- FA %>% filter(!is.na(FA[["loop_de_rad3_degree"]]))
ggplot(FA_temp,aes(y=loop_de_rad3_degree,x=`Cingulum_(cingulate_gyrus)_L`,color=sex,1))+geom_point()
ggplot(FA_temp,aes(y=loop_de_rad3_degree,x=`Cingulum_(cingulate_gyrus)_L`,color=sex,1))+geom_point()+
geom_smooth(formula = y ~ x, method = "lm")
ggplot(FA_temp,aes(y=loop_de_rad3_degree,x=`Cingulum_(cingulate_gyrus)_L`,color=sex,1))+geom_point()+
geom_smooth(formula = y ~ x, method = "lm")+
labs(x= "Quantitative Anisotropy", y= "Proportion of correct trials" ) +
theme(legend.position = "none") +
stat_cor(method = "spearman", label.x.npc = 0.70, label.y.npc = 1) +
stat_regline_equation( aes(label = ..rr.label..)) +
font("xlab", size=30)+
font("ylab", size=30)
FA_temp <- FA %>% filter(!is.na(FA[["loop_de_avg_degree"]]))
ggplot(FA_temp,aes(y=loop_de_rad3_degree,x=`Cingulum_(cingulate_gyrus)_L`,color=sex,1))+geom_point()+
geom_smooth(formula = y ~ x, method = "lm")+
labs(x= "Quantitative Anisotropy", y= "Proportion of correct trials" ) +
theme(legend.position = "none") +
stat_cor(method = "spearman", label.x.npc = 0.70, label.y.npc = 1) +
stat_regline_equation( aes(label = ..rr.label..)) +
font("xlab", size=30)+
font("ylab", size=30)
FA_temp <- FA %>% filter(!is.na(FA[["loop_de_avg_degree"]]))
ggplot(FA_temp,aes(y=loop_de_avg_degree,x=`Cingulum_(cingulate_gyrus)_L`,color=sex,1))+geom_point()+
geom_smooth(formula = y ~ x, method = "lm")+
labs(x= "Quantitative Anisotropy", y= "Proportion of correct trials" ) +
theme(legend.position = "none") +
stat_cor(method = "spearman", label.x.npc = 0.70, label.y.npc = 1) +
stat_regline_equation( aes(label = ..rr.label..)) +
font("xlab", size=30)+
font("ylab", size=30)
View(raw_MD)
FA_temp <- FA %>% filter(!is.na(FA[["loop_de_avg_degree"]]))
ggplot(FA_temp,aes(y=loop_de_avg_degree,x=`Cingulum_(cingulate_gyrus)_R`,color=sex,1))+geom_point()+
geom_smooth(formula = y ~ x, method = "lm")+
labs(x= "Quantitative Anisotropy", y= "Proportion of correct trials" ) +
theme(legend.position = "none") +
stat_cor(method = "spearman", label.x.npc = 0.70, label.y.npc = 1) +
stat_regline_equation( aes(label = ..rr.label..)) +
font("xlab", size=30)+
font("ylab", size=30)
FA_temp <- FA %>% filter(!is.na(FA[["loop_de_avg_degree"]]))
ggplot(FA_temp,aes(y=loop_de_avg_degree,x=`Cingulum_(cingulate_gyrus)_L`,color=sex,1))+geom_point()+
geom_smooth(formula = y ~ x, method = "lm")+
labs(x= "Quantitative Anisotropy", y= "Proportion of correct trials" ) +
theme(legend.position = "none") +
stat_cor(method = "spearman", label.x.npc = 0.70, label.y.npc = 1) +
stat_regline_equation( aes(label = ..rr.label..)) +
font("xlab", size=30)+
font("ylab", size=30)
FA_temp <- FA %>% filter(!is.na(FA[["loop_de_avg_degree"]]))
ggplot(FA_temp,aes(y=loop_de_avg_degree,x=`Cingulum_(cingulate_gyrus)_L`,color=sex,1))+geom_point()+
geom_smooth(formula = y ~ x, method = "lm")+
labs(x= "Fractional Anisotropy", y= "Average Degrees Traveled" ) +
theme(legend.position = "none") +
stat_cor(method = "spearman", label.x.npc = 0.70, label.y.npc = 1) +
stat_regline_equation( aes(label = ..rr.label..)) +
font("xlab", size=30)+
font("ylab", size=30)
ggplot(FA_temp,aes(y=loop_de_avg_degree,x=`Cingulum_(cingulate_gyrus)_L`,color=sex,1))+geom_point()+
geom_smooth(formula = y ~ x, method = "lm")+
labs(x= "Fractional Anisotropy", y= "Average Degrees Traveled" )
paletteer::paletteer_c(vapoRwave)
paletteer_d(`"rtist::klimt"`)
paleteer::paletteer_d(`"rtist::klimt"`)
library(paletteer)
paleteer::paletteer_d(`"rtist::klimt"`)
paleteer::paletteer_d(`"rtist::klimt"`)
library(mediation)
library(paletteer)
paleteer::paletteer_d(`rtist::klimt`)
paletteer_d(`"nord::silver_mine"`)
paletteer_d(`"NatParksPalettes::Saguaro"`)
paletteer_d(`"`"NatParksPalettes::Yellowstone"`"`)
paletteer_d(`"`"NatParksPalettes::Yellowstone`)
""
paletteer_d(`"`"NatParksPalettes::Yellowstone"`)
paletteer_d(`"NatParksPalettes::Yellowstone"`)
paletteer_d(`"LaCroixColoR::Pamplemousse"`)
paletteer_d(`"LaCroixColoR::MelonPomelo"`)
ggplot(FA_temp,aes(y=loop_de_avg_degree,x=`Cingulum_(cingulate_gyrus)_L`,color=sex,1))+geom_point()+
geom_smooth(formula = y ~ x, method = "lm")+
scale_color_manual(values = c('##4F5791FF','##F9E7C2FF')
)
ggplot(FA_temp,aes(y=loop_de_avg_degree,x=`Cingulum_(cingulate_gyrus)_L`,color=sex,1))+geom_point()+
geom_smooth(formula = y ~ x, method = "lm")+
scale_color_manual(values = c('#4F5791FF','#F9E7C2FF'))
ggplot(FA_temp,aes(y=loop_de_avg_degree,x=`Cingulum_(cingulate_gyrus)_L`,color=sex,1))+geom_point() +
geom_smooth(formula = y ~ x, method = "lm")+
scale_color_manual(values = c('#4F5791FF','#F9E7C2FF'))
ggplot(FA_temp,aes(y=loop_de_avg_degree,x=`Cingulum_(cingulate_gyrus)_L`,color=sex,1))+geom_point() +
geom_smooth(formula = y ~ x, method = "lm")+
scale_color_manual(values = c('#4F5791FF','#F9E7C2FF')) +
theme(
axis.title.x = element_text(vjust = -4, size = 16),
axis.title.y = element_text(vjust = 8, size = 16),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
panel.background = element_blank(),
panel.grid.major = element_blank(),
axis.line = element_line(colour = "black"),
plot.margin = margin(1, 2, 1, 1.5, "cm"),
plot.title = element_text(
hjust = 0.5,
vjust = 2,
size = 16,
face = "bold"
)
)
paletteer_d(`"LaCroixColoR::MelonPomelo"`)
ggplot(FA_temp,aes(y=loop_de_avg_degree,x=`Cingulum_(cingulate_gyrus)_L`,color=sex,1))+geom_point() +
geom_smooth(formula = y ~ x, method = "lm")+
scale_color_manual(values = c('#4F5791FF','#EE404EFF')) +
theme(
axis.title.x = element_text(vjust = -4, size = 16),
axis.title.y = element_text(vjust = 8, size = 16),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
panel.background = element_blank(),
panel.grid.major = element_blank(),
axis.line = element_line(colour = "black"),
plot.margin = margin(1, 2, 1, 1.5, "cm"),
plot.title = element_text(
hjust = 0.5,
vjust = 2,
size = 16,
face = "bold"
)
)
