library(markdown)
library(ppcor)
library(mediation)
CheckDistribution <- function(dataframe,threshold){
normality_check<- data.frame(matrix(ncol = 2, nrow = 0))
for (roi in c(ROIs$V2)){
df <- data.frame(matrix(ncol = 2, nrow = 1))
normcheck <- shapiro.test(dataframe[[roi]])
if (normcheck[["p.value"]] < threshold) {
df$X1 <- roi
df$X2 <- normcheck[["p.value"]]
#
normality_check <- rbind(normality_check,df)
}
}
colnames(normality_check) <- c("ROI","p.value")
return(normality_check)
}
# Craeting tables for html
TableOutput <- function(df){
knitr::kable(df, row.names=F) %>%
kable_styling(bootstrap_options =  c("striped", "hover", "condensed")) %>%
scroll_box(width = "600px", height = "300px")
}
RunningPcorTest <- function(dataframe, task, covariates){
# Here we need a clean dataframe that contains only on wm metric (FA,AD,RD, MD) and it needs to be combined with the subject info data that we need. here i need maze accuracy, sex, and age. Also, need to remove any rows with NW
finalDF <-   data.frame(matrix(ncol = 7, nrow = 0))
for (roi in c(ROIs$V2)){
df <- data.frame(matrix(ncol = 6, nrow = 1))
pcortestresults <-pcor.test(dataframe[[roi]],dataframe[[task]], dataframe[, c(covariates)])
if (pcortestresults$p.value < 0.05) {
df$X1 <- roi
df[,2:7] <- pcortestresults
#
finalDF <- rbind(finalDF,df)
}
}
colnames(finalDF) <- c("ROI", colnames(pcortestresults))
return(finalDF)
}
# Lets read in our subject information
top_workdir <-"/Users/danielacossio/Library/CloudStorage/GoogleDrive-dcossio1@uci.edu/Other computers/My iMac/Chrastil_Lab/Projects/SNAG/MIDLIFE_TBSS/"
ROIs <- read.table(paste0(top_workdir,"JHU-WhiteMatter-labels-1mm.txt")) %>% dplyr::select(V2)
# Lets read in our subject information
top_workdir <-"/Users/danielacossio/Documents/Chrastil_Lab/Projects/SNAG/MIDLIFE_TBSS/"
# laptop path "/Users/danielacossio/Library/CloudStorage/GoogleDrive-dcossio1@uci.edu/Other computers/My iMac/Chrastil_Lab/Projects/SNAG/MIDLIFE_TBSS/"
ROIs <- read.table(paste0(top_workdir,"JHU-WhiteMatter-labels-1mm.txt")) %>% dplyr::select(V2)
sub_info_master <- read.csv(paste0(top_workdir,"subject_info.csv"))
master_FA <- read.csv(paste0(top_workdir,"JHU-skeletonized-FA.csv"), header=FALSE) %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
master_MD <- read.csv(paste0(top_workdir,"JHU-skeletonized-MD.csv"))  %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
master_AD <- read.csv(paste0(top_workdir,"JHU-skeletonized-AD.csv")) %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
master_RD <- read.csv(paste0(top_workdir,"JHU-skeletonized-RD.csv")) %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
View(master_FA)
FA_df <- cbind(sub_info_master, master_FA)
View(FA_df)
rois <- colnames(master_FA)
for (roi in rois){
hist(FA_df[roi])
}
FA_df[roi]
FA_df[1]
for (roi in 1:length(rois)){
plots <- list()
p[[roi]] <- hist(FA_df[rois[roi]])
}
FA_df[rois[roi]]
plots <- list()
for (roi in 1:length(rois)){
plots[[roi]] <- hist(FA_df[rois[roi]])
}
do.call(grid.arrange,plots)
do.call(grid.arrange,grobs=plots)
do.call(grid.arrange(grobs=plots))
grid.arrange(grobs=plots)
grid.arrange(arrangeGrob(plots, main="title"))
plots
View(plots)
plots[[1]]
hist(plots[[1]])
hist(plots[1])
hist(plots)
View(plots)
plots[[1]]
FA_df[rois]
do.call(
grid.arrange,
lapply(FA_df[rois], function(f){
ggplot(f, ...)
})
)
do.call(grid.arrange,lapply(FA_df[rois], function(f){ ggplot(f, ...) }))
do.call(grid.arrange,lapply(FA_df[rois], function(f){ ggplot(f) }))
do.call(grid.arrange,lapply(FA_df[rois], function(f){ hist(f) }))
for (roi in rois){
hist(FA_df[rois])
}
FA_df <- cbind(sub_info_master, master_FA)
# Let's plot a visualization of all of our ROIs
rois <- colnames(master_FA)
for (roi in rois){
hist(FA_df[roi])
}
View(FA_df)
# Let's plot a visualization of all of our ROIs
rois <- colnames(master_FA)
for (roi in rois){
ggplot(FA_df, aes(x= age_scan_years, y=FA_df[roi])) + geom_point()
}
ggplot(FA_df, aes(x= age_scan_years, y=FA_df[roi])) + geom_point()
class(FA_df$age_scan_years)
class(FA_df[roi])
for (roi in rois){
ggplot(FA_df, aes(x= age_scan_years, y=roi)) + geom_point()
}
ggplot(FA_df, aes(x= age_scan_years, y=roi)) + geom_point()
class(roi)
FA_df[[roi]]
class(FA_df[[roi]])
for (roi in rois){
ggplot(FA_df, aes(x= age_scan_years, y=FA_df[[roi]])) + geom_point()
}
ggplot(FA_df, aes(x= age_scan_years, y=FA_df[[roi]])) + geom_point()
Y <- as.numeric(FA_df[roi])
FA_df[roi]
FA_df[roi]
Y <- FA_df[roi]
Y[1]]
Y[1]
class(Y[1])
class(Y[[1]])
Y <- FA_df[[roi]]
Y
Y[1]
print(roi)
for (roi in rois){
ggplot(FA_df, aes(x= age_scan_years, y= print(roi))) + geom_point()
}
ggplot(FA_df, aes(x= age_scan_years, y= print(roi))) + geom_point()
ggplot(FA_df, aes(x= age_scan_years, y= FA_df[[roi]])) + geom_point()
rois <- colnames(master_FA)
for (roi in rois){
ggplot(FA_df, aes(x= age_scan_years, y= FA_df[[roi]])) + geom_point()
}
for (roi in rois){
print(ggplot(FA_df, aes(x= age_scan_years, y= FA_df[[roi]])) + geom_point())
}
for (roi in rois){
print(ggplot(FA_df, aes(x= age_scan_years, y= .data[[roi]])) + geom_point())
}
for (roi in rois){
print(ggplot(FA_df, aes(x= age_scan_years, y= .data[[roi]])) + geom_point() + geom_smooth(method=lm))
}
View(FA_df)
ggplot(FA_df, aes(x=.data[[roi]], color=sex)) +
geom_histogram()
ggplot(FA_df, aes(x=.data[[roi]], color=sex)) +
geom_histogram(fill=sex)
ggplot(FA_df, aes(x=.data[[roi]], fill =sex, color=sex)) +
geom_histogram()
ggplot(FA_df, aes(x= maze_accuracy_pct, fill =sex, color=sex)) +
geom_histogram())
ggplot(FA_df, aes(x= maze_accuracy_pct, fill =sex, color=sex)) +
geom_histogram()
ggplot(FA_df, aes(x= maze_accuracy_pct) +
geom_histogram()
ggplot(FA_df, aes(x= maze_accuracy_pct)) +
ggplot(FA_df, aes(x= maze_accuracy_pct)) +
geom_histogram()
ggplot(FA_df, aes(x= maze_accuracy_pct, fill =sex, color=sex)) +
geom_histogram()
#Normality Check
shapiro.test(FA_df$maze_accuracy_pct)
#Normality Check
maze_norm <- shapiro.test(FA_df$maze_accuracy_pct)
View(maze_norm)
temp_subinfo <- sub_info_master %>% dplyr::select(subject_id,age_group,age_scan_years,maze_accuracy_pct,maze_moves,maze_path_efficiency,sex.1,repo_status,FNAME)
FA_maze <-cbind(temp_subinfo,master_FA) %>% filter(!is.na(maze_accuracy_pct))
L_acc <- log(FA_maze$maze_accuracy_pct)
L_acc <- log(FA_maze$maze_accuracy_pct/1-FA_maze$maze_accuracy_pct)
FA_maze$maze_accuracy_pct
L_acc <- log(FA_maze$maze_accuracy_pct[1]/1-FA_maze$maze_accuracy_pct[1])
L_acc <- log(FA_maze$maze_accuracy_pct[1]/(1-FA_maze$maze_accuracy_pct[1]))
L_acc <- log(FA_maze$maze_accuracy_pct/(1-FA_maze$maze_accuracy_pct))
View(FA_df)
View(FA_maze)
zero_score <- filter(FA_maze$maze_accuracy_pct == 0)
zero_score <- filter(FA_maze$maze_accuracy_pct == 0.00000000)
class(FA_maze$maze_accuracy_pct)
zero_score <- FA_maze %>% filter(FA_maze$maze_accuracy_pct == 0.00000000)
View(FA_maze)
View(zero_score)
zero_score <- FA_maze[FA_maze$maze_accuracy_pct == 0.00000000]
zero_score <- FA_maze[FA_maze$maze_accuracy_pct == 0.00000000,]
View(zero_score)
FA_maze[FA_maze$maze_accuracy_pct == 0.00000000,] <- 0.00000001
library(ggplot2)
#(plyr)
library(tidyverse)
# library(dplyr)
# library(tidyr)
library(stringr)
library(kableExtra)
# library(data.table)
# library(network)
# library(tidygraph)
# library(ggraph)
# library(igraph)
# library(networkD3)
# library(CINNA)
# library(umap)
# library(plotly)
#library(factoextra)
#library(lsr)
# library(car)
library(ggpubr)
#library(entropy)
#library(ds4psy)
# library(pROC)
#library(devtools)
#library(BRRR)
#library(stats)
#library(afex)
library(knitr)
library(janitor)
library(car)
library(ggiraph)
library(ggiraphExtra)
library(moonBook)
library(nationalparkcolors)
library(gridExtra)
library(markdown)
library(ppcor)
library(mediation)
CheckDistribution <- function(dataframe,threshold){
normality_check<- data.frame(matrix(ncol = 2, nrow = 0))
for (roi in c(ROIs$V2)){
df <- data.frame(matrix(ncol = 2, nrow = 1))
normcheck <- shapiro.test(dataframe[[roi]])
if (normcheck[["p.value"]] < threshold) {
df$X1 <- roi
df$X2 <- normcheck[["p.value"]]
#
normality_check <- rbind(normality_check,df)
}
}
colnames(normality_check) <- c("ROI","p.value")
return(normality_check)
}
# Craeting tables for html
TableOutput <- function(df){
knitr::kable(df, row.names=F) %>%
kable_styling(bootstrap_options =  c("striped", "hover", "condensed")) %>%
scroll_box(width = "600px", height = "300px")
}
RunningPcorTest <- function(dataframe, task, covariates){
# Here we need a clean dataframe that contains only on wm metric (FA,AD,RD, MD) and it needs to be combined with the subject info data that we need. here i need maze accuracy, sex, and age. Also, need to remove any rows with NW
finalDF <-   data.frame(matrix(ncol = 7, nrow = 0))
for (roi in c(ROIs$V2)){
df <- data.frame(matrix(ncol = 6, nrow = 1))
pcortestresults <-pcor.test(dataframe[[roi]],dataframe[[task]], dataframe[, c(covariates)])
if (pcortestresults$p.value < 0.05) {
df$X1 <- roi
df[,2:7] <- pcortestresults
#
finalDF <- rbind(finalDF,df)
}
}
colnames(finalDF) <- c("ROI", colnames(pcortestresults))
return(finalDF)
}
# Lets read in our subject information
top_workdir <-"/Users/danielacossio/Documents/Chrastil_Lab/Projects/SNAG/MIDLIFE_TBSS/"
# laptop path "/Users/danielacossio/Library/CloudStorage/GoogleDrive-dcossio1@uci.edu/Other computers/My iMac/Chrastil_Lab/Projects/SNAG/MIDLIFE_TBSS/"
ROIs <- read.table(paste0(top_workdir,"JHU-WhiteMatter-labels-1mm.txt")) %>% dplyr::select(V2)
sub_info_master <- read.csv(paste0(top_workdir,"subject_info.csv"))
master_FA <- read.csv(paste0(top_workdir,"JHU-skeletonized-FA.csv"), header=FALSE) %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
master_MD <- read.csv(paste0(top_workdir,"JHU-skeletonized-MD.csv"))  %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
master_AD <- read.csv(paste0(top_workdir,"JHU-skeletonized-AD.csv")) %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
master_RD <- read.csv(paste0(top_workdir,"JHU-skeletonized-RD.csv")) %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
# Lets read in our subject information
top_workdir <-"/Users/danielacossio/Documents/Chrastil_Lab/Projects/SNAG/MIDLIFE_TBSS/"
# laptop path "/Users/danielacossio/Library/CloudStorage/GoogleDrive-dcossio1@uci.edu/Other computers/My iMac/Chrastil_Lab/Projects/SNAG/MIDLIFE_TBSS/"
ROIs <- read.table(paste0(top_workdir,"JHU-WhiteMatter-labels-1mm.txt")) %>% dplyr::select(V2)
sub_info_master <- read.csv(paste0(top_workdir,"subject_info.csv"))
master_FA <- read.csv(paste0(top_workdir,"JHU-skeletonized-FA.csv"), header=FALSE) %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
master_MD <- read.csv(paste0(top_workdir,"JHU-skeletonized-MD.csv"))  %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
master_AD <- read.csv(paste0(top_workdir,"JHU-skeletonized-AD.csv")) %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
master_RD <- read.csv(paste0(top_workdir,"JHU-skeletonized-RD.csv")) %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
View(ROIs)
#  Creating our data frame
temp_subinfo <- sub_info_master %>% dplyr::select(subject_id,age_group,age_scan_years,maze_accuracy_pct,maze_moves,maze_path_efficiency,sex.1,repo_status,FNAME)
FA_maze <-cbind(temp_subinfo,master_FA) %>% filter(!is.na(maze_accuracy_pct))
View(FA_maze)
colnames(master_FA)
ROIS
View(ROIs)
apriori_ROIS <- c("Fornix_(column_and_body_of_fornix)","Fornix_(cres)_/_Stria_terminalis_(can_not_be_resolved_with_current_resolution)_R","Fornix_(cres)_/_Stria_terminalis_(can_not_be_resolved_with_current_resolution)_L", "Cingulum_(cingulate_gyrus)_R","Cingulum_(cingulate_gyrus)_L","Cingulum_(hippocampus)_R", "Cingulum_(hippocampus)_L")
aprior_FA <- master_FA %>% select(c(apriori_ROIS))
aprior_FA <- master_FA %>% select(apriori_ROIS)
aprior_FA <- master_FA %>% select(. ,apriori_ROIS)
aprior_FA <- master_FA %>% dplyr::select(. ,apriori_ROIS)
View(aprior_FA)
aprior_FA <- master_FA %>% dplyr::select(. ,apriori_ROIS) %>% `colnames<-`("fornix_body", "fornix_R", "fornix_L","Cingulum_(cingulate_gyrus)_R","Cingulum_(cingulate_gyrus)_L","Cingulum_(hippocampus)_R", "Cingulum_(hippocampus)_L" )
aprior_FA <- master_FA %>% dplyr::select(. ,apriori_ROIS) %>% `colnames<-`(c("fornix_body", "fornix_R", "fornix_L","Cingulum_(cingulate_gyrus)_R","Cingulum_(cingulate_gyrus)_L","Cingulum_(hippocampus)_R", "Cingulum_(hippocampus)_L" ))
View(aprior_FA)
GetAprioriDF <- function(dataframe){
# List of a prior rois
apriori_ROIS <- c("Fornix_(column_and_body_of_fornix)","Fornix_(cres)_/_Stria_terminalis_(can_not_be_resolved_with_current_resolution)_R","Fornix_(cres)_/_Stria_terminalis_(can_not_be_resolved_with_current_resolution)_L", "Cingulum_(cingulate_gyrus)_R","Cingulum_(cingulate_gyrus)_L","Cingulum_(hippocampus)_R", "Cingulum_(hippocampus)_L")
# clean up the names
df <- dataframe %>% dplyr::select(. ,apriori_ROIS) %>% `colnames<-`(c("fornix_body", "fornix_R", "fornix_L","Cingulum_(cingulate_gyrus)_R","Cingulum_(cingulate_gyrus)_L","Cingulum_(hippocampus)_R", "Cingulum_(hippocampus)_L" ))
return(df)
}
aprior_FA <- GetAprioriDF(master_FA)
View(aprior_FA)
View(sub_info_master)
#  Creating our data frame  by taking aprior rois and also renaming them for a clean name
aprior_FA <- GetAprioriDF(master_FA) %>% cbind(temp_subinfo, .)
View(aprior_FA)
#  Creating our data frame  by taking aprior rois and also renaming them for a clean name
aprior_FA <- GetAprioriDF(master_FA) %>% cbind(sub_info_master, .)
View(aprior_FA)
apriori_FA <- GetAprioriDF(master_FA) %>% cbind(sub_info_master, .)
# All
ggplot(sub_info_master, aes(x= maze_accuracy_pct)) +
geom_histogram()
#By sex
ggplot(sub_info_master, aes(x= maze_accuracy_pct, fill =sex, color=sex)) +
geom_histogram()
#Normality Check
maze_norm <- shapiro.test(sub_info_master$maze_accuracy_pct)
maze_norm[["p.value"]]
# All
ggplot(sub_info_master, aes(x= dsp_si_true_pct)) +
geom_histogram()
#By sex
ggplot(sub_info_master, aes(x= dsp_si_true_pct, fill =sex, color=sex)) +
geom_histogram()
#Normality Check
maze_norm <- shapiro.test(sub_info_master$dsp_si_true_pct)
maze_norm[["p.value"]]
#Normality Check
DSP_norm <- shapiro.test(sub_info_master$dsp_si_true_pct)
DSP_norm[["p.value"]]
# All
ggplot(sub_info_master, aes(x= loop_ae_avg_degree)) +
geom_histogram()
#By sex
ggplot(sub_info_master, aes(x= loop_ae_avg_degree, fill =sex, color=sex)) +
geom_histogram()
# All
ggplot(sub_info_master, aes(x= loop_ae_rad3_degree)) +
geom_histogram()
#By sex
ggplot(sub_info_master, aes(x= loop_ae_rad3_degree, fill =sex, color=sex)) +
geom_histogram()
#  Creating our data frame  by taking apriori rois and also renaming them for a clean name and binding them with or subject information
apriori_FA <- GetAprioriDF(master_FA) %>% cbind(sub_info_master, .)
FA_maze_results <-  RunningPcorTest(dataframe = apriori_FA,task = "maze_accuracy_pct",covariates = c("age_scan_years","sex.1"))
dataframe <- apriori_FA
clean_df <- dataframe %>% filter(!is.na(maze_accuracy_pct))
finalDF <-   data.frame(matrix(ncol = 7, nrow = 0))
View(clean_df)
list_rois <- c("fornix_body", "fornix_R", "fornix_L","Cingulum_(cingulate_gyrus)_R","Cingulum_(cingulate_gyrus)_L","Cingulum_(hippocampus)_R", "Cingulum_(hippocampus)_L")
for (roi in c(list_rois)){
print (roi)
# df <- data.frame(matrix(ncol = 6, nrow = 1))
#
# pcortestresults <-pcor.test(dataframe[[roi]],dataframe[[task]], dataframe[, c(covariates)])
#
#
#   df$X1 <- roi
#   df[,2:7] <- pcortestresults
#   #
#   finalDF <- rbind(finalDF,df)
#
}
apriori_FA[[roi]]
class(apriori_FA[[roi]])
class(apriori_FA$maze_accuracy_pct)
covars <- c("sex.1","age_scan_years")
apriori_FA[,covars]
pcortestresults <-pcor.test(apriori_FA[[roi]],apriori_FA$maze_accuracy_pct, apriori_FA[,covars])
pcor.test(apriori_FA[[roi]],apriori_FA$maze_accuracy_pct, apriori_FA[,covars])
temp_DF <-apriori_FA %>% filter(!is.na(maze_accuracy_pct))
pcortestresults <- pcor.test(temp_DF[[roi]],temp_DF$maze_accuracy_pct, temp_DF[,covars])
pcortestresults
View(pcortestresults)
View(pcortestresults)
pcortestresults <- pcor.test(DF[[roi]],DF[[task]],covariates,method = "spearman")
df <- data.frame(matrix(ncol = 7, nrow = 1))
View(df)
list_rois <- c("fornix_body", "fornix_R", "fornix_L","Cingulum_(cingulate_gyrus)_R","Cingulum_(cingulate_gyrus)_L","Cingulum_(hippocampus)_R", "Cingulum_(hippocampus)_L")
covars <- c("sex.1","age_scan_years")
temp_DF <-apriori_FA %>% filter(!is.na(maze_accuracy_pct))
finalDF <- data.frame(matrix(ncol = 7, nrow = 0))
for (roi in c(list_rois)){
print (roi)
df <- data.frame(matrix(ncol = 6, nrow = 1))
#
pcortestresults <- pcor.test(temp_DF[[roi]],temp_DF$maze_accuracy_pct, temp_DF[,covars])
df$X1 <- roi
df[,2:7] <- pcortestresults
finalDF <- rbind(finalDF,df)
#
}
View(df)
View(finalDF)
AprioriPcorTest <-  function(dataframe,task, covariates){
# Here we have our list of ROIS
list_rois <- c("fornix_body", "fornix_R", "fornix_L","Cingulum_(cingulate_gyrus)_R","Cingulum_(cingulate_gyrus)_L","Cingulum_(hippocampus)_R", "Cingulum_(hippocampus)_L")
DF <-dataframe %>% filter(!is.na(task))
finalDF <- data.frame(matrix(ncol = 7, nrow = 0))
for (roi in c(list_rois)){
df <- data.frame(matrix(ncol = 6, nrow = 1))
pcortestresults <- pcor.test(DF[[roi]],DF[[task]],covariates,method = "spearman")
#
df$X1 <- roi
df[,2:7] <- pcortestresults
#   #
finalDF <- rbind(finalDF,df)
#
}
colnames(finalDF) <- c("ROI", colnames(pcortestresults))
return(finalDF)
}
FA_maze_results <- AprioriPcorTest(dataframe = apriori_FA,task ="maze_accuracy_pct",covariates = c("sex.1","age_scan_years")
)
temp_DF[[roi]]
FA_maze_results <- AprioriPcorTest(dataframe = apriori_FA,task ="maze_accuracy_pct",covariates = c("sex.1","age_scan_years"))
dataframe <- apriori_FA
task <- "maze_accuracy_pct"
DF <-dataframe %>% filter(!is.na(task))
DF[[roi]]
DF[[task]]
DF <-dataframe %>% filter(!is.na(task))
task <- maze_accuracy_pct
View(DF)
FA_maze_results <- AprioriPcorTest(dataframe = apriori_FA, task =maze_accuracy_pct,covariates = c("sex.1","age_scan_years"))
DF <-dataframe %>% filter(!is.na(dataframe[[task]]))
View(DF)
AprioriPcorTest <-  function(dataframe,task, covariates){
# Here we have our list of ROIS
list_rois <- c("fornix_body", "fornix_R", "fornix_L","Cingulum_(cingulate_gyrus)_R","Cingulum_(cingulate_gyrus)_L","Cingulum_(hippocampus)_R", "Cingulum_(hippocampus)_L")
DF <-dataframe %>% filter(!is.na(dataframe[[task]]))
finalDF <- data.frame(matrix(ncol = 7, nrow = 0))
for (roi in c(list_rois)){
df <- data.frame(matrix(ncol = 6, nrow = 1))
pcortestresults <- pcor.test(DF[[roi]],DF[[task]],covariates,method = "spearman")
#
df$X1 <- roi
df[,2:7] <- pcortestresults
#   #
finalDF <- rbind(finalDF,df)
#
}
colnames(finalDF) <- c("ROI", colnames(pcortestresults))
return(finalDF)
}
FA_maze_results <- AprioriPcorTest(dataframe = apriori_FA, task ="maze_accuracy_pct",covariates = c("sex.1","age_scan_years"))
DF[[roi]]
DF[roi]
DF[roi]
class(DF[roi])
pcortestresults <- pcor.test(DF[[roi]],DF[[task]],covariates,method = "spearman")
covariates <- c("sex.1", "age_scan_years")
DF <-dataframe %>% filter(!is.na(dataframe[[task]]))
pcortestresults <- pcor.test(DF[[roi]],DF[[task]],covariates,method = "spearman")
DF[[roi]]
DF[[task]]
pcortestresults <- pcor.test(DF[[roi]],DF[[task]],DF[, c(covariates)],method = "spearman")
AprioriPcorTest <-  function(dataframe,task, covariates){
# Here we have our list of ROIS
list_rois <- c("fornix_body", "fornix_R", "fornix_L","Cingulum_(cingulate_gyrus)_R","Cingulum_(cingulate_gyrus)_L","Cingulum_(hippocampus)_R", "Cingulum_(hippocampus)_L")
DF <-dataframe %>% filter(!is.na(dataframe[[task]]))
finalDF <- data.frame(matrix(ncol = 7, nrow = 0))
for (roi in c(list_rois)){
df <- data.frame(matrix(ncol = 6, nrow = 1))
pcortestresults <- pcor.test(DF[[roi]],DF[[task]],DF[, c(covariates)],method = "spearman")
#
df$X1 <- roi
df[,2:7] <- pcortestresults
#   #
finalDF <- rbind(finalDF,df)
#
}
colnames(finalDF) <- c("ROI", colnames(pcortestresults))
return(finalDF)
}
FA_maze_results <- AprioriPcorTest(dataframe = apriori_FA, task ="maze_accuracy_pct",covariates = c("sex.1","age_scan_years"))
View(FA_maze_results)
FA_maze_results <- AprioriPcorTest(dataframe = apriori_FA, task ="maze_accuracy_pct",covariates = c("sex.1","age_scan_years"))
TableOutput(FA_maze_results)
model1 <- lm(maze_accuracy_pct ~ fornix_body + sex.1 + age_scan_years, data = apriori_FA)
summary(model1)
model2 <- lm(maze_accuracy_pct ~ fornix_R + sex.1 + age_scan_years, data = apriori_FA)
summary(model2)
model1 <- lm(fornix_body ~ sex.1 + age_scan_years, data = apriori_FA)
summary(model1)
model1 <- lm(maze_accuracy_pct ~ fornix_body + sex.1 + age_scan_years, data = apriori_FA)
summary(model1)
model2 <- lm(maze_accuracy_pct ~ fornix_R + sex.1 + age_scan_years, data = apriori_FA)
summary(model2)
model3 <- lm(maze_accuracy_pct ~ fornix_L + sex.1 + age_scan_years, data = apriori_FA)
summary(model3)
model4 <- lm(maze_accuracy_pct ~ `Cingulum_(cingulate_gyrus)_R` + sex.1 + age_scan_years, data = apriori_FA)
summary(model4)
model5 <- lm(maze_accuracy_pct ~ `Cingulum_(cingulate_gyrus)_L` + sex.1 + age_scan_years, data = apriori_FA)
summary(model5)
model6 <- lm(maze_accuracy_pct ~ `Cingulum_(hippocampus)_R` + sex.1 + age_scan_years, data = apriori_FA)
summary(model6)
model7 <- lm(maze_accuracy_pct ~ `Cingulum_(hippocampus)_L` + sex.1 + age_scan_years, data = apriori_FA)
summary(model7)
