if (pcortestresults$p.value < 0.05) {
df$X1 <- roi
df[,2:7] <- pcortestresults
#
finalDF <- rbind(finalDF,df)
}
}
colnames(finalDF) <- c("ROI", colnames(pcortestresults))
return(finalDF)
}
test <- RunningPcorTest(dataframe = FA_maze,task = "maze_accuracy_pct",covariates = c("age_scan_years","sex.1"))
View(test)
for (roi in c(ROIs$V2)){
df <- data.frame(matrix(ncol = 6, nrow = 1))
print(roi)
pcortestresults <-pcor.test(FA_maze[[roi]],FA_maze$maze_accuracy_pct, FA_maze[, c("age_scan_years","sex.1")])
if (pcortestresults$p.value < 0.05) {
df$X1 <- roi
df[,2:7] <- pcortestresults
#
finalDF <- rbind(finalDF,df)
}
}
testfinalDF <-   data.frame(matrix(ncol = 7, nrow = 0))
for (roi in c(ROIs$V2)){
df <- data.frame(matrix(ncol = 6, nrow = 1))
print(roi)
pcortestresults <-pcor.test(FA_maze[[roi]],FA_maze$maze_accuracy_pct, FA_maze[, c("age_scan_years","sex.1")])
if (pcortestresults$p.value < 0.05) {
df$X1 <- roi
df[,2:7] <- pcortestresults
#
testfinalDF <- rbind(finalDF,df)
}
}
testfinalDF <-   data.frame(matrix(ncol = 7, nrow = 0))
for (roi in c(ROIs$V2)){
df <- data.frame(matrix(ncol = 6, nrow = 1))
print(roi)
pcortestresults <-pcor.test(FA_maze[[roi]],FA_maze$maze_accuracy_pct, FA_maze[, c("age_scan_years","sex.1")])
if (pcortestresults$p.value < 0.05) {
df$X1 <- roi
df[,2:7] <- pcortestresults
#
testfinalDF <- rbind(testfinalDF,df)
}
}
View(testfinalDF)
View(pcortestresults)
FA_maze_results <-  RunningPcorTest(dataframe = FA_maze,task = "maze_accuracy_pct",covariates = c("age_scan_years","sex.1"))
FA_maze_results <-  RunningPcorTest(dataframe = FA_maze,task = "maze_accuracy_pct",covariates = c("age_scan_years","sex.1"))
CheckDistribution <- function(dataframe,threshold){
normality_check<- data.frame(matrix(ncol = 2, nrow = 0))
for (roi in c(ROIs$V2)){
df <- data.frame(matrix(ncol = 2, nrow = 1))
normcheck <- shapiro.test(dataframe[[roi]])
if (normcheck[["p.value"]] < threshold) {
print("not normal")
df$X1 <- roi
df$X2 <- normcheck[["p.value"]]
#
normality_check <- rbind(normality_check,df)
}
}
colnames(normality_check) <- c("ROI","p.value")
return(normality_check)
}
# Craeting tables for html
TableOutput <- function(df){
knitr::kable(df, row.names=F) %>%
kable_styling(bootstrap_options =  c("striped", "hover", "condensed")) %>%
scroll_box(width = "600px", height = "300px")
}
RunningPcorTest <- function(dataframe, task, covariates){
# Here we need a clean dataframe that contains only on wm metric (FA,AD,RD, MD) and it needs to be combined with the subject info data that we need. here i need maze accuracy, sex, and age. Also, need to remove any rows with NW
finalDF <-   data.frame(matrix(ncol = 7, nrow = 0))
for (roi in c(ROIs$V2)){
df <- data.frame(matrix(ncol = 6, nrow = 1))
pcortestresults <-pcor.test(dataframe[[roi]],dataframe[[task]], dataframe[, c(covariates)])
if (pcortestresults$p.value < 0.05) {
df$X1 <- roi
df[,2:7] <- pcortestresults
#
finalDF <- rbind(finalDF,df)
}
}
colnames(finalDF) <- c("ROI", colnames(pcortestresults))
return(finalDF)
}
FA_maze_results <-  RunningPcorTest(dataframe = FA_maze,task = "maze_accuracy_pct",covariates = c("age_scan_years","sex.1"))
ROIs <- read.table(paste0(top_workdir,"JHU-WhiteMatter-labels-1mm.txt")) %>% select(2)
# Lets read in our subject information
top_workdir <-"/Users/danielacossio/Documents/Chrastil_Lab/Projects/SNAG/MIDLIFE_TBSS/"
ROIs <- read.table(paste0(top_workdir,"JHU-WhiteMatter-labels-1mm.txt")) %>% select(2)
ROIs <- read.table(paste0(top_workdir,"JHU-WhiteMatter-labels-1mm.txt"))
View(ROIs)
ROIs <- read.table(paste0(top_workdir,"JHU-WhiteMatter-labels-1mm.txt"))
ROIs <- read.table(paste0(top_workdir,"JHU-WhiteMatter-labels-1mm.txt")) %>% select(V2)
detach("package:MASS", unload = TRUE)
library(MASS)
# Lets read in our subject information
top_workdir <-"/Users/danielacossio/Documents/Chrastil_Lab/Projects/SNAG/MIDLIFE_TBSS/"
ROIs <- read.table(paste0(top_workdir,"JHU-WhiteMatter-labels-1mm.txt")) %>% dplyr::select(V2)
sub_info_master <- read.csv(paste0(top_workdir,"subject_info.csv"))
master_FA <- read.csv(paste0(top_workdir,"JHU-skeletonized-FA.csv"), header=FALSE) %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
master_MD <- read.csv(paste0(top_workdir,"JHU-skeletonized-MD.csv"))  %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
master_AD <- read.csv(paste0(top_workdir,"JHU-skeletonized-AD.csv")) %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
master_RD <- read.csv(paste0(top_workdir,"JHU-skeletonized-RD.csv")) %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
fit <- lm(maze_accuracy_pct ~ Middle_cerebellar_peduncle * age_scan_years + sex.1)
fit <- lm(maze_accuracy_pct ~ Middle_cerebellar_peduncle * age_scan_years + sex.1, data = FA_maze)
fit <- lm(maze_accuracy_pct ~ Middle_cerebellar_peduncle * age_scan_years + sex.1, data = FA_maze)
summarise(fit)
fit <- lm(maze_accuracy_pct ~ Middle_cerebellar_peduncle * age_scan_years + sex.1, data = FA_maze)
summary(fit)
library(ggplot2)
#(plyr)
library(tidyverse)
# library(dplyr)
# library(tidyr)
library(stringr)
library(kableExtra)
# library(data.table)
# library(network)
# library(tidygraph)
# library(ggraph)
# library(igraph)
# library(networkD3)
# library(CINNA)
# library(umap)
# library(plotly)
#library(factoextra)
#library(lsr)
# library(car)
library(ggpubr)
#library(entropy)
#library(ds4psy)
# library(pROC)
#library(devtools)
#library(BRRR)
#library(stats)
#library(afex)
library(knitr)
library(janitor)
library(car)
library(ggiraph)
library(ggiraphExtra)
library(moonBook)
library(nationalparkcolors)
library(gridExtra)
library(markdown)
library(ppcor)
CheckDistribution <- function(dataframe,threshold){
normality_check<- data.frame(matrix(ncol = 2, nrow = 0))
for (roi in c(ROIs$V2)){
df <- data.frame(matrix(ncol = 2, nrow = 1))
normcheck <- shapiro.test(dataframe[[roi]])
if (normcheck[["p.value"]] < threshold) {
df$X1 <- roi
df$X2 <- normcheck[["p.value"]]
#
normality_check <- rbind(normality_check,df)
}
}
colnames(normality_check) <- c("ROI","p.value")
return(normality_check)
}
# Craeting tables for html
TableOutput <- function(df){
knitr::kable(df, row.names=F) %>%
kable_styling(bootstrap_options =  c("striped", "hover", "condensed")) %>%
scroll_box(width = "600px", height = "300px")
}
RunningPcorTest <- function(dataframe, task, covariates){
# Here we need a clean dataframe that contains only on wm metric (FA,AD,RD, MD) and it needs to be combined with the subject info data that we need. here i need maze accuracy, sex, and age. Also, need to remove any rows with NW
finalDF <-   data.frame(matrix(ncol = 7, nrow = 0))
for (roi in c(ROIs$V2)){
df <- data.frame(matrix(ncol = 6, nrow = 1))
pcortestresults <-pcor.test(dataframe[[roi]],dataframe[[task]], dataframe[, c(covariates)])
if (pcortestresults$p.value < 0.05) {
df$X1 <- roi
df[,2:7] <- pcortestresults
#
finalDF <- rbind(finalDF,df)
}
}
colnames(finalDF) <- c("ROI", colnames(pcortestresults))
return(finalDF)
}
# Lets read in our subject information
top_workdir <-"/Users/danielacossio/Library/CloudStorage/GoogleDrive-dcossio1@uci.edu/Other computers/My iMac/Chrastil_Lab/Projects/SNAG/MIDLIFE_TBSS"
ROIs <- read.table(paste0(top_workdir,"JHU-WhiteMatter-labels-1mm.txt")) %>% dplyr::select(V2)
# Lets read in our subject information
top_workdir <-"/Users/danielacossio/Library/CloudStorage/GoogleDrive-dcossio1@uci.edu/Other computers/My iMac/Chrastil_Lab/Projects/SNAG/MIDLIFE_TBSS/"
ROIs <- read.table(paste0(top_workdir,"JHU-WhiteMatter-labels-1mm.txt")) %>% dplyr::select(V2)
sub_info_master <- read.csv(paste0(top_workdir,"subject_info.csv"))
master_FA <- read.csv(paste0(top_workdir,"JHU-skeletonized-FA.csv"), header=FALSE) %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
master_MD <- read.csv(paste0(top_workdir,"JHU-skeletonized-MD.csv"))  %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
master_AD <- read.csv(paste0(top_workdir,"JHU-skeletonized-AD.csv")) %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
master_RD <- read.csv(paste0(top_workdir,"JHU-skeletonized-RD.csv")) %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
temp_subinfo <- sub_info_master %>% dplyr::select(subject_id,age_group,age_scan_years,maze_accuracy_pct,maze_moves,maze_path_efficiency,sex.1,repo_status,FNAME)
FA_maze <-cbind(temp_subinfo,master_FA) %>% filter(!is.na(maze_accuracy_pct))
#Normality Check
x <- CheckDistribution(FA_maze,0.05)
TableOutput(x)
FA_maze_results <-  RunningPcorTest(dataframe = FA_maze,task = "maze_accuracy_pct",covariates = c("age_scan_years","sex.1"))
TableOutput(FA_maze_results)
library(mediation)
install.packages("mediation")
library(mediation)
mod1 <- lm(FA_maze$maze_accuracy_pct~FA_maze$Middle_cerebellar_peduncle)
mod1 <- lm(FA_maze$maze_accuracy_pct ~ FA_maze$Middle_cerebellar_peduncle)
View(mod1)
mod1 <- lm(FA_maze$maze_accuracy_pct ~ FA_maze$Middle_cerebellar_peduncle)
summary(mod1)
mod1 <- lm(FA_maze$maze_accuracy_pct ~ FA_maze$Middle_cerebellar_peduncle)
summary(mod1)
mod2 <- lm(FA_maze$Middle_cerebellar_peduncle ~ FA_maze$sex.1)
summary(mod2)
View(FA_maze)
mod2 <- lm(FA_maze$Middle_cerebellar_peduncle ~ FA_maze$sex.1)
summary(mod2)
mod2 <- lm(FA_maze$sex.1 ~ FA_maze$Middle_cerebellar_peduncle)
summary(mod2)
mod2 <- lm(FA_maze$sex.1 ~ FA_maze$Middle_cerebellar_peduncle)
summary(mod2)
med_results <- mediate(mod1, mod2, treat='FA_maze$Middle_cerebellar_peduncle', mediator='FA_maze$sex.1')
summary(med_results)
mod1 <- lm(FA_maze$maze_accuracy_pct ~ FA_maze$Middle_cerebellar_peduncle + FA_maze$sex.1)
summary(mod1)
summary(mod2)
mod3 <- lm(FA_maze$maze_accuracy_pct ~ FA_maze$Middle_cerebellar_peduncle + FA_maze$sex.1)
summary(mod3)
mod1 <- lm(FA_maze$maze_accuracy_pct ~ FA_maze$`Fornix_(column_and_body_of_fornix)`)
summary(mod1)
mod3 <- lm(FA_maze$maze_accuracy_pct ~ FA_maze$Middle_cerebellar_peduncle + FA_maze$sex.1)
summary(mod3)
mod2 <- lm(FA_maze$sex.1 ~ FA_maze$Middle_cerebellar_peduncle)
summary(mod2)
mod3 <- lm(FA_maze$maze_accuracy_pct ~ FA_maze$Middle_cerebellar_peduncle + FA_maze$sex.1)
summary(mod3)
med_results <- mediate(mod2, mod3, treat='FA_maze$Middle_cerebellar_peduncle', mediator='FA_maze$sex.1')
summary(med)
med_results <- mediate(mod2, mod3, treat='FA_maze$Middle_cerebellar_peduncle', mediator='FA_maze$sex.1')
summary(med_results)
mod1 <- lm(FA_maze$Middle_cerebellar_peduncle ~ FA_maze$maze_accuracy_pct)
summary(mod1)
mod2 <- lm(FA_maze$sex.1 ~ FA_maze$maze_accuracy_pct)
summary(mod2)
mod3 <- lm(FA_maze$Middle_cerebellar_peduncle ~ FA_maze$maze_accuracy_pct + FA_maze$sex.1)
summary(mod3)
mod1 <- lm(FA_maze$`Fornix_(cres)_/_Stria_terminalis_(can_not_be_resolved_with_current_resolution)_R` ~ FA_maze$maze_accuracy_pct)
summary(mod1)
temp_subinfo <- sub_info_master %>% dplyr::select(subject_id,age_group,age_scan_years,dsp_si_true_pct,sex.1,repo_status,FNAME)
FA_DSP <-cbind(temp_subinfo,master_FA) %>% filter(!is.na(dsp_si_true_pct))
View(FA_DSP)
#Normality Check
x <- CheckDistribution(FA_DSP,0.05)
TableOutput(x)
FA_DSP_results <-  RunningPcorTest(dataframe = FA_DSP,task = "dsp_si_true_pct",covariates = c("age_scan_years","sex.1"))
TableOutput(FA_DSP_results)
mod1 <- lm(FA_maze$`Fornix_(cres)_/_Stria_terminalis_(can_not_be_resolved_with_current_resolution)_R` ~ FA_maze$maze_accuracy_pct)
summary(mod1)
mod1 <- lm(FA_DSP$`Fornix_(cres)_/_Stria_terminalis_(can_not_be_resolved_with_current_resolution)_R` ~ FA_DSP$dsp_si_true_pct)
summary(mod1)
mod2 <- lm(FA_maze$sex.1 ~ FA_DSP$dsp_si_true_pct)
mod2 <- lm(FA_DSP$sex.1 ~ FA_DSP$dsp_si_true_pct)
summary(mod2)
mod1 <- lm(FA_DSP$`Fornix_(cres)_/_Stria_terminalis_(can_not_be_resolved_with_current_resolution)_R` ~ FA_DSP$sex.1)
summary(mod1)
fit <- lm(dsp_si_true_pct ~ sex.1, data = FA_DSP)
fit <- lm(dsp_si_true_pct ~ sex.1, data = FA_DSP)
summary(fit)
fit <- lm( sex.1 ~ dsp_si_true_pct, data = FA_DSP)
summary(fit)
mod2 <- lm(FA_DSP$sex.1 ~ FA_DSP$dsp_si_true_pct)
summary(mod2)
fit <- lm(sex.1 ~ `Fornix_(cres)_/_Stria_terminalis_(can_not_be_resolved_with_current_resolution)_R`, data = FA_DSP)
summary(fit)
model <- aov(sex.1 ~ maze_accuracy_pct, data = FA_maze)
summary(model)
model <- aov(maze_accuracy_pct ~ sex.1, data = FA_maze)
summary(model)
library(ggplot2)
#(plyr)
library(tidyverse)
# library(dplyr)
# library(tidyr)
library(stringr)
library(kableExtra)
# library(data.table)
# library(network)
# library(tidygraph)
# library(ggraph)
# library(igraph)
# library(networkD3)
# library(CINNA)
# library(umap)
# library(plotly)
#library(factoextra)
#library(lsr)
# library(car)
library(ggpubr)
#library(entropy)
#library(ds4psy)
# library(pROC)
#library(devtools)
#library(BRRR)
#library(stats)
#library(afex)
library(knitr)
library(janitor)
library(car)
library(ggiraph)
library(ggiraphExtra)
library(moonBook)
library(nationalparkcolors)
library(gridExtra)
library(markdown)
library(ppcor)
library(mediation)
CheckDistribution <- function(dataframe,threshold){
normality_check<- data.frame(matrix(ncol = 2, nrow = 0))
for (roi in c(ROIs$V2)){
df <- data.frame(matrix(ncol = 2, nrow = 1))
normcheck <- shapiro.test(dataframe[[roi]])
if (normcheck[["p.value"]] < threshold) {
df$X1 <- roi
df$X2 <- normcheck[["p.value"]]
#
normality_check <- rbind(normality_check,df)
}
}
colnames(normality_check) <- c("ROI","p.value")
return(normality_check)
}
# Craeting tables for html
TableOutput <- function(df){
knitr::kable(df, row.names=F) %>%
kable_styling(bootstrap_options =  c("striped", "hover", "condensed")) %>%
scroll_box(width = "600px", height = "300px")
}
RunningPcorTest <- function(dataframe, task, covariates){
# Here we need a clean dataframe that contains only on wm metric (FA,AD,RD, MD) and it needs to be combined with the subject info data that we need. here i need maze accuracy, sex, and age. Also, need to remove any rows with NW
finalDF <-   data.frame(matrix(ncol = 7, nrow = 0))
for (roi in c(ROIs$V2)){
df <- data.frame(matrix(ncol = 6, nrow = 1))
pcortestresults <-pcor.test(dataframe[[roi]],dataframe[[task]], dataframe[, c(covariates)])
if (pcortestresults$p.value < 0.05) {
df$X1 <- roi
df[,2:7] <- pcortestresults
#
finalDF <- rbind(finalDF,df)
}
}
colnames(finalDF) <- c("ROI", colnames(pcortestresults))
return(finalDF)
}
# Lets read in our subject information
top_workdir <-"/Users/danielacossio/Library/CloudStorage/GoogleDrive-dcossio1@uci.edu/Other computers/My iMac/Chrastil_Lab/Projects/SNAG/MIDLIFE_TBSS/"
ROIs <- read.table(paste0(top_workdir,"JHU-WhiteMatter-labels-1mm.txt")) %>% dplyr::select(V2)
# Lets read in our subject information
top_workdir <-"/Users/danielacossio/Documents/Chrastil_Lab/Projects/SNAG/MIDLIFE_TBSS/"
# laptop path "/Users/danielacossio/Library/CloudStorage/GoogleDrive-dcossio1@uci.edu/Other computers/My iMac/Chrastil_Lab/Projects/SNAG/MIDLIFE_TBSS/"
ROIs <- read.table(paste0(top_workdir,"JHU-WhiteMatter-labels-1mm.txt")) %>% dplyr::select(V2)
sub_info_master <- read.csv(paste0(top_workdir,"subject_info.csv"))
master_FA <- read.csv(paste0(top_workdir,"JHU-skeletonized-FA.csv"), header=FALSE) %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
master_MD <- read.csv(paste0(top_workdir,"JHU-skeletonized-MD.csv"))  %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
master_AD <- read.csv(paste0(top_workdir,"JHU-skeletonized-AD.csv")) %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
master_RD <- read.csv(paste0(top_workdir,"JHU-skeletonized-RD.csv")) %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
View(master_FA)
FA_df <- cbind(sub_info_master, master_FA)
View(FA_df)
rois <- colnames(master_FA)
for (roi in rois){
hist(FA_df[roi])
}
FA_df[roi]
FA_df[1]
for (roi in 1:length(rois)){
plots <- list()
p[[roi]] <- hist(FA_df[rois[roi]])
}
FA_df[rois[roi]]
plots <- list()
for (roi in 1:length(rois)){
plots[[roi]] <- hist(FA_df[rois[roi]])
}
do.call(grid.arrange,plots)
do.call(grid.arrange,grobs=plots)
do.call(grid.arrange(grobs=plots))
grid.arrange(grobs=plots)
grid.arrange(arrangeGrob(plots, main="title"))
plots
View(plots)
plots[[1]]
hist(plots[[1]])
hist(plots[1])
hist(plots)
View(plots)
plots[[1]]
FA_df[rois]
do.call(
grid.arrange,
lapply(FA_df[rois], function(f){
ggplot(f, ...)
})
)
do.call(grid.arrange,lapply(FA_df[rois], function(f){ ggplot(f, ...) }))
do.call(grid.arrange,lapply(FA_df[rois], function(f){ ggplot(f) }))
do.call(grid.arrange,lapply(FA_df[rois], function(f){ hist(f) }))
for (roi in rois){
hist(FA_df[rois])
}
FA_df <- cbind(sub_info_master, master_FA)
# Let's plot a visualization of all of our ROIs
rois <- colnames(master_FA)
for (roi in rois){
hist(FA_df[roi])
}
View(FA_df)
# Let's plot a visualization of all of our ROIs
rois <- colnames(master_FA)
for (roi in rois){
ggplot(FA_df, aes(x= age_scan_years, y=FA_df[roi])) + geom_point()
}
ggplot(FA_df, aes(x= age_scan_years, y=FA_df[roi])) + geom_point()
class(FA_df$age_scan_years)
class(FA_df[roi])
for (roi in rois){
ggplot(FA_df, aes(x= age_scan_years, y=roi)) + geom_point()
}
ggplot(FA_df, aes(x= age_scan_years, y=roi)) + geom_point()
class(roi)
FA_df[[roi]]
class(FA_df[[roi]])
for (roi in rois){
ggplot(FA_df, aes(x= age_scan_years, y=FA_df[[roi]])) + geom_point()
}
ggplot(FA_df, aes(x= age_scan_years, y=FA_df[[roi]])) + geom_point()
Y <- as.numeric(FA_df[roi])
FA_df[roi]
FA_df[roi]
Y <- FA_df[roi]
Y[1]]
Y[1]
class(Y[1])
class(Y[[1]])
Y <- FA_df[[roi]]
Y
Y[1]
print(roi)
for (roi in rois){
ggplot(FA_df, aes(x= age_scan_years, y= print(roi))) + geom_point()
}
ggplot(FA_df, aes(x= age_scan_years, y= print(roi))) + geom_point()
ggplot(FA_df, aes(x= age_scan_years, y= FA_df[[roi]])) + geom_point()
rois <- colnames(master_FA)
for (roi in rois){
ggplot(FA_df, aes(x= age_scan_years, y= FA_df[[roi]])) + geom_point()
}
for (roi in rois){
print(ggplot(FA_df, aes(x= age_scan_years, y= FA_df[[roi]])) + geom_point())
}
for (roi in rois){
print(ggplot(FA_df, aes(x= age_scan_years, y= .data[[roi]])) + geom_point())
}
for (roi in rois){
print(ggplot(FA_df, aes(x= age_scan_years, y= .data[[roi]])) + geom_point() + geom_smooth(method=lm))
}
View(FA_df)
ggplot(FA_df, aes(x=.data[[roi]], color=sex)) +
geom_histogram()
ggplot(FA_df, aes(x=.data[[roi]], color=sex)) +
geom_histogram(fill=sex)
ggplot(FA_df, aes(x=.data[[roi]], fill =sex, color=sex)) +
geom_histogram()
ggplot(FA_df, aes(x= maze_accuracy_pct, fill =sex, color=sex)) +
geom_histogram())
ggplot(FA_df, aes(x= maze_accuracy_pct, fill =sex, color=sex)) +
geom_histogram()
ggplot(FA_df, aes(x= maze_accuracy_pct) +
geom_histogram()
ggplot(FA_df, aes(x= maze_accuracy_pct)) +
ggplot(FA_df, aes(x= maze_accuracy_pct)) +
geom_histogram()
ggplot(FA_df, aes(x= maze_accuracy_pct, fill =sex, color=sex)) +
geom_histogram()
#Normality Check
shapiro.test(FA_df$maze_accuracy_pct)
#Normality Check
maze_norm <- shapiro.test(FA_df$maze_accuracy_pct)
View(maze_norm)
temp_subinfo <- sub_info_master %>% dplyr::select(subject_id,age_group,age_scan_years,maze_accuracy_pct,maze_moves,maze_path_efficiency,sex.1,repo_status,FNAME)
FA_maze <-cbind(temp_subinfo,master_FA) %>% filter(!is.na(maze_accuracy_pct))
L_acc <- log(FA_maze$maze_accuracy_pct)
L_acc <- log(FA_maze$maze_accuracy_pct/1-FA_maze$maze_accuracy_pct)
FA_maze$maze_accuracy_pct
L_acc <- log(FA_maze$maze_accuracy_pct[1]/1-FA_maze$maze_accuracy_pct[1])
L_acc <- log(FA_maze$maze_accuracy_pct[1]/(1-FA_maze$maze_accuracy_pct[1]))
L_acc <- log(FA_maze$maze_accuracy_pct/(1-FA_maze$maze_accuracy_pct))
View(FA_df)
View(FA_maze)
zero_score <- filter(FA_maze$maze_accuracy_pct == 0)
zero_score <- filter(FA_maze$maze_accuracy_pct == 0.00000000)
class(FA_maze$maze_accuracy_pct)
zero_score <- FA_maze %>% filter(FA_maze$maze_accuracy_pct == 0.00000000)
View(FA_maze)
View(zero_score)
zero_score <- FA_maze[FA_maze$maze_accuracy_pct == 0.00000000]
zero_score <- FA_maze[FA_maze$maze_accuracy_pct == 0.00000000,]
View(zero_score)
FA_maze[FA_maze$maze_accuracy_pct == 0.00000000,] <- 0.00000001
