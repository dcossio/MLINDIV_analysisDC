View(ROIs)
master_FA <- read.csv(paste0(top_workdir,"JHU-skeletonized-FA.csv"), header=FALSE) %>% remove_empty(. ,which = "cols") %>% `colnames<-`(ROIs)
c(ROIs)
master_FA <- read.csv(paste0(top_workdir,"JHU-skeletonized-FA.csv"), header=FALSE) %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs))
View(ROIs)
master_FA <- read.csv(paste0(top_workdir,"JHU-skeletonized-FA.csv"), header=FALSE) %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
View(ROIs)
# Lets read in our subject information
top_workdir <-"/Users/danielacossio/Documents/Chrastil_Lab/Projects/SNAG/MIDLIFE_TBSS/"
sub_info_master <- read.csv(paste0(top_workdir,"subject_info.csv"))
master_FA <- read.csv(paste0(top_workdir,"JHU-skeletonized-FA.csv"), header=FALSE) %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
master_MD <- read.csv(paste0(top_workdir,"JHU-skeletonized-MD.csv"))  %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
master_AD <- read.csv(paste0(top_workdir,"JHU-skeletonized-AD.csv")) %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
master_RD <- read.csv(paste0(top_workdir,"JHU-skeletonized-RD.csv")) %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
ROIs <- read.table(paste0(top_workdir,"JHU-WhiteMatter-labels-1mm.txt")) %>% select(2)
# Lets read in our subject information
top_workdir <-"/Users/danielacossio/Documents/Chrastil_Lab/Projects/SNAG/MIDLIFE_TBSS/"
ROIs <- read.table(paste0(top_workdir,"JHU-WhiteMatter-labels-1mm.txt")) %>% select(2)
sub_info_master <- read.csv(paste0(top_workdir,"subject_info.csv"))
master_FA <- read.csv(paste0(top_workdir,"JHU-skeletonized-FA.csv"), header=FALSE) %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
master_MD <- read.csv(paste0(top_workdir,"JHU-skeletonized-MD.csv"))  %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
master_AD <- read.csv(paste0(top_workdir,"JHU-skeletonized-AD.csv")) %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
master_RD <- read.csv(paste0(top_workdir,"JHU-skeletonized-RD.csv")) %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
View(master_FA)
View(sub_info_master)
View(sub_info_master)
# Lets read in our subject information
top_workdir <-"/Users/danielacossio/Documents/Chrastil_Lab/Projects/SNAG/MIDLIFE_TBSS/"
ROIs <- read.table(paste0(top_workdir,"JHU-WhiteMatter-labels-1mm.txt")) %>% select(2)
sub_info_master <- read.csv(paste0(top_workdir,"subject_info.csv"))
master_FA <- read.csv(paste0(top_workdir,"JHU-skeletonized-FA.csv"), header=FALSE) %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
master_MD <- read.csv(paste0(top_workdir,"JHU-skeletonized-MD.csv"))  %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
master_AD <- read.csv(paste0(top_workdir,"JHU-skeletonized-AD.csv")) %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
master_RD <- read.csv(paste0(top_workdir,"JHU-skeletonized-RD.csv")) %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
View(master_FA)
View(sub_info_master)
for (roi in ROIs){
print(roi)
}
shapiro.test(master_FA$roi)
master_FA$roi
View(master_FA)
for (roi in ROIs){
print(roi)
}
roi
ROIs
for (roi in ROIs){
print(ROIs[roi])
}
for (roi in c(ROIs)){
print()
}
for (roi in c(ROIs)){
print(roi)
}
c(ROIs)
c(ROIs)
print(roi)
roi
c(ROIs)
for (roi in c(ROIs$V2)){
print(roi)
}
shapiro.test(master_FA$roi)
master_FA$roi
shapiro.test(master_FA$`roi`)
master_FA$paste0(roi)
paste0(roi)
master_FA$Tapetum_L
calss(master_FA$Tapetum_L)
class(master_FA$Tapetum_L)
shapiro.test(master_FA[[roi]])
df <- data.frame(matrix(ncol = 2, nrow = 0))
normcheck <- shapiro.test(master_FA[[roi]])
normcheck[[p.value]]
View(normcheck)
print(roi)
View(df)
for (roi in c(ROIs$V2)){
df <- data.frame(matrix(ncol = 2, nrow = 0))
print(roi)
normcheck <- shapiro.test(master_FA[[roi]])
if (normcheck[["p.value"]]) {
df$X1 <- roi
df$X2 <- normcheck[["p.value"]]
}
}
normality_check<- data.frame(matrix(ncol = 2, nrow = 0))
normality_check<- data.frame(matrix(ncol = 2, nrow = 0))
for (roi in c(ROIs$V2)){
df <- data.frame(matrix(ncol = 2, nrow = 0))
print(roi)
normcheck <- shapiro.test(master_FA[[roi]])
if (normcheck[["p.value"]]) {
df$X1 <- roi
df$X2 <- normcheck[["p.value"]]
normality_check <- rbind(normality_check,df)
}
}
normcheck <- shapiro.test(master_FA[[roi]])
normality_check<- data.frame(matrix(ncol = 2, nrow = 0))
for (roi in c(ROIs$V2)){
df <- data.frame(matrix(ncol = 2, nrow = 0))
print(roi)
normcheck <- shapiro.test(master_FA[[roi]])
if (normcheck[["p.value"]] < 0.05 ) {
df$X1 <- roi
df$X2 <- normcheck[["p.value"]]
normality_check <- rbind(normality_check,df)
}
}
df <- data.frame(matrix(ncol = 2, nrow = 0))
print(roi)
normcheck <- shapiro.test(master_FA[[roi]])
View(normcheck)
#Normality Check
normality_check<- data.frame(matrix(ncol = 2, nrow = 0))
for (roi in c(ROIs$V2)){
df <- data.frame(matrix(ncol = 2, nrow = 0))
print(roi)
normcheck <- shapiro.test(master_FA[[roi]])
if (normcheck[["p.value"]] < 0.05 ) {
print("not normal")
# df$X1 <- roi
# df$X2 <- normcheck[["p.value"]]
#
# normality_check <- rbind(normality_check,df)
}
}
df$X1 <- roi
roi
class(roi)
df$X1 == roi
df$X1 <- print(roi)
View(df)
normality_check<- data.frame(matrix(ncol = 2, nrow = 0))
df$X1 <- roi
df <- data.frame(matrix(ncol = 2, nrow = 1))
df$X1 <- roi
View(df)
normality_check<- data.frame(matrix(ncol = 2, nrow = 0))
for (roi in c(ROIs$V2)){
df <- data.frame(matrix(ncol = 2, nrow = 1))
print(roi)
normcheck <- shapiro.test(master_FA[[roi]])
if (normcheck[["p.value"]] < 0.05 ) {
print("not normal")
df$X1 <- roi
df$X2 <- normcheck[["p.value"]]
#
normality_check <- rbind(normality_check,df)
}
}
View(normality_check)
CheckDistribution <- function(dataframe,threshold){
normality_check<- data.frame(matrix(ncol = 2, nrow = 0))
for (roi in c(ROIs$V2)){
df <- data.frame(matrix(ncol = 2, nrow = 1))
print(roi)
normcheck <- shapiro.test(dataframe[[roi]])
if (normcheck[["p.value"]] < threshold) {
print("not normal")
df$X1 <- roi
df$X2 <- normcheck[["p.value"]]
#
normality_check <- rbind(normality_check,df)
}
}
return(print(normality_check))
}
CheckDistribution(master_FA,0.05)
FA_norm <- CheckDistribution(master_FA,0.05)
CheckDistribution <- function(dataframe,threshold){
normality_check<- data.frame(matrix(ncol = 2, nrow = 0))
for (roi in c(ROIs$V2)){
df <- data.frame(matrix(ncol = 2, nrow = 1))
print(roi)
normcheck <- shapiro.test(dataframe[[roi]])
if (normcheck[["p.value"]] < threshold) {
print("not normal")
df$X1 <- roi
df$X2 <- normcheck[["p.value"]]
#
normality_check <- rbind(normality_check,df)
}
}
return(print(normality_check))
}
# Craeting tables for html
TableOutput <- function(df){
table <- knitr::kable(df, row.names=F)%>%
kable_styling(bootstrap_options =  c("striped", "hover", "condensed")) %>%
scroll_box(width = "800px", height = "300px")
}
#Normality Check
TableOutput(CheckDistribution(master_FA,0.05))
CheckDistribution <- function(dataframe,threshold){
normality_check<- data.frame(matrix(ncol = 2, nrow = 0))
for (roi in c(ROIs$V2)){
df <- data.frame(matrix(ncol = 2, nrow = 1))
print(roi)
normcheck <- shapiro.test(dataframe[[roi]])
if (normcheck[["p.value"]] < threshold) {
print("not normal")
df$X1 <- roi
df$X2 <- normcheck[["p.value"]]
#
normality_check <- rbind(normality_check,df)
}
}
return(normality_check)
}
# Craeting tables for html
TableOutput <- function(df){
table <- knitr::kable(df, row.names=F)%>%
kable_styling(bootstrap_options =  c("striped", "hover", "condensed")) %>%
scroll_box(width = "800px", height = "300px")
}
#Normality Check
x <- CheckDistribution(master_FA,0.05)
View(x)
class(x)
#Normality Check
x <- CheckDistribution(master_FA,0.05)
TableOutput(x)
View(x)
knitr::kable(x, row.names=F) %>%
kable_styling(bootstrap_options =  c("striped", "hover", "condensed")) %>%
scroll_box(width = "800px", height = "300px")
CheckDistribution <- function(dataframe,threshold){
normality_check<- data.frame(matrix(ncol = 2, nrow = 0))
for (roi in c(ROIs$V2)){
df <- data.frame(matrix(ncol = 2, nrow = 1))
print(roi)
normcheck <- shapiro.test(dataframe[[roi]])
if (normcheck[["p.value"]] < threshold) {
print("not normal")
df$X1 <- roi
df$X2 <- normcheck[["p.value"]]
#
normality_check <- rbind(normality_check,df)
}
}
return(normality_check)
}
# Craeting tables for html
TableOutput <- function(df){
table <- knitr::kable(df, row.names=F) %>%
kable_styling(bootstrap_options =  c("striped", "hover", "condensed")) %>%
scroll_box(width = "200px", height = "300px")
}
CheckDistribution <- function(dataframe,threshold){
normality_check<- data.frame(matrix(ncol = 2, nrow = 0))
for (roi in c(ROIs$V2)){
df <- data.frame(matrix(ncol = 2, nrow = 1))
print(roi)
normcheck <- shapiro.test(dataframe[[roi]])
if (normcheck[["p.value"]] < threshold) {
print("not normal")
df$X1 <- roi
df$X2 <- normcheck[["p.value"]]
#
normality_check <- rbind(normality_check,df)
}
}
return(normality_check)
}
# Craeting tables for html
TableOutput <- function(df){
knitr::kable(df, row.names=F) %>%
kable_styling(bootstrap_options =  c("striped", "hover", "condensed")) %>%
scroll_box(width = "200px", height = "300px")
}
library(markdown)
library(ppcor)
library(ppcor)
View(sub_info_master)
View(sub_info_master)
temp_subinfo <- sub_info_master %>% select(subject_id,age_group,age_scan_years,maze_accuracy_pct,maze_moves,maze_path_efficiency,sex,repo_status,FNAME)
temp_subinfo <- sub_info_master %>% select(., subject_id,age_group,age_scan_years,maze_accuracy_pct,maze_moves,maze_path_efficiency,sex,repo_status,FNAME)
temp_subinfo <- sub_info_master %>% select(subject_id,age_group,age_scan_years,maze_accuracy_pct,maze_moves,maze_path_efficiency,sex,repo_status,FNAME)
temp_subinfo <- sub_info_master %>% dplyr::select(subject_id,age_group,age_scan_years,maze_accuracy_pct,maze_moves,maze_path_efficiency,sex,repo_status,FNAME)
View(temp_subinfo)
FA_maze <-cbind(temp,master_FA )
FA_maze <-cbind(temp_subinfo,master_FA)
x <- CheckDistribution(FA_maze,0.05)
colnames(FA_maze)
y <-pcor.test(FA_maze$`Fornix_(column_and_body_of_fornix)`, FA_maze$maze_accuracy_pct, FA_maze[,c("age_scan_years","sex")])
temp_subinfo <- sub_info_master %>% dplyr::select(subject_id,age_group,age_scan_years,maze_accuracy_pct,maze_moves,maze_path_efficiency,sex.1,repo_status,FNAME)
FA_maze <-cbind(temp_subinfo,master_FA)
y <-pcor.test(FA_maze$`Fornix_(column_and_body_of_fornix)`, FA_maze$maze_accuracy_pct, FA_maze[,c("age_scan_years","sex")])
y <-pcor.test(FA_maze$`Fornix_(column_and_body_of_fornix)`, FA_maze$maze_accuracy_pct, FA_maze[,c("age_scan_years","sex.1")])
FA_maze <-cbind(temp_subinfo,master_FA) %>% janitor::remove_empty(which = "cols")
View(FA_maze)
FA_maze <-cbind(temp_subinfo,master_FA) %>% janitor::remove_empty(which = "rows")
temp_subinfo <- sub_info_master %>% dplyr::select(subject_id,age_group,age_scan_years,maze_accuracy_pct,maze_moves,maze_path_efficiency,sex.1,repo_status,FNAME)
FA_maze <-cbind(temp_subinfo,master_FA) %>% janitor::remove_empty(which = "rows")
help(remove_empty)
FA_maze <-cbind(temp_subinfo,master_FA) %>% janitor::remove_empty(., which = "rows")
View(FA_maze)
cbind(temp_subinfo,master_FA) %>% filter(!is.na(maze_accuracy_pct))
FA_maze <-cbind(temp_subinfo,master_FA) %>% filter(!is.na(maze_accuracy_pct))
temp_subinfo <- sub_info_master %>% dplyr::select(subject_id,age_group,age_scan_years,maze_accuracy_pct,maze_moves,maze_path_efficiency,sex.1,repo_status,FNAME)
FA_maze <-cbind(temp_subinfo,master_FA) %>% filter(!is.na(maze_accuracy_pct))
y <-pcor.test(FA_maze$`Fornix_(column_and_body_of_fornix)`, FA_maze$maze_accuracy_pct, FA_maze[,c("age_scan_years","sex.1")])
View(y)
FA_maze$maze_accuracy_pct
FA_maze[[maze_accuracy_pct]]
FA_maze[maze_accuracy_pct]
FA_maze[["FA_maze$maze_accuracy_pct"]]
FA_maze[["maze_accuracy_pct"]]
View(y)
View(y)
View(y)
RunningPcorTest <- function(dataframe, task, covariates){
# Here we need a clean dataframe that contains only on wm metric (FA,AD,RD, MD) and it needs to be combined with the subject info data that we need. here i need maze accuracy, sex, and age. Also, need to remove any rows with NW
finalDF <-   data.frame(matrix(ncol = 7, nrow = 0))
for (roi in c(ROIs$V2)){
df <- data.frame(matrix(ncol = 6, nrow = 1))
print(roi)
pcortestresults <-pcor.test(dataframe[[roi]],dataframe[[task]], dataframe[, c(covariates)])
if (pcortestresults$p.value < 0.05) {
finalDF$X1 <- roi
finalDF[,2:7] <- pcortestresults
#
finalDF <- rbind(finalDF,finalDF)
}
}
}
test <- RunningPcorTest(dataframe = FA_maze,task = "maze_accuracy_pct",covariates = "age_scan_years","sex.1")
test <- RunningPcorTest(dataframe = FA_maze,task = "maze_accuracy_pct",covariates = c("age_scan_years","sex.1"))
test <- RunningPcorTest(dataframe = FA_maze,task = "maze_accuracy_pct",covariates = c("age_scan_years","sex.1"))
RunningPcorTest <- function(dataframe, task, covariates){
# Here we need a clean dataframe that contains only on wm metric (FA,AD,RD, MD) and it needs to be combined with the subject info data that we need. here i need maze accuracy, sex, and age. Also, need to remove any rows with NW
finalDF <-   data.frame(matrix(ncol = 7, nrow = 0))
for (roi in c(ROIs$V2)){
df <- data.frame(matrix(ncol = 6, nrow = 1))
print(roi)
pcortestresults <-pcor.test(dataframe[[roi]],dataframe[[task]], dataframe[, c(covariates)])
if (pcortestresults$p.value < 0.05) {
df$X1 <- roi
df[,2:7] <- pcortestresults
#
finalDF <- rbind(finalDF,df)
}
}
}
test <- RunningPcorTest(dataframe = FA_maze,task = "maze_accuracy_pct",covariates = c("age_scan_years","sex.1"))
RunningPcorTest <- function(dataframe, task, covariates){
# Here we need a clean dataframe that contains only on wm metric (FA,AD,RD, MD) and it needs to be combined with the subject info data that we need. here i need maze accuracy, sex, and age. Also, need to remove any rows with NW
finalDF <-   data.frame(matrix(ncol = 7, nrow = 0))
for (roi in c(ROIs$V2)){
df <- data.frame(matrix(ncol = 6, nrow = 1))
print(roi)
pcortestresults <-pcor.test(dataframe[[roi]],dataframe[[task]], dataframe[, c(covariates)])
if (pcortestresults$p.value < 0.05) {
df$X1 <- roi
df[,2:7] <- pcortestresults
#
finalDF <- rbind(finalDF,df)
}
}
return(finalDF)
}
test <- RunningPcorTest(dataframe = FA_maze,task = "maze_accuracy_pct",covariates = c("age_scan_years","sex.1"))
View(test)
colnames(finalDF) <- c("ROI", colnames(pcortestresults))
CheckDistribution <- function(dataframe,threshold){
normality_check<- data.frame(matrix(ncol = 2, nrow = 0))
for (roi in c(ROIs$V2)){
df <- data.frame(matrix(ncol = 2, nrow = 1))
print(roi)
normcheck <- shapiro.test(dataframe[[roi]])
if (normcheck[["p.value"]] < threshold) {
print("not normal")
df$X1 <- roi
df$X2 <- normcheck[["p.value"]]
#
normality_check <- rbind(normality_check,df)
}
}
colnames(normality_check) <- c("ROI","p.value")
return(normality_check)
}
# Craeting tables for html
TableOutput <- function(df){
knitr::kable(df, row.names=F) %>%
kable_styling(bootstrap_options =  c("striped", "hover", "condensed")) %>%
scroll_box(width = "600px", height = "300px")
}
RunningPcorTest <- function(dataframe, task, covariates){
# Here we need a clean dataframe that contains only on wm metric (FA,AD,RD, MD) and it needs to be combined with the subject info data that we need. here i need maze accuracy, sex, and age. Also, need to remove any rows with NW
finalDF <-   data.frame(matrix(ncol = 7, nrow = 0))
for (roi in c(ROIs$V2)){
df <- data.frame(matrix(ncol = 6, nrow = 1))
print(roi)
pcortestresults <-pcor.test(dataframe[[roi]],dataframe[[task]], dataframe[, c(covariates)])
if (pcortestresults$p.value < 0.05) {
df$X1 <- roi
df[,2:7] <- pcortestresults
#
finalDF <- rbind(finalDF,df)
}
}
colnames(finalDF) <- c("ROI", colnames(pcortestresults))
return(finalDF)
}
test <- RunningPcorTest(dataframe = FA_maze,task = "maze_accuracy_pct",covariates = c("age_scan_years","sex.1"))
View(test)
for (roi in c(ROIs$V2)){
df <- data.frame(matrix(ncol = 6, nrow = 1))
print(roi)
pcortestresults <-pcor.test(FA_maze[[roi]],FA_maze$maze_accuracy_pct, FA_maze[, c("age_scan_years","sex.1")])
if (pcortestresults$p.value < 0.05) {
df$X1 <- roi
df[,2:7] <- pcortestresults
#
finalDF <- rbind(finalDF,df)
}
}
testfinalDF <-   data.frame(matrix(ncol = 7, nrow = 0))
for (roi in c(ROIs$V2)){
df <- data.frame(matrix(ncol = 6, nrow = 1))
print(roi)
pcortestresults <-pcor.test(FA_maze[[roi]],FA_maze$maze_accuracy_pct, FA_maze[, c("age_scan_years","sex.1")])
if (pcortestresults$p.value < 0.05) {
df$X1 <- roi
df[,2:7] <- pcortestresults
#
testfinalDF <- rbind(finalDF,df)
}
}
testfinalDF <-   data.frame(matrix(ncol = 7, nrow = 0))
for (roi in c(ROIs$V2)){
df <- data.frame(matrix(ncol = 6, nrow = 1))
print(roi)
pcortestresults <-pcor.test(FA_maze[[roi]],FA_maze$maze_accuracy_pct, FA_maze[, c("age_scan_years","sex.1")])
if (pcortestresults$p.value < 0.05) {
df$X1 <- roi
df[,2:7] <- pcortestresults
#
testfinalDF <- rbind(testfinalDF,df)
}
}
View(testfinalDF)
View(pcortestresults)
FA_maze_results <-  RunningPcorTest(dataframe = FA_maze,task = "maze_accuracy_pct",covariates = c("age_scan_years","sex.1"))
FA_maze_results <-  RunningPcorTest(dataframe = FA_maze,task = "maze_accuracy_pct",covariates = c("age_scan_years","sex.1"))
CheckDistribution <- function(dataframe,threshold){
normality_check<- data.frame(matrix(ncol = 2, nrow = 0))
for (roi in c(ROIs$V2)){
df <- data.frame(matrix(ncol = 2, nrow = 1))
normcheck <- shapiro.test(dataframe[[roi]])
if (normcheck[["p.value"]] < threshold) {
print("not normal")
df$X1 <- roi
df$X2 <- normcheck[["p.value"]]
#
normality_check <- rbind(normality_check,df)
}
}
colnames(normality_check) <- c("ROI","p.value")
return(normality_check)
}
# Craeting tables for html
TableOutput <- function(df){
knitr::kable(df, row.names=F) %>%
kable_styling(bootstrap_options =  c("striped", "hover", "condensed")) %>%
scroll_box(width = "600px", height = "300px")
}
RunningPcorTest <- function(dataframe, task, covariates){
# Here we need a clean dataframe that contains only on wm metric (FA,AD,RD, MD) and it needs to be combined with the subject info data that we need. here i need maze accuracy, sex, and age. Also, need to remove any rows with NW
finalDF <-   data.frame(matrix(ncol = 7, nrow = 0))
for (roi in c(ROIs$V2)){
df <- data.frame(matrix(ncol = 6, nrow = 1))
pcortestresults <-pcor.test(dataframe[[roi]],dataframe[[task]], dataframe[, c(covariates)])
if (pcortestresults$p.value < 0.05) {
df$X1 <- roi
df[,2:7] <- pcortestresults
#
finalDF <- rbind(finalDF,df)
}
}
colnames(finalDF) <- c("ROI", colnames(pcortestresults))
return(finalDF)
}
FA_maze_results <-  RunningPcorTest(dataframe = FA_maze,task = "maze_accuracy_pct",covariates = c("age_scan_years","sex.1"))
ROIs <- read.table(paste0(top_workdir,"JHU-WhiteMatter-labels-1mm.txt")) %>% select(2)
# Lets read in our subject information
top_workdir <-"/Users/danielacossio/Documents/Chrastil_Lab/Projects/SNAG/MIDLIFE_TBSS/"
ROIs <- read.table(paste0(top_workdir,"JHU-WhiteMatter-labels-1mm.txt")) %>% select(2)
ROIs <- read.table(paste0(top_workdir,"JHU-WhiteMatter-labels-1mm.txt"))
View(ROIs)
ROIs <- read.table(paste0(top_workdir,"JHU-WhiteMatter-labels-1mm.txt"))
ROIs <- read.table(paste0(top_workdir,"JHU-WhiteMatter-labels-1mm.txt")) %>% select(V2)
detach("package:MASS", unload = TRUE)
library(MASS)
# Lets read in our subject information
top_workdir <-"/Users/danielacossio/Documents/Chrastil_Lab/Projects/SNAG/MIDLIFE_TBSS/"
ROIs <- read.table(paste0(top_workdir,"JHU-WhiteMatter-labels-1mm.txt")) %>% dplyr::select(V2)
sub_info_master <- read.csv(paste0(top_workdir,"subject_info.csv"))
master_FA <- read.csv(paste0(top_workdir,"JHU-skeletonized-FA.csv"), header=FALSE) %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
master_MD <- read.csv(paste0(top_workdir,"JHU-skeletonized-MD.csv"))  %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
master_AD <- read.csv(paste0(top_workdir,"JHU-skeletonized-AD.csv")) %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
master_RD <- read.csv(paste0(top_workdir,"JHU-skeletonized-RD.csv")) %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
fit <- lm(maze_accuracy_pct ~ Middle_cerebellar_peduncle * age_scan_years + sex.1)
fit <- lm(maze_accuracy_pct ~ Middle_cerebellar_peduncle * age_scan_years + sex.1, data = FA_maze)
fit <- lm(maze_accuracy_pct ~ Middle_cerebellar_peduncle * age_scan_years + sex.1, data = FA_maze)
summarise(fit)
fit <- lm(maze_accuracy_pct ~ Middle_cerebellar_peduncle * age_scan_years + sex.1, data = FA_maze)
summary(fit)
