library(ggiraphExtra)
library(moonBook)
library(nationalparkcolors)
library(gridExtra)
library(markdown)
library(ppcor)
library(mediation)
CheckDistribution <- function(dataframe,threshold){
# Purpose of this is to take in a tbss csv dataframe and checking the distribution of each ROI. Then it spits out all the regions that are not normally distributed.
normality_check<- data.frame(matrix(ncol = 2, nrow = 0))
for (roi in c(ROIs$V2)){
df <- data.frame(matrix(ncol = 2, nrow = 1))
normcheck <- shapiro.test(dataframe[[roi]])
if (normcheck[["p.value"]] < threshold) {
df$X1 <- roi
df$X2 <- normcheck[["p.value"]]
#
normality_check <- rbind(normality_check,df)
}
}
colnames(normality_check) <- c("ROI","p.value")
return(normality_check)
}
# Craeting tables for html
TableOutput <- function(df, style, width, height){
if (style == "classic"){
knitr::kable(df, row.names=F) %>% kable_classic(full_width = F, html_font = "Cambria")
} else {
knitr::kable(df, row.names=F) %>% kable_styling(bootstrap_options =  c("striped", "hover", "condensed")) %>% scroll_box(width = paste0(width,"px"), height = paste0(height,"px"))
}
}
RunningPcorTest <- function(dataframe, task, covariates){
# Here we need a clean dataframe that contains only on wm metric (FA,AD,RD, MD) and it needs to be combined with the subject info data that we need. here i need maze accuracy, sex, and age. Also, need to remove any rows with NW
dataframe <-dataframe %>% filter(!is.na(dataframe[[task]]))
ROIs <- ROIs %>% filter(!V2 %in% c(ROIs2Ignore))
finalDF <-   data.frame(matrix(ncol = 7, nrow = 0))
for (roi in c(ROIs$V2)){
df <- data.frame(matrix(ncol = 6, nrow = 1))
pcortestresults <-pcor.test(dataframe[[roi]],dataframe[[task]], dataframe[, c(covariates)])
#if (pcortestresults$p.value < 0.05) {
df$X1 <- roi
df[,2:7] <- pcortestresults
#
finalDF <- rbind(finalDF,df)
#}
}
colnames(finalDF) <- c("ROI", colnames(pcortestresults))
return(finalDF)
}
AprioriPcorTest <-  function(dataframe,task, covariates){
# Here we have our list of ROIS
list_rois <- c("fornix_body", "fornix_R", "fornix_L","Cingulum_(cingulate_gyrus)_R","Cingulum_(cingulate_gyrus)_L","Cingulum_(hippocampus)_R", "Cingulum_(hippocampus)_L")
DF <-dataframe %>% filter(!is.na(dataframe[[task]]))
finalDF <- data.frame(matrix(ncol = 7, nrow = 0))
for (roi in c(list_rois)){
df <- data.frame(matrix(ncol = 6, nrow = 1))
pcortestresults <- pcor.test(DF[[roi]],DF[[task]],DF[, c(covariates)],method = "spearman")
#
df$X1 <- roi
df[,2:7] <- pcortestresults
#   #
finalDF <- rbind(finalDF,df)
#
}
colnames(finalDF) <- c("ROI", colnames(pcortestresults))
return(finalDF)
}
GetAprioriDF <- function(dataframe){
# List of a prior rois
apriori_ROIS <- c("Fornix_(column_and_body_of_fornix)","Fornix_(cres)_/_Stria_terminalis_(can_not_be_resolved_with_current_resolution)_R","Fornix_(cres)_/_Stria_terminalis_(can_not_be_resolved_with_current_resolution)_L", "Cingulum_(cingulate_gyrus)_R","Cingulum_(cingulate_gyrus)_L","Cingulum_(hippocampus)_R", "Cingulum_(hippocampus)_L")
# clean up the names
df <- dataframe %>% dplyr::select(. ,apriori_ROIS) %>% `colnames<-`(c("fornix_body", "fornix_R", "fornix_L","Cingulum_(cingulate_gyrus)_R","Cingulum_(cingulate_gyrus)_L","Cingulum_(hippocampus)_R", "Cingulum_(hippocampus)_L"))
return(df)
}
WholeBrainReg <- function(DF,task){
DF <-DF %>% filter(!is.na(DF[[task]]))
finalDF <- vector(mode='list', length=nrow(OtherROIS))
for (roi in 1:nrow(OtherROIS)){
finalDF[[roi]] <- broom::tidy(lm(DF[[task]] ~ DF[[OtherROIS[roi,]]] + sex.1 + age_scan_years, data = DF))
names(finalDF)[roi] <- OtherROIS[roi,]
finalDF[[roi]]["term"][2,] <- OtherROIS[roi,]
finalDF[[roi]]["term"][3,] <- "sex"
finalDF[[roi]]["term"][4,] <- "age"
}
return(finalDF)
}
ExtractSigROIs <- function(DF,pval){
#The list from the wholebrainreg function eneds to be input in this. Set p-val
ROIs2Check <- c()
index <- 0
for (roi in names(DF)){
modelsummary <- as.data.frame(DF[[roi]])
modelsummary <- filter(modelsummary, !(term == "(Intercept)"))
y <- sum(modelsummary$p.value < pval)
if (y > 0){
ROIs2Check[length(ROIs2Check)+ 1] <- roi
}
}
return(ROIs2Check)
}
# Lets read in our subject information
top_workdir <-"/Users/danielacossio/Documents/Chrastil_Lab/Projects/SNAG/MIDLIFE_TBSS/"
# laptop path "/Users/danielacossio/Library/CloudStorage/GoogleDrive-dcossio1@uci.edu/Other computers/My iMac/Chrastil_Lab/Projects/SNAG/MIDLIFE_TBSS/"
ROIs <- read.table(paste0(top_workdir,"JHU-WhiteMatter-labels-1mm.txt")) %>% dplyr::select(V2)
sub_info_master <- read.csv(paste0(top_workdir,"subject_info.csv"))
raw_FA <- read.csv(paste0(top_workdir,"JHU-skeletonized-FA.csv"), header=FALSE) %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
raw_MD <- read.csv(paste0(top_workdir,"JHU-skeletonized-MD.csv"))  %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
raw_AD <- read.csv(paste0(top_workdir,"JHU-skeletonized-AD.csv")) %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
raw_RD <- read.csv(paste0(top_workdir,"JHU-skeletonized-RD.csv")) %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
ggplot(FA_temp,aes(y=loop_de_rad3_degree,x=`Cingulum_(cingulate_gyrus)_L`,color=sex,1))+geom_point()
FA_temp <- FA %>% filter(!is.na(FA[["loop_de_rad3_degree"]]))
# Lets read in our subject information
top_workdir <-"/Users/danielacossio/Documents/Chrastil_Lab/Projects/SNAG/MIDLIFE_TBSS/"
# laptop path "/Users/danielacossio/Library/CloudStorage/GoogleDrive-dcossio1@uci.edu/Other computers/My iMac/Chrastil_Lab/Projects/SNAG/MIDLIFE_TBSS/"
ROIs <- read.table(paste0(top_workdir,"JHU-WhiteMatter-labels-1mm.txt")) %>% dplyr::select(V2)
sub_info_master <- read.csv(paste0(top_workdir,"subject_info.csv"))
raw_FA <- read.csv(paste0(top_workdir,"JHU-skeletonized-FA.csv"), header=FALSE) %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
raw_MD <- read.csv(paste0(top_workdir,"JHU-skeletonized-MD.csv"))  %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
raw_AD <- read.csv(paste0(top_workdir,"JHU-skeletonized-AD.csv")) %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
raw_RD <- read.csv(paste0(top_workdir,"JHU-skeletonized-RD.csv")) %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
FA <- cbind(sub_info_master,raw_FA)
FA_temp <- FA %>% filter(!is.na(FA[["loop_de_rad3_degree"]]))
ggplot(FA_temp,aes(y=loop_de_rad3_degree,x=`Cingulum_(cingulate_gyrus)_L`,color=sex,1))+geom_point()
ggplot(FA_temp,aes(y=loop_de_rad3_degree,x=`Cingulum_(cingulate_gyrus)_L`,color=sex,1))+geom_point()+
geom_smooth(formula = y ~ x, method = "lm")
ggplot(FA_temp,aes(y=loop_de_rad3_degree,x=`Cingulum_(cingulate_gyrus)_L`,color=sex,1))+geom_point()+
geom_smooth(formula = y ~ x, method = "lm")+
labs(x= "Quantitative Anisotropy", y= "Proportion of correct trials" ) +
theme(legend.position = "none") +
stat_cor(method = "spearman", label.x.npc = 0.70, label.y.npc = 1) +
stat_regline_equation( aes(label = ..rr.label..)) +
font("xlab", size=30)+
font("ylab", size=30)
FA_temp <- FA %>% filter(!is.na(FA[["loop_de_avg_degree"]]))
ggplot(FA_temp,aes(y=loop_de_rad3_degree,x=`Cingulum_(cingulate_gyrus)_L`,color=sex,1))+geom_point()+
geom_smooth(formula = y ~ x, method = "lm")+
labs(x= "Quantitative Anisotropy", y= "Proportion of correct trials" ) +
theme(legend.position = "none") +
stat_cor(method = "spearman", label.x.npc = 0.70, label.y.npc = 1) +
stat_regline_equation( aes(label = ..rr.label..)) +
font("xlab", size=30)+
font("ylab", size=30)
FA_temp <- FA %>% filter(!is.na(FA[["loop_de_avg_degree"]]))
ggplot(FA_temp,aes(y=loop_de_avg_degree,x=`Cingulum_(cingulate_gyrus)_L`,color=sex,1))+geom_point()+
geom_smooth(formula = y ~ x, method = "lm")+
labs(x= "Quantitative Anisotropy", y= "Proportion of correct trials" ) +
theme(legend.position = "none") +
stat_cor(method = "spearman", label.x.npc = 0.70, label.y.npc = 1) +
stat_regline_equation( aes(label = ..rr.label..)) +
font("xlab", size=30)+
font("ylab", size=30)
View(raw_MD)
FA_temp <- FA %>% filter(!is.na(FA[["loop_de_avg_degree"]]))
ggplot(FA_temp,aes(y=loop_de_avg_degree,x=`Cingulum_(cingulate_gyrus)_R`,color=sex,1))+geom_point()+
geom_smooth(formula = y ~ x, method = "lm")+
labs(x= "Quantitative Anisotropy", y= "Proportion of correct trials" ) +
theme(legend.position = "none") +
stat_cor(method = "spearman", label.x.npc = 0.70, label.y.npc = 1) +
stat_regline_equation( aes(label = ..rr.label..)) +
font("xlab", size=30)+
font("ylab", size=30)
FA_temp <- FA %>% filter(!is.na(FA[["loop_de_avg_degree"]]))
ggplot(FA_temp,aes(y=loop_de_avg_degree,x=`Cingulum_(cingulate_gyrus)_L`,color=sex,1))+geom_point()+
geom_smooth(formula = y ~ x, method = "lm")+
labs(x= "Quantitative Anisotropy", y= "Proportion of correct trials" ) +
theme(legend.position = "none") +
stat_cor(method = "spearman", label.x.npc = 0.70, label.y.npc = 1) +
stat_regline_equation( aes(label = ..rr.label..)) +
font("xlab", size=30)+
font("ylab", size=30)
FA_temp <- FA %>% filter(!is.na(FA[["loop_de_avg_degree"]]))
ggplot(FA_temp,aes(y=loop_de_avg_degree,x=`Cingulum_(cingulate_gyrus)_L`,color=sex,1))+geom_point()+
geom_smooth(formula = y ~ x, method = "lm")+
labs(x= "Fractional Anisotropy", y= "Average Degrees Traveled" ) +
theme(legend.position = "none") +
stat_cor(method = "spearman", label.x.npc = 0.70, label.y.npc = 1) +
stat_regline_equation( aes(label = ..rr.label..)) +
font("xlab", size=30)+
font("ylab", size=30)
ggplot(FA_temp,aes(y=loop_de_avg_degree,x=`Cingulum_(cingulate_gyrus)_L`,color=sex,1))+geom_point()+
geom_smooth(formula = y ~ x, method = "lm")+
labs(x= "Fractional Anisotropy", y= "Average Degrees Traveled" )
paletteer::paletteer_c(vapoRwave)
paletteer_d(`"rtist::klimt"`)
paleteer::paletteer_d(`"rtist::klimt"`)
library(paletteer)
paleteer::paletteer_d(`"rtist::klimt"`)
paleteer::paletteer_d(`"rtist::klimt"`)
library(mediation)
library(paletteer)
paleteer::paletteer_d(`rtist::klimt`)
paletteer_d(`"nord::silver_mine"`)
paletteer_d(`"NatParksPalettes::Saguaro"`)
paletteer_d(`"`"NatParksPalettes::Yellowstone"`"`)
paletteer_d(`"`"NatParksPalettes::Yellowstone`)
""
paletteer_d(`"`"NatParksPalettes::Yellowstone"`)
paletteer_d(`"NatParksPalettes::Yellowstone"`)
paletteer_d(`"LaCroixColoR::Pamplemousse"`)
paletteer_d(`"LaCroixColoR::MelonPomelo"`)
ggplot(FA_temp,aes(y=loop_de_avg_degree,x=`Cingulum_(cingulate_gyrus)_L`,color=sex,1))+geom_point()+
geom_smooth(formula = y ~ x, method = "lm")+
scale_color_manual(values = c('##4F5791FF','##F9E7C2FF')
)
ggplot(FA_temp,aes(y=loop_de_avg_degree,x=`Cingulum_(cingulate_gyrus)_L`,color=sex,1))+geom_point()+
geom_smooth(formula = y ~ x, method = "lm")+
scale_color_manual(values = c('#4F5791FF','#F9E7C2FF'))
ggplot(FA_temp,aes(y=loop_de_avg_degree,x=`Cingulum_(cingulate_gyrus)_L`,color=sex,1))+geom_point() +
geom_smooth(formula = y ~ x, method = "lm")+
scale_color_manual(values = c('#4F5791FF','#F9E7C2FF'))
ggplot(FA_temp,aes(y=loop_de_avg_degree,x=`Cingulum_(cingulate_gyrus)_L`,color=sex,1))+geom_point() +
geom_smooth(formula = y ~ x, method = "lm")+
scale_color_manual(values = c('#4F5791FF','#F9E7C2FF')) +
theme(
axis.title.x = element_text(vjust = -4, size = 16),
axis.title.y = element_text(vjust = 8, size = 16),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
panel.background = element_blank(),
panel.grid.major = element_blank(),
axis.line = element_line(colour = "black"),
plot.margin = margin(1, 2, 1, 1.5, "cm"),
plot.title = element_text(
hjust = 0.5,
vjust = 2,
size = 16,
face = "bold"
)
)
paletteer_d(`"LaCroixColoR::MelonPomelo"`)
ggplot(FA_temp,aes(y=loop_de_avg_degree,x=`Cingulum_(cingulate_gyrus)_L`,color=sex,1))+geom_point() +
geom_smooth(formula = y ~ x, method = "lm")+
scale_color_manual(values = c('#4F5791FF','#EE404EFF')) +
theme(
axis.title.x = element_text(vjust = -4, size = 16),
axis.title.y = element_text(vjust = 8, size = 16),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
panel.background = element_blank(),
panel.grid.major = element_blank(),
axis.line = element_line(colour = "black"),
plot.margin = margin(1, 2, 1, 1.5, "cm"),
plot.title = element_text(
hjust = 0.5,
vjust = 2,
size = 16,
face = "bold"
)
)
TableOutput(AprioriPcorTest(dataframe = male_apriori_FA, task ="loop_ae_avg_m",covariates = c("age_scan_years")), "classic", 400, 200)
TableOutput(AprioriPcorTest(dataframe = apriori_FA, task ="maze_accuracy_pct",covariates = c("sex.1","age_scan_years")),"classic",500,300)
library(ggplot2)
#(plyr)
library(tidyverse)
# library(dplyr)
# library(tidyr)
library(stringr)
library(kableExtra)
# library(data.table)
# library(network)
# library(tidygraph)
# library(ggraph)
# library(igraph)
# library(networkD3)
# library(CINNA)
# library(umap)
# library(plotly)
#library(factoextra)
#library(lsr)
# library(car)
library(ggpubr)
#library(entropy)
#library(ds4psy)
# library(pROC)
#library(devtools)
#library(BRRR)
#library(stats)
#library(afex)
library(knitr)
library(janitor)
library(car)
library(ggiraph)
library(ggiraphExtra)
library(moonBook)
library(nationalparkcolors)
library(gridExtra)
library(markdown)
library(ppcor)
library(mediation)
TableOutput(AprioriPcorTest(dataframe = apriori_FA, task ="maze_accuracy_pct",covariates = c("sex.1","age_scan_years")),"classic",500,300)
#  Creating our data frame  by taking apriori rois and also renaming them for a clean name and binding them with or subject information
apriori_FA <- GetAprioriDF(raw_FA) %>% cbind(sub_info_master, .)
male_apriori_FA <- GetAprioriDF(raw_FA) %>% cbind(sub_info_master, .) %>% filter(sex == "Male")
female_apriori_FA <- GetAprioriDF(raw_FA) %>% cbind(sub_info_master, .) %>% filter(sex == "Female")
TableOutput(AprioriPcorTest(dataframe = apriori_FA, task ="maze_accuracy_pct",covariates = c("sex.1","age_scan_years")),"classic",500,300)
RunningPcorTest <- function(dataframe, task, covariates){
# Here we need a clean dataframe that contains only on wm metric (FA,AD,RD, MD) and it needs to be combined with the subject info data that we need. here i need maze accuracy, sex, and age. Also, need to remove any rows with NW
dataframe <-dataframe %>% filter(!is.na(dataframe[[task]]))
ROIs <- ROIs %>% filter(!V2 %in% c(ROIs2Ignore))
finalDF <-   data.frame(matrix(ncol = 7, nrow = 0))
for (roi in c(ROIs$V2)){
df <- data.frame(matrix(ncol = 6, nrow = 1))
pcortestresults <-pcor.test(dataframe[[roi]],dataframe[[task]], dataframe[, c(covariates)])
if (pcortestresults$p.value < 0.05) {
df$X1 <- roi
df[,2:7] <- pcortestresults
#
finalDF <- rbind(finalDF,df)
}
}
colnames(finalDF) <- c("ROI", colnames(pcortestresults))
return(finalDF)
}
#  GEt or males and females seperated
ROIs2Ignore <- c("Fornix_(column_and_body_of_fornix)","Fornix_(cres)_/_Stria_terminalis_(can_not_be_resolved_with_current_resolution)_R","Fornix_(cres)_/_Stria_terminalis_(can_not_be_resolved_with_current_resolution)_L", "Cingulum_(cingulate_gyrus)_R","Cingulum_(cingulate_gyrus)_L","Cingulum_(hippocampus)_R", "Cingulum_(hippocampus)_L")
OtherROIS <- ROIs %>% filter(!V2 %in% c(ROIs2Ignore))
Master_FA <- cbind(sub_info_master,raw_FA) %>% dplyr::select(-c(ROIs2Ignore))
male_FA <- Master_FA %>% filter(sex == "Male")
female_FA <- Master_FA %>% filter(sex == "Female")
finalDF <- vector(mode='list', length=nrow(OtherROIS))
for (roi in 1:nrow(OtherROIS)){
finalDF[[roi]] <- broom::tidy(lm(maze_accuracy_pct ~ Master_FA[[OtherROIS[roi,]]] + sex.1 + age_scan_years, data = Master_FA))
names(finalDF)[roi] <- OtherROIS[roi,]
finalDF[[roi]]["term"][2,] <- OtherROIS[roi,]
finalDF[[roi]]["term"][3,] <- "sex"
finalDF[[roi]]["term"][4,] <- "age"
}
ROIs2Check <- c()
index <- 0
for (roi in names(finalDF)){
modelsummary <- as.data.frame(finalDF[[roi]])
modelsummary <- filter(modelsummary, !(term == "(Intercept)"))
y <- sum(modelsummary$p.value < 0.05)
if (y > 0){
ROIs2Check[length(ROIs2Check)+ 1] <- roi
}
}
TableOutput(as.data.frame(ROIs2Check),"none", 500, 200)
View(finalDF)
finalDF[["Middle_cerebellar_peduncle"]]
finalDF[["Pontine_crossing_tract_(a_part_of_MCP)"]]
finalDF[["Genu_of_corpus_callosum"]]
finalDF[["Body_of_corpus_callosum"]]
finalDF[["Splenium_of_corpus_callosum"]]
finalDF[["Corticospinal_tract_R"]]
finalDF[["Corticospinal_tract_L"]]
finalDF[["Medial_lemniscus_R"]]
finalDF[["Medial_lemniscus_L"]]
finalDF[["Inferior_cerebellar_peduncle_R"]]
finalDF[["Superior_cerebellar_peduncle_R"]]
finalDF[["Superior_cerebellar_peduncle_L"]]
finalDF[["Cerebral_peduncle_R"]]
finalDF[["Anterior_corona_radiata_R"]]
finalDF[["Anterior_corona_radiata_L"]]
names(ROIs2Check)
names(ROIs2Check)
ROIs2Check
ROIs2Check[1]
for (roi in ROIs2Check){
print(roi)
# modelsummary <- as.data.frame(finalDF[[roi]])
# modelsummary <- filter(modelsummary, !(term == "(Intercept)"))
#
# y <- sum(modelsummary$p.value < 0.05)
# if (y > 0){
#   ROIs2Check[length(ROIs2Check)+ 1] <- roi
# }
}
print(roi)
SigROIs <- as.data.frame(finalDF[[roi]])
View(SigROIs)
SigROIs <- filter(modelsummary, (term == roi))
View(SigROIs)
MLRresults <- c()
MLRresults <- c()
index <- 0
for (roi in ROIs2Check){
print(roi)
SigROIs <- as.data.frame(finalDF[[roi]])
SigROIs <- filter(modelsummary, (term == roi))
if (SigROIs$p.value < 0.05 ){
MLRresults[length(MLRresults)+ 1] <- roi
}
}
SigROIs <- as.data.frame(finalDF[[roi]])
SigROIs <- filter(SigROIs, (term == roi))
View(SigROIs)
MLRresults <- c()
index <- 0
for (roi in ROIs2Check){
print(roi)
SigROIs <- as.data.frame(finalDF[[roi]])
SigROIs <- filter(SigROIs, (term == roi))
if (SigROIs$p.value < 0.05 ){
MLRresults[length(MLRresults)+ 1] <- roi
}
}
MLRresults
DF <-male_FA %>% filter(!is.na(male_FA[["maze_accuracy_pct"]]))
finalDF <- data.frame(matrix(ncol = 7, nrow = 0))
DF <-male_FA %>% filter(!is.na(male_FA[["maze_accuracy_pct"]]))
finalDF <- data.frame(matrix(ncol = 7, nrow = 0))
list_rois <- c("Middle_cerebellar_peduncle", "Medial_lemniscus_R","Superior_fronto-occipital_fasciculus_(could_be_a_part_of_anterior_internal_capsule)_R","Superior_fronto-occipital_fasciculus_(could_be_a_part_of_anterior_internal_capsule)_L")
for (roi in c(list_rois)){
df <- data.frame(matrix(ncol = 6, nrow = 1))
pcortestresults <- pcor.test(DF[[roi]],DF[["maze_accuracy_pct"]],DF[, c("age_scan_years")],method = "spearman")
#
df$X1 <- roi
df[,2:7] <- pcortestresults
#   #
finalDF <- rbind(finalDF,df)
#
}
View(finalDF)
DF <-male_FA %>% filter(!is.na(male_FA[["maze_accuracy_pct"]]))
finalDF <- data.frame(matrix(ncol = 7, nrow = 0))
list_rois <- c("Middle_cerebellar_peduncle", "Medial_lemniscus_R","Superior_fronto-occipital_fasciculus_(could_be_a_part_of_anterior_internal_capsule)_R","Superior_fronto-occipital_fasciculus_(could_be_a_part_of_anterior_internal_capsule)_L")
for (roi in c(list_rois)){
df <- data.frame(matrix(ncol = 6, nrow = 1))
pcortestresults <- pcor.test(DF[[roi]],DF[["maze_accuracy_pct"]],DF[, c("age_scan_years")],method = "spearman")
#
df$X1 <- roi
df[,2:7] <- pcortestresults
#   #
finalDF <- rbind(finalDF,df)
#
}
colnames(finalDF) <- c("ROI", colnames(pcortestresults))
DF <-female_FA %>% filter(!is.na(female_FA[["maze_accuracy_pct"]]))
finalDF <- data.frame(matrix(ncol = 7, nrow = 0))
list_rois <- c("Middle_cerebellar_peduncle", "Medial_lemniscus_R","Superior_fronto-occipital_fasciculus_(could_be_a_part_of_anterior_internal_capsule)_R","Superior_fronto-occipital_fasciculus_(could_be_a_part_of_anterior_internal_capsule)_L")
for (roi in c(list_rois)){
df <- data.frame(matrix(ncol = 6, nrow = 1))
pcortestresults <- pcor.test(DF[[roi]],DF[["maze_accuracy_pct"]],DF[, c("age_scan_years")],method = "spearman")
#
df$X1 <- roi
df[,2:7] <- pcortestresults
#   #
finalDF <- rbind(finalDF,df)
#
}
colnames(finalDF) <- c("ROI", colnames(pcortestresults))
View(finalDF)
View(pcortestresults)
cor.test(male_FA$age_scan_years, male_FA$maze_accuracy_pct)
cor.test(male_FA$maze_accuracy_pct, male_FA$Middle_cerebellar_peduncle)
cor.test(male_FA$maze_accuracy_pct, male_FA$Middle_cerebellar_peduncle, method = "spearman")
shapiro.test(male_FA$maze_accuracy_pct)
shapiro.test(female_FA$maze_accuracy_pct)
cor.test(male_FA$maze_accuracy_pct, male_FA$Middle_cerebellar_peduncle, method = "spearman", use="complete.obs")
cor.test(male_FA$maze_accuracy_pct, male_FA$Middle_cerebellar_peduncle, method = "spearman", use="complete.obs", exact=FALSE)
cor.test(male_FA$maze_accuracy_pct, male_FA$`Superior_fronto-occipital_fasciculus_(could_be_a_part_of_anterior_internal_capsule)_R`, method = "spearman", use="complete.obs", exact=FALSE)
cor.test(female_FA$maze_accuracy_pct, female_FA$`Superior_fronto-occipital_fasciculus_(could_be_a_part_of_anterior_internal_capsule)_R`, method = "spearman", use="complete.obs", exact=FALSE)
#  GEt or males and females seperated
ROIs2Ignore <- c("Fornix_(column_and_body_of_fornix)","Fornix_(cres)_/_Stria_terminalis_(can_not_be_resolved_with_current_resolution)_R","Fornix_(cres)_/_Stria_terminalis_(can_not_be_resolved_with_current_resolution)_L", "Cingulum_(cingulate_gyrus)_R","Cingulum_(cingulate_gyrus)_L","Cingulum_(hippocampus)_R", "Cingulum_(hippocampus)_L")
OtherROIS <- ROIs %>% filter(!V2 %in% c(ROIs2Ignore))
Master_MD <- cbind(sub_info_master,raw_MD) %>% dplyr::select(-c(ROIs2Ignore))
male_MD <- Master_MD %>% filter(sex == "Male")
female_MD <- Master_MD %>% filter(sex == "Female")
TableOutput(RunningPcorTest(Master_MD,"maze_accuracy_pct", c("sex.1", "age_scan_years")),  "classic",500,300)
finalDF <- vector(mode='list', length=nrow(OtherROIS))
for (roi in 1:nrow(OtherROIS)){
finalDF[[roi]] <- broom::tidy(lm(maze_accuracy_pct ~ Master_MD[[OtherROIS[roi,]]] + sex.1 + age_scan_years, data = Master_MD))
names(finalDF)[roi] <- OtherROIS[roi,]
finalDF[[roi]]["term"][2,] <- OtherROIS[roi,]
finalDF[[roi]]["term"][3,] <- "sex"
finalDF[[roi]]["term"][4,] <- "age"
}
ROIs2Check <- c()
index <- 0
for (roi in names(finalDF)){
modelsummary <- as.data.frame(finalDF[[roi]])
modelsummary <- filter(modelsummary, !(term == "(Intercept)"))
y <- sum(modelsummary$p.value < 0.05)
if (y > 0){
ROIs2Check[length(ROIs2Check)+ 1] <- roi
}
}
TableOutput(as.data.frame(ROIs2Check),"none", 500, 200)
MLRresults <- c()
index <- 0
for (roi in ROIs2Check){
print(roi)
SigROIs <- as.data.frame(finalDF[[roi]])
SigROIs <- filter(SigROIs, (term == roi))
if (SigROIs$p.value < 0.05 ){
MLRresults[length(MLRresults)+ 1] <- roi
}
}
TableOutput(as.data.frame(ROIs2Check),"none", 500, 200)
View(finalDF)
finalDF[["Body_of_corpus_callosum"]]
finalDF[["Corticospinal_tract_L"]]
finalDF[["Superior_cerebellar_peduncle_L"]][["estimate"]]
finalDF[["Superior_cerebellar_peduncle_L"]][["p.value"]]
finalDF[["Posterior_limb_of_internal_capsule_L"]]
finalDF[["Superior_corona_radiata_R"]]
DF <-male_MD %>% filter(!is.na(male_MD[["maze_accuracy_pct"]]))
finalDF <- data.frame(matrix(ncol = 7, nrow = 0))
list_rois <- c("Middle_cerebellar_peduncle", "Medial_lemniscus_R","Superior_fronto-occipital_fasciculus_(could_be_a_part_of_anterior_internal_capsule)_R","Superior_fronto-occipital_fasciculus_(could_be_a_part_of_anterior_internal_capsule)_L")
for (roi in c(list_rois)){
df <- data.frame(matrix(ncol = 6, nrow = 1))
pcortestresults <- pcor.test(DF[[roi]],DF[["maze_accuracy_pct"]],DF[, c("age_scan_years")],method = "spearman")
#
df$X1 <- roi
df[,2:7] <- pcortestresults
#   #
finalDF <- rbind(finalDF,df)
#
}
colnames(finalDF) <- c("ROI", colnames(pcortestresults))
TableOutput(finalDF, "classic",500,300)
