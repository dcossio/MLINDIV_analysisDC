maze_FA_models<- vector(mode='list', length=length(apriori_rois))
for (roi in 1:length(apriori_rois)){
maze_FA_models[[roi]] <- summary(lm(maze_accuracy_pct ~ apriori_FA[[apriori_rois[roi]]] + sex.1 + age_scan_years, data = apriori_FA))
names(maze_FA_models)[roi] <- apriori_rois[roi]
}
View(maze_FA_models)
maze_FA_models[["fornix_body"]]
apriori_rois <- c("fornix_body", "fornix_R", "fornix_L","Cingulum_(cingulate_gyrus)_R","Cingulum_(cingulate_gyrus)_L","Cingulum_(hippocampus)_R", "Cingulum_(hippocampus)_L")
maze_FA_models<- vector(mode='list', length=length(apriori_rois))
for (roi in 1:length(apriori_rois)){
maze_FA_models[[roi]] <- summary(lm(maze_accuracy_pct ~ apriori_FA[[apriori_rois[roi]]] + sex.1 + age_scan_years, data = apriori_FA))
names(maze_FA_models)[roi] <- apriori_rois[roi]
}
View(apriori_FA)
ROIs[[roi]]
ROIs[roi]
ROIs[roi,]
View(DSP_FA_models)
View(FA_maze_results)
View(maze_FA_models)
as.data.frame(maze_FA_models[["fornix_body"]])
broom::tidy(maze_FA_models[["fornix_body"]])
a <-  lm(maze_accuracy_pct ~ apriori_FA[[apriori_rois[roi]]] + sex.1 + age_scan_years, data = apriori_FA)
ab <- broom::tidy(a)
View(ab)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(cache=TRUE)
maze_FA_models<- vector(mode='list', length=length(apriori_rois))
for (roi in 1:length(apriori_rois)){
maze_FA_models[[roi]] <- broom::tidy(lm(maze_accuracy_pct ~ apriori_FA[[apriori_rois[roi]]] + sex.1 + age_scan_years, data = apriori_FA))
names(maze_FA_models)[roi] <- apriori_rois[roi]
}
View(maze_FA_models)
maze_FA_models[["fornix_body"]]
maze_FA_models[["fornix_body"]]
knitr::kable(df, row.names=F) %>%
kable_styling(bootstrap_options =  c("striped", "hover", "condensed")) %>%
scroll_box(width = "500px", height = "300px")
df <- ab
knitr::kable(df, row.names=F) %>%
kable_styling(bootstrap_options =  c("striped", "hover", "condensed")) %>%
scroll_box(width = "500px", height = "300px")
knitr::kable(df, row.names=F) %>%
kable_styling(bootstrap_options =  c("striped", "hover", "condensed")) %>%
scroll_box(width = "500px", height = "300px")
maze_FA_models[[roi]]
maze_FA_models[[roi]]["term"]
maze_FA_models[[roi]]["term"][2]
maze_FA_models[[roi]]["term"][2,]
names(maze_FA_models[[roi]]["term"][2,])
maze_FA_models[[roi]]["term"][2,]
maze_FA_models[["fornix_R"]]
maze_FA_models[["fornix_L"]]
maze_FA_models[["Cingulum_(cingulate_gyrus)_R"]]
maze_FA_models[["Cingulum_(cingulate_gyrus)_L"]]
maze_FA_models[["Cingulum_(hippocampus)_R"]]
maze_FA_models[["Cingulum_(hippocampus)_L"]]
names(maze_FA_models)
TableOutput <- function(df, width, height){
knitr::kable(df, row.names=F) %>%
kable_styling(bootstrap_options =  c("striped", "hover", "condensed")) %>%
scroll_box(width = paste0(width,"px"), height = height(width,"px"))
}
TableOutput <- function(df, width, height){
knitr::kable(df, row.names=F) %>%
kable_styling(bootstrap_options =  c("striped", "hover", "condensed")) %>%
scroll_box(width = paste0(width,"px"), height = height(height,"px"))
}
FA_maze_results <- AprioriPcorTest(dataframe = apriori_FA, task ="maze_accuracy_pct",covariates = c("sex.1","age_scan_years"))
TableOutput(FA_maze_results,"500","250")
TableOutput <- function(df, width, height){
knitr::kable(df, row.names=F) %>%
kable_styling(bootstrap_options =  c("striped", "hover", "condensed")) %>%
scroll_box(width = paste0(width,"px"), height = height(height,"px"))
}
TableOutput(FA_maze_results,"500","250")
FA_maze_results <- AprioriPcorTest(dataframe = apriori_FA, task ="maze_accuracy_pct",covariates = c("sex.1","age_scan_years"))
TableOutput(FA_maze_results,"500","250")
TableOutput <- function(df, width, height){
knitr::kable(df, row.names=F) %>%
kable_styling(bootstrap_options =  c("striped", "hover", "condensed")) %>%
scroll_box(width = paste0(width,"px"), height = paste0(height,"px"))
}
FA_maze_results <- AprioriPcorTest(dataframe = apriori_FA, task ="maze_accuracy_pct",covariates = c("sex.1","age_scan_years"))
TableOutput(FA_maze_results,"500","250")
FA_maze_results <- AprioriPcorTest(dataframe = apriori_FA, task ="maze_accuracy_pct",covariates = c("sex.1","age_scan_years"))
TableOutput(FA_maze_results,"500","300")
FA_maze_results <- AprioriPcorTest(dataframe = apriori_FA, task ="maze_accuracy_pct",covariates = c("sex.1","age_scan_years"))
TableOutput(FA_maze_results,500,300)
FA_DSP_results <- AprioriPcorTest(dataframe = apriori_FA, task ="dsp_si_true_pct",covariates = c("sex.1","age_scan_years"))
TableOutput(FA_DSP_results, 500, 300)
View(maze_FA_models)
maze_FA_models[["fornix_body"]]
TableOutput <- function(df, style, width, height){
if (style == "classic"){
knitr::kable_classic(df, full_width = F, html_font = "Cambria"))
TableOutput <- function(df, style, width, height){
if (style == "classic"){
knitr::kable_classic(df, full_width = F, html_font = "Cambria"))
TableOutput <- function(df, style, width, height){
if (style == "classic"){
knitr::kable_classic(df, full_width = F, html_font = "Cambria")
} else {
knitr::kable(df, row.names=F) %>% kable_styling(bootstrap_options =  c("striped", "hover", "condensed")) %>% scroll_box(width = paste0(width,"px"), height = paste0(height,"px"))
}
}
FA_DSP_results <- AprioriPcorTest(dataframe = apriori_FA, task ="dsp_si_true_pct",covariates = c("sex.1","age_scan_years"))
TableOutput(FA_DSP_results, "classic")
TableOutput <- function(df, style, width, height){
if (style == "classic"){
knitr::kable_classic(df, full_width = F, html_font = "Cambria")
} else {
knitr::kable(df, row.names=F) %>% kable_styling(bootstrap_options =  c("striped", "hover", "condensed")) %>% scroll_box(width = paste0(width,"px"), height = paste0(height,"px"))
}
}
FA_DSP_results <- AprioriPcorTest(dataframe = apriori_FA, task ="dsp_si_true_pct",covariates = c("sex.1","age_scan_years"))
TableOutput(FA_DSP_results, "classic")
TableOutput <- function(df, style, width, height){
if (style == "classic"){
kable_classic(df, full_width = F, html_font = "Cambria")
} else {
knitr::kable(df, row.names=F) %>% kable_styling(bootstrap_options =  c("striped", "hover", "condensed")) %>% scroll_box(width = paste0(width,"px"), height = paste0(height,"px"))
}
FA_DSP_results <- AprioriPcorTest(dataframe = apriori_FA, task ="dsp_si_true_pct",covariates = c("sex.1","age_scan_years"))
TableOutput(FA_DSP_results, "classic")
TableOutput(FA_DSP_results, "classic")
FA_DSP_results <- AprioriPcorTest(dataframe = apriori_FA, task ="dsp_si_true_pct",covariates = c("sex.1","age_scan_years"))
TableOutput(FA_DSP_results, "classic")
TableOutput <- function(df, style, width, height){
if (style == "classic"){
knitr::kable(df, row.names=F) %>% kable_classic(full_width = F, html_font = "Cambria")
} else {
knitr::kable(df, row.names=F) %>% kable_styling(bootstrap_options =  c("striped", "hover", "condensed")) %>% scroll_box(width = paste0(width,"px"), height = paste0(height,"px"))
}
}
FA_DSP_results <- AprioriPcorTest(dataframe = apriori_FA, task ="dsp_si_true_pct",covariates = c("sex.1","age_scan_years"))
TableOutput(FA_DSP_results, "classic")
FA_maze_results <- AprioriPcorTest(dataframe = apriori_FA, task ="maze_accuracy_pct",covariates = c("sex.1","age_scan_years"))
TableOutput(FA_maze_results,"none",500,300)
names(maze_FA_models)
library(ggplot2)
#(plyr)
library(tidyverse)
# library(dplyr)
# library(tidyr)
library(stringr)
library(kableExtra)
# library(data.table)
# library(network)
# library(tidygraph)
# library(ggraph)
# library(igraph)
# library(networkD3)
# library(CINNA)
# library(umap)
# library(plotly)
#library(factoextra)
#library(lsr)
# library(car)
library(ggpubr)
#library(entropy)
#library(ds4psy)
# library(pROC)
#library(devtools)
#library(BRRR)
#library(stats)
#library(afex)
library(knitr)
library(janitor)
library(car)
library(ggiraph)
library(ggiraphExtra)
library(moonBook)
library(nationalparkcolors)
library(gridExtra)
library(markdown)
library(ppcor)
library(mediation)
library(ggplot2)
#(plyr)
library(tidyverse)
# library(dplyr)
# library(tidyr)
library(stringr)
library(kableExtra)
# library(data.table)
# library(network)
# library(tidygraph)
# library(ggraph)
# library(igraph)
# library(networkD3)
# library(CINNA)
# library(umap)
# library(plotly)
#library(factoextra)
#library(lsr)
# library(car)
library(ggpubr)
#library(entropy)
#library(ds4psy)
# library(pROC)
#library(devtools)
#library(BRRR)
#library(stats)
#library(afex)
library(knitr)
library(janitor)
library(car)
library(ggiraph)
library(ggiraphExtra)
library(moonBook)
library(nationalparkcolors)
library(gridExtra)
library(markdown)
library(ppcor)
library(mediation)
library(ggplot2)
#(plyr)
library(tidyverse)
# library(dplyr)
# library(tidyr)
library(stringr)
library(kableExtra)
# library(data.table)
# library(network)
# library(tidygraph)
# library(ggraph)
# library(igraph)
# library(networkD3)
# library(CINNA)
# library(umap)
# library(plotly)
#library(factoextra)
#library(lsr)
# library(car)
library(ggpubr)
#library(entropy)
#library(ds4psy)
# library(pROC)
#library(devtools)
#library(BRRR)
#library(stats)
#library(afex)
library(knitr)
library(janitor)
library(car)
library(ggiraph)
library(ggiraphExtra)
library(moonBook)
library(nationalparkcolors)
library(gridExtra)
library(markdown)
library(ppcor)
library(mediation)
CheckDistribution <- function(dataframe,threshold){
# Purpose of this is to take in a tbss csv dataframe and checking the distribution of each ROI. Then it spits out all the regions that are not normally distributed.
normality_check<- data.frame(matrix(ncol = 2, nrow = 0))
for (roi in c(ROIs$V2)){
df <- data.frame(matrix(ncol = 2, nrow = 1))
normcheck <- shapiro.test(dataframe[[roi]])
if (normcheck[["p.value"]] < threshold) {
df$X1 <- roi
df$X2 <- normcheck[["p.value"]]
#
normality_check <- rbind(normality_check,df)
}
}
colnames(normality_check) <- c("ROI","p.value")
return(normality_check)
}
# Craeting tables for html
TableOutput <- function(df, style, width, height){
if (style == "classic"){
knitr::kable(df, row.names=F) %>% kable_classic(full_width = F, html_font = "Cambria")
} else {
knitr::kable(df, row.names=F) %>% kable_styling(bootstrap_options =  c("striped", "hover", "condensed")) %>% scroll_box(width = paste0(width,"px"), height = paste0(height,"px"))
}
}
RunningPcorTest <- function(dataframe, task, covariates){
# Here we need a clean dataframe that contains only on wm metric (FA,AD,RD, MD) and it needs to be combined with the subject info data that we need. here i need maze accuracy, sex, and age. Also, need to remove any rows with NW
finalDF <-   data.frame(matrix(ncol = 7, nrow = 0))
for (roi in c(ROIs$V2)){
df <- data.frame(matrix(ncol = 6, nrow = 1))
pcortestresults <-pcor.test(dataframe[[roi]],dataframe[[task]], dataframe[, c(covariates)])
if (pcortestresults$p.value < 0.05) {
df$X1 <- roi
df[,2:7] <- pcortestresults
#
finalDF <- rbind(finalDF,df)
}
}
colnames(finalDF) <- c("ROI", colnames(pcortestresults))
return(finalDF)
}
AprioriPcorTest <-  function(dataframe,task, covariates){
# Here we have our list of ROIS
list_rois <- c("fornix_body", "fornix_R", "fornix_L","Cingulum_(cingulate_gyrus)_R","Cingulum_(cingulate_gyrus)_L","Cingulum_(hippocampus)_R", "Cingulum_(hippocampus)_L")
DF <-dataframe %>% filter(!is.na(dataframe[[task]]))
finalDF <- data.frame(matrix(ncol = 7, nrow = 0))
for (roi in c(list_rois)){
df <- data.frame(matrix(ncol = 6, nrow = 1))
pcortestresults <- pcor.test(DF[[roi]],DF[[task]],DF[, c(covariates)],method = "spearman")
#
df$X1 <- roi
df[,2:7] <- pcortestresults
#   #
finalDF <- rbind(finalDF,df)
#
}
colnames(finalDF) <- c("ROI", colnames(pcortestresults))
return(finalDF)
}
GetAprioriDF <- function(dataframe){
# List of a prior rois
apriori_ROIS <- c("Fornix_(column_and_body_of_fornix)","Fornix_(cres)_/_Stria_terminalis_(can_not_be_resolved_with_current_resolution)_R","Fornix_(cres)_/_Stria_terminalis_(can_not_be_resolved_with_current_resolution)_L", "Cingulum_(cingulate_gyrus)_R","Cingulum_(cingulate_gyrus)_L","Cingulum_(hippocampus)_R", "Cingulum_(hippocampus)_L")
# clean up the names
df <- dataframe %>% dplyr::select(. ,apriori_ROIS) %>% `colnames<-`(c("fornix_body", "fornix_R", "fornix_L","Cingulum_(cingulate_gyrus)_R","Cingulum_(cingulate_gyrus)_L","Cingulum_(hippocampus)_R", "Cingulum_(hippocampus)_L"))
return(df)
}
# Lets read in our subject information
top_workdir <-"/Users/danielacossio/Documents/Chrastil_Lab/Projects/SNAG/MIDLIFE_TBSS/"
# laptop path "/Users/danielacossio/Library/CloudStorage/GoogleDrive-dcossio1@uci.edu/Other computers/My iMac/Chrastil_Lab/Projects/SNAG/MIDLIFE_TBSS/"
ROIs <- read.table(paste0(top_workdir,"JHU-WhiteMatter-labels-1mm.txt")) %>% dplyr::select(V2)
sub_info_master <- read.csv(paste0(top_workdir,"subject_info.csv"))
raw_FA <- read.csv(paste0(top_workdir,"JHU-skeletonized-FA.csv"), header=FALSE) %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
raw_MD <- read.csv(paste0(top_workdir,"JHU-skeletonized-MD.csv"))  %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
raw_AD <- read.csv(paste0(top_workdir,"JHU-skeletonized-AD.csv")) %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
raw_RD <- read.csv(paste0(top_workdir,"JHU-skeletonized-RD.csv")) %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
#  Creating our data frame  by taking apriori rois and also renaming them for a clean name and binding them with or subject information
apriori_FA <- GetAprioriDF(raw_FA) %>% cbind(sub_info_master, .)
male_apriori_FA <- GetAprioriDF(raw_FA) %>% cbind(sub_info_master, .) %>% filter(sex == "Male")
female_apriori_FA <- GetAprioriDF(raw_FA) %>% cbind(sub_info_master, .) %>% filter(sex == "Female")
apriori_rois <- c("fornix_body", "fornix_R", "fornix_L","Cingulum_(cingulate_gyrus)_R","Cingulum_(cingulate_gyrus)_L","Cingulum_(hippocampus)_R", "Cingulum_(hippocampus)_L")
DSP_FA_models<- vector(mode='list', length=length(apriori_rois))
for (roi in 1:length(apriori_rois)){
DSP_FA_models[[roi]] <- summary(lm(maze_accuracy_pct ~ apriori_FA[[apriori_rois[roi]]] + sex.1 + age_scan_years, data = apriori_FA))
names(DSP_FA_models)[roi] <- apriori_rois[roi]
}
DSP_FA_models[["fornix_body"]]
rad3_loopDE_male_results <- AprioriPcorTest(dataframe = male_apriori_FA, task ="loop_de_rad3_degree",covariates = c("age_scan_years"))
TableOutput(FA_DSP_male_results, "classic", 400, 200)
ave_loopDE_results <- AprioriPcorTest(dataframe = apriori_FA, task ="loop_de_avg_degree",covariates = c("sex.1","age_scan_years"))
TableOutput(ave_loopDE_results,"classic",500,300)
apriori_rois <- c("fornix_body", "fornix_R", "fornix_L","Cingulum_(cingulate_gyrus)_R","Cingulum_(cingulate_gyrus)_L","Cingulum_(hippocampus)_R", "Cingulum_(hippocampus)_L")
ave_loopDE_models<- vector(mode='list', length=length(apriori_rois))
for (roi in 1:length(apriori_rois)){
ave_loopDE_models[[roi]] <- broom::tidy(lm(loop_de_avg_degree ~ apriori_FA[[apriori_rois[roi]]] + sex.1 + age_scan_years, data = apriori_FA))
names(ave_loopDE_models)[roi] <- apriori_rois[roi]
ave_loopDE_models[[roi]]["term"][2,] <- apriori_rois[roi]
ave_loopDE_models[[roi]]["term"][3,] <- "sex"
ave_loopDE_models[[roi]]["term"][4,] <- "age"
}
library(ggplot2)
#(plyr)
library(tidyverse)
# library(dplyr)
# library(tidyr)
library(stringr)
library(kableExtra)
# library(data.table)
# library(network)
# library(tidygraph)
# library(ggraph)
# library(igraph)
# library(networkD3)
# library(CINNA)
# library(umap)
# library(plotly)
#library(factoextra)
#library(lsr)
# library(car)
library(ggpubr)
#library(entropy)
#library(ds4psy)
# library(pROC)
#library(devtools)
#library(BRRR)
#library(stats)
#library(afex)
library(knitr)
library(janitor)
library(car)
library(ggiraph)
library(ggiraphExtra)
library(moonBook)
library(nationalparkcolors)
library(gridExtra)
library(markdown)
library(ppcor)
library(mediation)
CheckDistribution <- function(dataframe,threshold){
# Purpose of this is to take in a tbss csv dataframe and checking the distribution of each ROI. Then it spits out all the regions that are not normally distributed.
normality_check<- data.frame(matrix(ncol = 2, nrow = 0))
for (roi in c(ROIs$V2)){
df <- data.frame(matrix(ncol = 2, nrow = 1))
normcheck <- shapiro.test(dataframe[[roi]])
if (normcheck[["p.value"]] < threshold) {
df$X1 <- roi
df$X2 <- normcheck[["p.value"]]
#
normality_check <- rbind(normality_check,df)
}
}
colnames(normality_check) <- c("ROI","p.value")
return(normality_check)
}
# Craeting tables for html
TableOutput <- function(df, style, width, height){
if (style == "classic"){
knitr::kable(df, row.names=F) %>% kable_classic(full_width = F, html_font = "Cambria")
} else {
knitr::kable(df, row.names=F) %>% kable_styling(bootstrap_options =  c("striped", "hover", "condensed")) %>% scroll_box(width = paste0(width,"px"), height = paste0(height,"px"))
}
}
RunningPcorTest <- function(dataframe, task, covariates){
# Here we need a clean dataframe that contains only on wm metric (FA,AD,RD, MD) and it needs to be combined with the subject info data that we need. here i need maze accuracy, sex, and age. Also, need to remove any rows with NW
finalDF <-   data.frame(matrix(ncol = 7, nrow = 0))
for (roi in c(ROIs$V2)){
df <- data.frame(matrix(ncol = 6, nrow = 1))
pcortestresults <-pcor.test(dataframe[[roi]],dataframe[[task]], dataframe[, c(covariates)])
if (pcortestresults$p.value < 0.05) {
df$X1 <- roi
df[,2:7] <- pcortestresults
#
finalDF <- rbind(finalDF,df)
}
}
colnames(finalDF) <- c("ROI", colnames(pcortestresults))
return(finalDF)
}
AprioriPcorTest <-  function(dataframe,task, covariates){
# Here we have our list of ROIS
list_rois <- c("fornix_body", "fornix_R", "fornix_L","Cingulum_(cingulate_gyrus)_R","Cingulum_(cingulate_gyrus)_L","Cingulum_(hippocampus)_R", "Cingulum_(hippocampus)_L")
DF <-dataframe %>% filter(!is.na(dataframe[[task]]))
finalDF <- data.frame(matrix(ncol = 7, nrow = 0))
for (roi in c(list_rois)){
df <- data.frame(matrix(ncol = 6, nrow = 1))
pcortestresults <- pcor.test(DF[[roi]],DF[[task]],DF[, c(covariates)],method = "spearman")
#
df$X1 <- roi
df[,2:7] <- pcortestresults
#   #
finalDF <- rbind(finalDF,df)
#
}
colnames(finalDF) <- c("ROI", colnames(pcortestresults))
return(finalDF)
}
GetAprioriDF <- function(dataframe){
# List of a prior rois
apriori_ROIS <- c("Fornix_(column_and_body_of_fornix)","Fornix_(cres)_/_Stria_terminalis_(can_not_be_resolved_with_current_resolution)_R","Fornix_(cres)_/_Stria_terminalis_(can_not_be_resolved_with_current_resolution)_L", "Cingulum_(cingulate_gyrus)_R","Cingulum_(cingulate_gyrus)_L","Cingulum_(hippocampus)_R", "Cingulum_(hippocampus)_L")
# clean up the names
df <- dataframe %>% dplyr::select(. ,apriori_ROIS) %>% `colnames<-`(c("fornix_body", "fornix_R", "fornix_L","Cingulum_(cingulate_gyrus)_R","Cingulum_(cingulate_gyrus)_L","Cingulum_(hippocampus)_R", "Cingulum_(hippocampus)_L"))
return(df)
}
# Lets read in our subject information
top_workdir <-"/Users/danielacossio/Documents/Chrastil_Lab/Projects/SNAG/MIDLIFE_TBSS/"
# laptop path "/Users/danielacossio/Library/CloudStorage/GoogleDrive-dcossio1@uci.edu/Other computers/My iMac/Chrastil_Lab/Projects/SNAG/MIDLIFE_TBSS/"
ROIs <- read.table(paste0(top_workdir,"JHU-WhiteMatter-labels-1mm.txt")) %>% dplyr::select(V2)
sub_info_master <- read.csv(paste0(top_workdir,"subject_info.csv"))
raw_FA <- read.csv(paste0(top_workdir,"JHU-skeletonized-FA.csv"), header=FALSE) %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
raw_MD <- read.csv(paste0(top_workdir,"JHU-skeletonized-MD.csv"))  %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
raw_AD <- read.csv(paste0(top_workdir,"JHU-skeletonized-AD.csv")) %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
raw_RD <- read.csv(paste0(top_workdir,"JHU-skeletonized-RD.csv")) %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
#  Creating our data frame  by taking apriori rois and also renaming them for a clean name and binding them with or subject information
apriori_FA <- GetAprioriDF(raw_FA) %>% cbind(sub_info_master, .)
male_apriori_FA <- GetAprioriDF(raw_FA) %>% cbind(sub_info_master, .) %>% filter(sex == "Male")
female_apriori_FA <- GetAprioriDF(raw_FA) %>% cbind(sub_info_master, .) %>% filter(sex == "Female")
rad3_loopPE_results <- AprioriPcorTest(dataframe = apriori_FA, task ="loop_pe_rad3_m",covariates = c("sex.1","age_scan_years"))
TableOutput(rad3_loopPE_results,"classic",500,300)
apriori_rois <- c("fornix_body", "fornix_R", "fornix_L","Cingulum_(cingulate_gyrus)_R","Cingulum_(cingulate_gyrus)_L","Cingulum_(hippocampus)_R", "Cingulum_(hippocampus)_L")
rad3_loopPE_models<- vector(mode='list', length=length(apriori_rois))
for (roi in 1:length(apriori_rois)){
rad3_loopPE_models[[roi]] <- broom::tidy(lm(loop_pe_rad3_m ~ apriori_FA[[apriori_rois[roi]]] + sex.1 + age_scan_years, data = apriori_FA))
names(rad3_loopPE_models)[roi] <- apriori_rois[roi]
rad3_loopPE_models[[roi]]["term"][2,] <- apriori_rois[roi]
rad3_loopPE_models[[roi]]["term"][3,] <- "sex"
rad3_loopPE_models[[roi]]["term"][4,] <- "age"
}
#  Creating our data frame  by taking apriori rois and also renaming them for a clean name and binding them with or subject information
apriori_MD <- GetAprioriDF(raw_MD) %>% cbind(sub_info_master, .)
male_apriori_MD <- GetAprioriDF(raw_MD) %>% cbind(sub_info_master, .) %>% filter(sex == "Male")
female_apriori_MD <- GetAprioriDF(raw_MD) %>% cbind(sub_info_master, .) %>% filter(sex == "Female")
MD_maze_results <- AprioriPcorTest(dataframe = apriori_MD, task ="maze_accuracy_pct",covariates = c("sex.1","age_scan_years"))
TableOutput(MD_maze_results,"classic",500,300)
maze_male_MD <- AprioriPcorTest(dataframe = male_apriori_MD, task ="maze_accuracy_pct",covariates = c("age_scan_years"))
TableOutput(maze_male_MD, "classic", 400, 200)
maze_female_MD <- AprioriPcorTest(dataframe = female_apriori_MD, task ="maze_accuracy_pct",covariates = c("age_scan_years"))
TableOutput(maze_female_MD, "classic", 400, 200)
maze_male_MD <- AprioriPcorTest(dataframe = male_apriori_MD, task ="maze_accuracy_pct",covariates = c("age_scan_years"))
TableOutput(maze_male_MD, "classic", 400, 200)
maze_female_MD <- AprioriPcorTest(dataframe = female_apriori_MD, task ="maze_accuracy_pct",covariates = c("age_scan_years"))
TableOutput(maze_female_MD, "classic", 400, 200)
pcortestresults <- pcor.test(apriori_MD$maze_accuracy_pct,apriori_MD$fornix_body,apriori_MD$age_scan_years,method = "spearman")
pcortestresults <- pcor.test(apriori_MD$maze_accuracy_pct,apriori_MD$fornix_body,c(apriori_MD$age_scan_years),method = "spearman")
pcortestresults <- pcor.test(apriori_MD$maze_accuracy_pct,apriori_MD$fornix_body,c("age_scan_years"),method = "spearman")
pcortestresults <- pcor.test(apriori_MD[[maze_accuracy_pct]],apriori_MD[[fornix_body]],c("age_scan_years"),method = "spearman")
pcortestresults <- pcor.test(apriori_MD[["maze_accuracy_pct"]],apriori_MD[["fornix_body"]],c("age_scan_years"),method = "spearman")
pcortestresults <- pcor.test(apriori_MD[["maze_accuracy_pct"]],apriori_MD[["fornix_body"]],DF[, c("age_scan_years")],method = "spearman")
pcortestresults <- pcor.test(apriori_MD[["maze_accuracy_pct"]],apriori_MD[["fornix_body"]],apriori_MD[, c("age_scan_years")],method = "spearman")
View(apriori_MD)
DF <-apriori_MD %>% filter(!is.na(apriori_MD[[task]]))
DF <-apriori_MD %>% filter(!is.na(apriori_MD[["task"age_scan_years]]))
DF <-apriori_MD %>% filter(!is.na(apriori_MD[["age_scan_years"]]))
pcor.test(DF[["fornix_body]],DF[["maze_accuracy_pct"]],DF[, c(age_scan_years)],method = "spearman")
pcor.test(DF[["fornix_body"]],DF[["maze_accuracy_pct"]],DF[, c(age_scan_years)],method = "spearman")
View(DF)
pcor.test(DF[["fornix_body"]],DF[["maze_accuracy_pct"]],DF[, c("age_scan_years")],method = "spearman")
View(DF)
DF <-apriori_MD %>% filter(!is.na(apriori_MD[["maze_accuracy_pct"]]))
pcor.test(DF[["fornix_body"]],DF[["maze_accuracy_pct"]],DF[, c("age_scan_years")],method = "spearman")
spcor.test(DF[["fornix_body"]],DF[["maze_accuracy_pct"]],DF[, c("age_scan_years")],method = "spearman")
