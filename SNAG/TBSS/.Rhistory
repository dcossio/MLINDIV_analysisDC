finalDF <- vector(mode='list', length=nrow(ROIs))
for (roi in 1:nrow(ROIs)){
finalDF[[roi]] <- broom::tidy(lm(maze_accuracy_pct ~ mazeFA[[ROIs[roi,]]] + sex.1 + age_scan_years, data = Master_FA))
names(finalDF)[roi] <- ROIs[roi,]
finalDF[[roi]]["term"][2,] <- ROIs[roi,]
finalDF[[roi]]["term"][3,] <- "sex"
finalDF[[roi]]["term"][4,] <- "age"
}
finalDF <- vector(mode='list', length=nrow(ROIs))
for (roi in 1:nrow(ROIs)){
finalDF[[roi]] <- broom::tidy(lm(maze_accuracy_pct ~ Master_FA[[ROIs[roi,]]] + sex.1 + age_scan_years, data = Master_FA))
names(finalDF)[roi] <- ROIs[roi,]
finalDF[[roi]]["term"][2,] <- ROIs[roi,]
finalDF[[roi]]["term"][3,] <- "sex"
finalDF[[roi]]["term"][4,] <- "age"
}
finalDF <- vector(mode='list', length=nrow(ROIs))
for (roi in 1:nrow(ROIs)){
finalDF[[roi]] <- broom::tidy(lm(maze_accuracy_pct ~ Master_FA[[ROIs[roi,]]] + sex.1 + age_scan_years, data = Master_FA))
names(finalDF)[roi] <- ROIs[roi,]
finalDF[[roi]]["term"][2,] <- ROIs[roi,]
finalDF[[roi]]["term"][3,] <- "sex"
finalDF[[roi]]["term"][4,] <- "age"
}
Master_FA[[ROIs[roi,]]]
Master_FA[[ROIs[roi,]]]
Master_FA
OtherROIS <- ROIs %>% filter(!V2 %in% c(ROIs2Ignore))
finalDF <- vector(mode='list', length=nrow(OtherROIS))
for (roi in 1:nrow(OtherROIS)){
finalDF[[roi]] <- broom::tidy(lm(maze_accuracy_pct ~ Master_FA[[OtherROIS[roi,]]] + sex.1 + age_scan_years, data = Master_FA))
names(finalDF)[roi] <- ROIs[roi,]
finalDF[[roi]]["term"][2,] <- OtherROIS[roi,]
finalDF[[roi]]["term"][3,] <- "sex"
finalDF[[roi]]["term"][4,] <- "age"
}
ROIs2Check <- c()
index <- 0
for (roi in names(finalDF)){
modelsummary <- as.data.frame(finalDF[[roi]])
modelsummary <- filter(modelsummary, !(term == "(Intercept)"))
y <- sum(modelsummary$p.value < 0.05)
if (y > 0){
ROIs2Check[length(ROIs2Check)+ 1] <- roi
}
}
TableOutput(as.data.frame(ROIs2Check),"none", 500, 200)
finalDF <- vector(mode='list', length=nrow(OtherROIS))
for (roi in 1:nrow(OtherROIS)){
finalDF[[roi]] <- broom::tidy(lm(maze_accuracy_pct ~ Master_FA[[OtherROIS[roi,]]] + sex.1 + age_scan_years, data = Master_FA))
names(finalDF)[roi] <- OtherROIS[roi,]
finalDF[[roi]]["term"][2,] <- OtherROIS[roi,]
finalDF[[roi]]["term"][3,] <- "sex"
finalDF[[roi]]["term"][4,] <- "age"
}
ROIs2Check <- c()
index <- 0
for (roi in names(finalDF)){
modelsummary <- as.data.frame(finalDF[[roi]])
modelsummary <- filter(modelsummary, !(term == "(Intercept)"))
y <- sum(modelsummary$p.value < 0.05)
if (y > 0){
ROIs2Check[length(ROIs2Check)+ 1] <- roi
}
}
TableOutput(as.data.frame(ROIs2Check),"none", 500, 200)
covs <- c("sex.1", "age_scan_years")
WB_rad3DE_results <- RunningPcorTest(Master_FA,"loop_de_rad3_degree", covs)
TableOutput(WB_rad3DE_results, "classic",500,300)
finalDF <- vector(mode='list', length=nrow(OtherROIS))
for (roi in 1:nrow(OtherROIS)){
finalDF[[roi]] <- broom::tidy(lm(loop_de_rad3_degree ~ Master_FA[[OtherROIS[roi,]]] + sex.1 + age_scan_years, data = Master_FA))
names(finalDF)[roi] <- OtherROIS[roi,]
finalDF[[roi]]["term"][2,] <- OtherROIS[roi,]
finalDF[[roi]]["term"][3,] <- "sex"
finalDF[[roi]]["term"][4,] <- "age"
}
ROIs2Check <- c()
index <- 0
for (roi in names(finalDF)){
modelsummary <- as.data.frame(finalDF[[roi]])
modelsummary <- filter(modelsummary, !(term == "(Intercept)"))
y <- sum(modelsummary$p.value < 0.05)
if (y > 0){
ROIs2Check[length(ROIs2Check)+ 1] <- roi
}
}
TableOutput(as.data.frame(ROIs2Check),"none", 500, 200)
WholeBrainReg <- function(DF,task){
finalDF <- vector(mode='list', length=nrow(OtherROIS))
for (roi in 1:nrow(OtherROIS)){
finalDF[[roi]] <- broom::tidy(lm(task ~ DF[[OtherROIS[roi,]]] + sex.1 + age_scan_years, data = DF))
names(finalDF)[roi] <- OtherROIS[roi,]
finalDF[[roi]]["term"][2,] <- OtherROIS[roi,]
finalDF[[roi]]["term"][3,] <- "sex"
finalDF[[roi]]["term"][4,] <- "age"
}
}
WB_rad3DE_FA <- WholeBrainReg(Master_FA, "loop_de_rad3_degree")
DF[[OtherROIS[roi,]]]
DF <- Master_FA
DF[[OtherROIS[roi,]]]
OtherROIS[roi,]
View(OtherROIS)
1:nrow(OtherROIS)
roi <- 1
OtherROIS[roi,]
DF[[OtherROIS[roi,]]]
WholeBrainReg <- function(DF,task){
DF <-dataframe %>% filter(!is.na(dataframe[[task]]))
finalDF <- vector(mode='list', length=nrow(OtherROIS))
for (roi in 1:nrow(OtherROIS)){
finalDF[[roi]] <- broom::tidy(lm(task ~ DF[[OtherROIS[roi,]]] + sex.1 + age_scan_years, data = DF))
names(finalDF)[roi] <- OtherROIS[roi,]
finalDF[[roi]]["term"][2,] <- OtherROIS[roi,]
finalDF[[roi]]["term"][3,] <- "sex"
finalDF[[roi]]["term"][4,] <- "age"
}
}
WB_rad3DE_FA <- WholeBrainReg(Master_FA, "loop_de_rad3_degree")
WholeBrainReg <- function(DF,task){
DF <-dataframe %>% filter(!is.na(DF[[task]]))
finalDF <- vector(mode='list', length=nrow(OtherROIS))
for (roi in 1:nrow(OtherROIS)){
finalDF[[roi]] <- broom::tidy(lm(task ~ DF[[OtherROIS[roi,]]] + sex.1 + age_scan_years, data = DF))
names(finalDF)[roi] <- OtherROIS[roi,]
finalDF[[roi]]["term"][2,] <- OtherROIS[roi,]
finalDF[[roi]]["term"][3,] <- "sex"
finalDF[[roi]]["term"][4,] <- "age"
}
}
WB_rad3DE_results <- RunningPcorTest(Master_FA,"loop_de_rad3_degree", covs)
WB_rad3DE_FA <- WholeBrainReg(Master_FA, "loop_de_rad3_degree")
WholeBrainReg <- function(DF,task){
DF <-dataframe %>% filter(!is.na(DF[[task]]))
finalDF <- vector(mode='list', length=nrow(OtherROIS))
for (roi in 1:nrow(OtherROIS)){
finalDF[[roi]] <- broom::tidy(lm(task ~ DF[[OtherROIS[roi,]]] + sex.1 + age_scan_years, data = DF))
names(finalDF)[roi] <- OtherROIS[roi,]
finalDF[[roi]]["term"][2,] <- OtherROIS[roi,]
finalDF[[roi]]["term"][3,] <- "sex"
finalDF[[roi]]["term"][4,] <- "age"
}
return(finalDF)
}
ExtractSigROIs <- function(DF,pval){
#The list from the wholebrainreg function eneds to be input in this. Set p-val
ROIs2Check <- c()
index <- 0
for (roi in names(DF)){
modelsummary <- as.data.frame(DF[[roi]])
modelsummary <- filter(modelsummary, !(term == "(Intercept)"))
y <- sum(modelsummary$p.value < pval)
if (y > 0){
ROIs2Check[length(ROIs2Check)+ 1] <- roi
}
}
return(ROIs2Check)
}
WB_rad3DE_FA <- WholeBrainReg(Master_FA, "loop_de_rad3_degree")
WholeBrainReg <- function(DF,task){
DF <-DF %>% filter(!is.na(DF[[task]]))
finalDF <- vector(mode='list', length=nrow(OtherROIS))
for (roi in 1:nrow(OtherROIS)){
finalDF[[roi]] <- broom::tidy(lm(task ~ DF[[OtherROIS[roi,]]] + sex.1 + age_scan_years, data = DF))
names(finalDF)[roi] <- OtherROIS[roi,]
finalDF[[roi]]["term"][2,] <- OtherROIS[roi,]
finalDF[[roi]]["term"][3,] <- "sex"
finalDF[[roi]]["term"][4,] <- "age"
}
return(finalDF)
}
ExtractSigROIs <- function(DF,pval){
#The list from the wholebrainreg function eneds to be input in this. Set p-val
ROIs2Check <- c()
index <- 0
for (roi in names(DF)){
modelsummary <- as.data.frame(DF[[roi]])
modelsummary <- filter(modelsummary, !(term == "(Intercept)"))
y <- sum(modelsummary$p.value < pval)
if (y > 0){
ROIs2Check[length(ROIs2Check)+ 1] <- roi
}
}
return(ROIs2Check)
}
WB_rad3DE_FA <- WholeBrainReg(Master_FA, "loop_de_rad3_degree")
<-DF %>% filter(!is.na(Master_FA[["task"loop_de_rad3_degree]]))
DF <-Master_FA %>% filter(!is.na(Master_FA[["task"loop_de_rad3_degree]]))
DF <-Master_FA %>% filter(!is.na(Master_FA["task"loop_de_rad3_degree]))
DF <-Master_FA %>% filter(!is.na(Master_FA["task"loop_de_rad3_degree]))
DF <-Master_FA %>% filter(!is.na(Master_FA[["loop_de_rad3_degree"]]))
View(DF)
DF[[OtherROIS[roi,]]]
length(loop_de_rad3_degree)
length(DF[[OtherROIS[roi,]]])
OtherROIS[roi,]
length(DF[["loop_de_rad3_degree"]])
broom::tidy(lm(task ~ DF[[OtherROIS[roi,]]] + sex.1 + age_scan_years, data = DF))
View(DF)
DF[OtherROIS[roi,]]
DF[OtherROIS[roi,]]
broom::tidy(lm(task ~ DF[OtherROIS[roi,]] + sex.1 + age_scan_years, data = DF))
task <- "loop_de_rad3_degree"
lm(task ~ DF[OtherROIS[[roi,]]] + sex.1 + age_scan_years, data = DF))
lm(task ~ DF[OtherROIS[[roi,]]] + sex.1 + age_scan_years, data = DF)
finalDF[[roi]] <- broom::tidy(lm(DF[[task]] ~ DF[OtherROIS[[roi,]]] + sex.1 + age_scan_years, data = DF))
DF[OtherROIS[[roi,]]]
DF[OtherROIS[[roi,]]]
DF[OtherROIS[roi,]]
lm(DF[[task]] ~ DF[[OtherROIS[roi,]] + sex.1 + age_scan_years, data = DF))
DF[[OtherROIS[roi,]]
]
lm(DF[[task]] ~ DF[[OtherROIS[roi,]]] + sex.1 + age_scan_years, data = DF)
WholeBrainReg <- function(DF,task){
DF <-DF %>% filter(!is.na(DF[[task]]))
finalDF <- vector(mode='list', length=nrow(OtherROIS))
for (roi in 1:nrow(OtherROIS)){
finalDF[[roi]] <- broom::tidy(lm(DF[[task]] ~ DF[[OtherROIS[roi,]]] + sex.1 + age_scan_years, data = DF))
names(finalDF)[roi] <- OtherROIS[roi,]
finalDF[[roi]]["term"][2,] <- OtherROIS[roi,]
finalDF[[roi]]["term"][3,] <- "sex"
finalDF[[roi]]["term"][4,] <- "age"
}
return(finalDF)
}
ExtractSigROIs <- function(DF,pval){
#The list from the wholebrainreg function eneds to be input in this. Set p-val
ROIs2Check <- c()
index <- 0
for (roi in names(DF)){
modelsummary <- as.data.frame(DF[[roi]])
modelsummary <- filter(modelsummary, !(term == "(Intercept)"))
y <- sum(modelsummary$p.value < pval)
if (y > 0){
ROIs2Check[length(ROIs2Check)+ 1] <- roi
}
}
return(ROIs2Check)
WB_rad3DE_FA <- WholeBrainReg(Master_FA, "loop_de_rad3_degree")
View(ExtractSigROIs)
)
WB_rad3DE_FA <- WholeBrainReg(Master_FA, "loop_de_rad3_degree")
TableOutput(ExtractSigROIs(WB_rad3DE_FA,0.05),"none", 500, 200)
View(WB_rad3DE_FA)
View(WB_rad3DE_FA)
WB_rad3DE_FA[["Medial_lemniscus_L"]]
WB_rad3DE_FA[["Inferior_cerebellar_peduncle_R"]]
WB_rad3DE_FA[["Inferior_cerebellar_peduncle_L"]]
WB_FA_male_maze <- RunningPcorTest(dataframe = male_FA, task ="loop_de_rad3_degree",covariates = c("age_scan_years"))
TableOutput(WB_FA_male_maze, "classic", 400, 200)
WB_FA_male_maze <-male_FA %>% filter(!is.na(WB_FA_male_maze[["loop_de_rad3_degree"]]))
WB_FA_male_maze <-male_FA %>% filter(!is.na(male_FA[["loop_de_rad3_degree"]]))
View(WB_FA_male_maze)
ROIs <- ROIs %>% filter(!V2 %in% c(ROIs2Ignore))
finalDF <-   data.frame(matrix(ncol = 7, nrow = 0))
pcortestresults <-pcor.test(WB_FA_male_maze[[roi]],WB_FA_male_maze[["loop_de_rad3_degree"]], WB_FA_male_maze[, c("age_scan_years")])
for (roi in c(ROIs$V2)){
df <- data.frame(matrix(ncol = 6, nrow = 1))
pcortestresults <-pcor.test(WB_FA_male_maze[[roi]],WB_FA_male_maze[["loop_de_rad3_degree"]], WB_FA_male_maze[, c("age_scan_years")])
if (pcortestresults$p.value < 0.05) {
df$X1 <- roi
df[,2:7] <- pcortestresults
#
finalDF <- rbind(finalDF,df)
}
}
colnames(finalDF) <- c("ROI", colnames(pcortestresults))
return(finalDF)
pcortestresults <-pcor.test(WB_FA_male_maze[[roi]],WB_FA_male_maze[["loop_de_rad3_degree"]], WB_FA_male_maze[, c("age_scan_years")])
View(pcortestresults)
WB_FA_male_maze <- RunningPcorTest(dataframe = male_FA, task ="loop_de_rad3_degree",covariates = c("age_scan_years"))
TableOutput(WB_FA_male_maze, "classic", 400, 200)
WB_FA_female_maze <- RunningPcorTest(dataframe = female_FA, task ="loop_de_rad3_degree",covariates = c("age_scan_years"))
TableOutput(WB_FA_male_maze, "classic", 400, 200)
RunningPcorTest <- function(dataframe, task, covariates){
# Here we need a clean dataframe that contains only on wm metric (FA,AD,RD, MD) and it needs to be combined with the subject info data that we need. here i need maze accuracy, sex, and age. Also, need to remove any rows with NW
dataframe <-dataframe %>% filter(!is.na(dataframe[[task]]))
ROIs <- ROIs %>% filter(!V2 %in% c(ROIs2Ignore))
finalDF <-   data.frame(matrix(ncol = 7, nrow = 0))
for (roi in c(ROIs$V2)){
df <- data.frame(matrix(ncol = 6, nrow = 1))
pcortestresults <-pcor.test(dataframe[[roi]],dataframe[[task]], dataframe[, c(covariates)])
#if (pcortestresults$p.value < 0.05) {
df$X1 <- roi
df[,2:7] <- pcortestresults
#
finalDF <- rbind(finalDF,df)
#}
}
colnames(finalDF) <- c("ROI", colnames(pcortestresults))
return(finalDF)
}
WB_FA_male_maze <- RunningPcorTest(dataframe = male_FA, task ="loop_de_rad3_degree",covariates = c("age_scan_years"))
TableOutput(WB_FA_male_maze, "classic", 400, 200)
WB_FA_female_maze <- RunningPcorTest(dataframe = female_FA, task ="loop_de_rad3_degree",covariates = c("age_scan_years"))
TableOutput(WB_FA_male_maze, "classic", 400, 200)
WB_FA_female_maze <- RunningPcorTest(dataframe = female_FA, task ="loop_de_rad3_degree",covariates = c("age_scan_years"))
TableOutput(WB_FA_male_maze, "none", 400, 200)
WB_FA_male_maze <- RunningPcorTest(dataframe = male_FA, task ="loop_de_rad3_degree",covariates = c("age_scan_years"))
TableOutput(WB_FA_male_maze, "none", 400, 200)
# Lets read in our subject information
top_workdir <-"/Users/danielacossio/Documents/Chrastil_Lab/Projects/SNAG/MIDLIFE_TBSS/"
# laptop path "/Users/danielacossio/Library/CloudStorage/GoogleDrive-dcossio1@uci.edu/Other computers/My iMac/Chrastil_Lab/Projects/SNAG/MIDLIFE_TBSS/"
ROIs <- read.table(paste0(top_workdir,"JHU-WhiteMatter-labels-1mm.txt")) %>% dplyr::select(V2)
sub_info_master <- read.csv(paste0(top_workdir,"subject_info.csv"))
raw_FA <- read.csv(paste0(top_workdir,"JHU-skeletonized-FA.csv"), header=FALSE) %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
raw_MD <- read.csv(paste0(top_workdir,"JHU-skeletonized-MD.csv"))  %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
raw_AD <- read.csv(paste0(top_workdir,"JHU-skeletonized-AD.csv")) %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
raw_RD <- read.csv(paste0(top_workdir,"JHU-skeletonized-RD.csv")) %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
FA <- cbind(sub_info_master,raw_FA)
FA-temp <- FA %>% filter(!is.na(FA[["loop_de_rad3_degree"]]))
FA_temp <- FA %>% filter(!is.na(FA[["loop_de_rad3_degree"]]))
model1 <- lm(loop_de_rad3_degree ~ FA_temp[["Cingulum_(cingulate_gyrus)_R"]] + sex.1 + age_scan_years, data = FA_temp))
model1 <- lm(loop_de_rad3_degree ~ FA_temp[["Cingulum_(cingulate_gyrus)_R"]] + sex.1 + age_scan_years, data = FA_temp)
equation1=function(x){coef(model1)[2]*x+coef(model1)[1]}
equation2=function(x){coef(model1)[2]*x+coef(model1)[1]+coef(model1)[3]}
model1)[2]
model1)[2]
model1[2]
View(model1)
model1[["coefficients"]]
summary(model1)
FA_temp <- FA %>% filter(!is.na(FA[["loop_de_rad3_degree"]]))
model1 <- lm(loop_de_rad3_degree ~ FA_temp[["Cingulum_(cingulate_gyrus)_R"]] + sex.1 + age_scan_years, data = FA_temp)
equation1=function(x){coef(model1)[2]*x+coef(model1)[1]}
equation2=function(x){coef(model1)[2]*x+coef(model1)[1]+coef(model1)[3]}
ggplot(radial,aes(y=FA_temp,x=`Cingulum_(cingulate_gyrus)_R`,color=sex,1))+geom_point()+
stat_function(fun=equation1,geom="line",color=scales::hue_pal()(2)[1])+
stat_function(fun=equation2,geom="line",color=scales::hue_pal()(2)[2])
FA_temp
ggplot(FA_temp,aes(y=loop_de_rad3_degree,x=`Cingulum_(cingulate_gyrus)_R`,color=sex,1))+geom_point()+
stat_function(fun=equation1,geom="line",color=scales::hue_pal()(2)[1])+
stat_function(fun=equation2,geom="line",color=scales::hue_pal()(2)[2])
ggplot(FA_temp,aes(y=loop_de_rad3_degree,x=`Cingulum_(cingulate_gyrus)_R`,color=sex,1))+geom_point()+
stat_smooth(method = "lm")
ggPredict(model1, interactive=TRUE)
model1 <- lm(loop_de_rad3_degree ~ `Cingulum_(cingulate_gyrus)_R` + sex.1 + age_scan_years, data = FA_temp)
ggPredict(model1, interactive=TRUE)
model1 <- lm(loop_de_rad3_degree ~ `Cingulum_(cingulate_gyrus)_R` + sex.1 + age_scan_years, data = FA_temp)
ggPredict(model1, interactive=TRUE)
ggplot(FA_temp,aes(y=loop_de_rad3_degree,x=`Cingulum_(cingulate_gyrus)_R`,color=sex,1))+geom_point()+
stat_smooth(method = "lm")
model1
summary(model1)
FA_temp <- FA %>% filter(!is.na(FA[["loop_de_rad3_degree"]]))
model1 <- lm(loop_de_rad3_degree ~ `Cingulum_(cingulate_gyrus)_R` + sex.1 + age_scan_years, data = FA_temp)
equation1=function(x){coef(model1)[2]*x+coef(model1)[1]}
equation2=function(x){coef(model1)[2]*x+coef(model1)[1]+coef(model1)[3]}
ggplot(FA_temp,aes(y=loop_de_rad3_degree,x=`Cingulum_(cingulate_gyrus)_R`,color=sex,1))+geom_point()+
stat_smooth(method = "lm")
ggPredict(model1, interactive=TRUE)
FA_temp <- FA %>% filter(!is.na(FA[["loop_de_rad3_degree"]]))
model1 <- lm(loop_de_rad3_degree ~ `Cingulum_(cingulate_gyrus)_R` + sex.1 + age_scan_years, data = FA_temp)
equation1=function(x){coef(model1)[2]*x+coef(model1)[1]}
equation2=function(x){coef(model1)[2]*x+coef(model1)[1]+coef(model1)[3]}
ggplot(FA_temp,aes(y=loop_de_rad3_degree,x=`Cingulum_(cingulate_gyrus)_R`,color=sex,1))+geom_point()+
stat_smooth(method = "lm")
model1 <- lm(loop_de_rad3_degree ~ `Cingulum_(cingulate_gyrus)_L` + age_scan_years, data = male_apriori_FA)
summary(model1)
model1 <- lm(loop_de_rad3_degree ~ `Cingulum_(cingulate_gyrus)_L` + age_scan_years, data = female_apriori_FA)
summary(model1)
ggplot(FA_temp,aes(y=loop_de_rad3_degree,x=`Cingulum_(cingulate_gyrus)_R`,color=sex,1))+geom_point()+
geom_smooth(formula = y ~ x, method = "lm")+
labs(x= "Quantitative Anisotropy", y= "Proportion of correct trials" ) +
theme(legend.position = "none") +
stat_cor(method = "spearman", label.x.npc = 0.70, label.y.npc = 1) +
stat_regline_equation(label.y = 0.95, label.x = 6e-05, aes(label = ..rr.label..)) +
xlim(min(newDF$V2), max(newDF$V2)) +
font("xlab", size=30)+
font("ylab", size=30)
ggplot(FA_temp,aes(y=loop_de_rad3_degree,x=`Cingulum_(cingulate_gyrus)_R`,color=sex,1))+geom_point()+
geom_smooth(formula = y ~ x, method = "lm")+
labs(x= "Quantitative Anisotropy", y= "Proportion of correct trials" ) +
theme(legend.position = "none") +
stat_cor(method = "spearman", label.x.npc = 0.70, label.y.npc = 1) +
stat_regline_equation(label.y = 0.95, label.x = 6e-05, aes(label = ..rr.label..)) +
font("xlab", size=30)+
font("ylab", size=30)
ggplot(FA_temp,aes(y=loop_de_rad3_degree,x=`Cingulum_(cingulate_gyrus)_R`,color=sex,1))+geom_point()+
geom_smooth(formula = y ~ x, method = "lm")+
labs(x= "Quantitative Anisotropy", y= "Proportion of correct trials" ) +
theme(legend.position = "none")
ggplot(FA_temp,aes(y=loop_de_rad3_degree,x=`Cingulum_(cingulate_gyrus)_R`,color=sex,1))+geom_point()+
geom_smooth(formula = y ~ x, method = "lm")+
labs(x= "Quantitative Anisotropy", y= "Proportion of correct trials" ) +
theme(legend.position = "none") +
stat_cor(method = "spearman", label.x.npc = 0.70, label.y.npc = 1)
ggplot(FA_temp,aes(y=loop_de_rad3_degree,x=`Cingulum_(cingulate_gyrus)_R`,color=sex,1))+geom_point()+
geom_smooth(formula = y ~ x, method = "lm")+
labs(x= "Quantitative Anisotropy", y= "Proportion of correct trials" ) +
theme(legend.position = "none") +
stat_cor(method = "spearman", label.x.npc = 0.70, label.y.npc = 1) +
stat_regline_equation(label.y = 0.95, label.x = 6e-05, aes(label = ..rr.label..))
ggplot(FA_temp,aes(y=loop_de_rad3_degree,x=`Cingulum_(cingulate_gyrus)_R`,color=sex,1))+geom_point()+
geom_smooth(formula = y ~ x, method = "lm")+
labs(x= "Quantitative Anisotropy", y= "Proportion of correct trials" ) +
theme(legend.position = "none") +
stat_cor(method = "spearman", label.x.npc = 0.70, label.y.npc = 1) +
stat_regline_equation( aes(label = ..rr.label..))
resid1 <- lm(loop_de_rad3_degree ~   `Cingulum_(cingulate_gyrus)_L`+ sex.1 +age_scan_years, data = female_apriori_FA)
View(resid1)
resid1 <- resid(lm(loop_de_rad3_degree ~   `Cingulum_(cingulate_gyrus)_L`+ sex.1 +age_scan_years, data = female_apriori_FA))
plot(FA_temp$loop_de_rad3_degree, resid1)
length(resid1)
length(FA_temp)
plot(female_apriori_FA$loop_de_rad3_degree, resid1)
fem_FA_temp <- FA %>% filter(!is.na(FA[["loop_de_rad3_degree"]])) %>% filter(sex == "Female")
resid1 <- resid(lm(loop_de_rad3_degree ~   `Cingulum_(cingulate_gyrus)_L`+ sex.1 +age_scan_years, data = fem_FA_temp))
plot(fem_FA_temp$loop_de_rad3_degree, resid1)
plot(FA_temp$loop_de_rad3_degree, resid2)
resid2 <- resid(lm(loop_de_rad3_degree ~   `Cingulum_(cingulate_gyrus)_L`+ sex.1 +age_scan_years, data = FA_temp))
plot(FA_temp$loop_de_rad3_degree, resid2)
plot(lm(loop_de_rad3_degree ~   `Cingulum_(cingulate_gyrus)_L`+ sex.1 +age_scan_years, data = FA_temp))
plot(lm(loop_de_rad3_degree ~   `Cingulum_(cingulate_gyrus)_L` +age_scan_years, data = fem_FA_temp))
ggplot(FA_temp,
aes(x = `Cingulum_(cingulate_gyrus)_R`,
y = loop_de_rad3_degree,
color = sex)) +
geom_point(aes(color=sex)) +
geom_smooth(method = "lm",
mapping = aes(y = predict(resid1, FA_temp)))
resid1 <- lm(loop_de_rad3_degree ~   `Cingulum_(cingulate_gyrus)_L`+ sex.1 +age_scan_years, data = fem_FA_temp)
ggplot(FA_temp,
aes(x = `Cingulum_(cingulate_gyrus)_R`,
y = loop_de_rad3_degree,
color = sex)) +
geom_point(aes(color=sex)) +
geom_smooth(method = "lm",
mapping = aes(y = predict(resid1, FA_temp)))
resid1 <- lm(loop_de_rad3_degree ~   `Cingulum_(cingulate_gyrus)_L`+age_scan_years, data = fem_FA_temp)
ggplot(FA_temp,
aes(x = `Cingulum_(cingulate_gyrus)_R`,
y = loop_de_rad3_degree,
color = sex)) +
geom_point(aes(color=sex)) +
geom_smooth(method = "lm",
mapping = aes(y = predict(resid1, FA_temp)))
resid1 <- lm(loop_de_rad3_degree ~   `Cingulum_(cingulate_gyrus)_L`, data = fem_FA_temp)
ggplot(FA_temp,
aes(x = `Cingulum_(cingulate_gyrus)_R`,
y = loop_de_rad3_degree,
color = sex)) +
geom_point(aes(color=sex)) +
geom_smooth(method = "lm",
mapping = aes(y = predict(resid1, FA_temp)))
model1 <- lm(loop_de_rad3_degree ~   `Cingulum_(cingulate_gyrus)_L`+ sex.1 +age_scan_years, data = FA_temp)
ggplot(FA_temp,
aes(x = `Cingulum_(cingulate_gyrus)_R`,
y = loop_de_rad3_degree,
color = sex)) +
geom_point(aes(color=sex)) +
geom_smooth(method = "lm",
mapping = aes(y = predict(model1, FA_temp)))
model1 <- lm(loop_de_rad3_degree ~   `Cingulum_(cingulate_gyrus)_L`+ sex.1 +age_scan_years, data = FA_temp)
ggplot(FA_temp,
aes(x = `Cingulum_(cingulate_gyrus)_L`,
y = loop_de_rad3_degree,
color = sex)) +
geom_point(aes(color=sex)) +
geom_smooth(method = "lm",
mapping = aes(y = predict(model1, FA_temp)))
plot(lm(loop_de_rad3_degree ~   `Cingulum_(cingulate_gyrus)_L` + age_scan_years, data = fem_FA_temp))
model1 <- lm(loop_de_rad3_degree ~   `Cingulum_(cingulate_gyrus)_L`+ sex.1 +age_scan_years, data = FA_temp)
ggplot(FA_temp,
aes(x = `Cingulum_(cingulate_gyrus)_L`,
y = loop_de_rad3_degree)) +
geom_point() +
geom_smooth(method = "lm",
mapping = aes(y = predict(model1, FA_temp)))
model1 <- lm(loop_de_rad3_degree ~`Fornix_(column_and_body_of_fornix)`+ sex.1 +age_scan_years, data = FA_temp)
ggplot(FA_temp,
aes(x = `Fornix_(column_and_body_of_fornix)`,
y = loop_de_rad3_degree)) +
geom_point() +
geom_smooth(method = "lm",
mapping = aes(y = predict(model1, FA_temp)))
model1 <- lm(loop_de_rad3_degree ~`Fornix_(column_and_body_of_fornix)`+ sex.1 +age_scan_years, data = FA_temp)
ggplot(FA_temp,
aes(x = `Fornix_(column_and_body_of_fornix)`,
y = loop_de_rad3_degree)) +
geom_point() +
geom_smooth(method = "lm",
mapping = aes(y = predict(model1, FA_temp))) +
stat_cor(method = "spearman", label.x.npc = 0.70, label.y.npc = 1)
# Developmental version
devtools::install_github("johannesbjork/LaCroixColoR")
# Developmental version
devtools::install_github("m-clark/NineteenEightyR")
library(NineteenEightyR)
NineteenEightyR
install.packages("paletteer")
park_palette(NineteenEightyR)
paletteer::palettes_c_names
paletteer::palettes_c_names$palette
paletteer::palettes_c_names$package
paletteer::paletteer_packages
paletteer::paletteer_packages$Name
paletteer::paletteer_c(package = "NineteenEightyR")
paletteer::paletteer_c(package = "NineteenEightyR::hotpink")
paletteer_c(package = "NineteenEightyR::hotpink")
library(paletteer)
paletteer_c(package = "NineteenEightyR::hotpink")
paletteer_c(package = "NineteenEightyR::hotpink")z <-
z <- paletteer_c(package = "NineteenEightyR::hotpink")
paletteer_c("nord::frost")
library(paletteer)
paletteer_c()
paletteer_d(`"NineteenEightyR::malibu"`)
paletteer_d(`"NineteenEightyR::hotpink"`)
paletteer_c(`"gameofthrones::targaryen2"`)
paletteer_c(`"harrypotter::lunalovegood"`)
