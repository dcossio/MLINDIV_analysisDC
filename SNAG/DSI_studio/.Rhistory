as.data.frame() %>%
`[`(-c(1),)
} else{
DF <- DF %>%
filter(V1 %in% rows2grab) %>%
t() %>%
`colnames<-`(rows2grab) %>%
`[`(-c(1),) %>%
as.data.frame()
}
return(DF)
}
Extract_raw_values <- function(DF,Metric) {
# Purpose of this function is to clean the data without me having to copy and paste everything later.
# Data = raw unclean dataframe we want to clean up
# Metric will be either MD or QA
# sex is either male or female
# Let's read in our data frame
colNames <- DF  %>% remove_empty("cols") %>%
filter(V1 == "Tract Name") %>% t() %>% `[`(-1)
# grab  ROIcolumn names
subinfo <- sub_info  %>% select(c("subject_id", "sex", "age_scan_years", "loop_pe_rad3_m", "loop_de_rad3_degree","REPO"))
# Let's grab our values
if (Metric == "MD"){
Values <- DF %>% remove_empty("cols") %>%
filter(str_detect(V1, c("mean_md"))) %>%
`colnames<-`(c("Subjects",colNames)) %>% filter(!str_detect(Subjects, c("sub-369")))
}
else{
Values <- DF %>%
remove_empty("cols") %>%
filter(str_detect(V1, c("mean_qa"))) %>%
`colnames<-`(c("Subjects",colNames)) %>% filter(!str_detect(Subjects, c("sub-369")))
}
# now let's put this together
if (length(Values) < 3) {
Values[,2] <- as.numeric(Values[,2])
}else{
ConvToNum <-  apply(Values[,2:length(Values)],2, as.numeric)
Values[,2:length(Values)] <- ConvToNum
}
cleanedDF <- cbind(subinfo,Values) %>% na.omit() %>% select(-c("Subjects"))
return (cleanedDF)
}
TableOutput <- function(df){
knitr::kable(df, row.names=F) %>% kable_styling(bootstrap_options =  c("striped", "hover", "condensed")) %>% scroll_box(width = "600px", height = "300px")
}
# TableOutput <- function(df, style, width, height, caption){
#
#   if (style == "classic"){
#       knitr::kable(df, row.names=F) %>% kable_classic(full_width = F, html_font = "Cambria")
#   } else {
#       knitr::kable(df, row.names=F) %>% kable_styling(bootstrap_options =  c("striped", "hover", "condensed")) %>% scroll_box(width = paste0(width,"px"), height = paste0(height,"px"))
#
#   }
#
# }
# Let's check out normality
p1 <- ggplot(m_subinfo, aes(x=loop_de_avg_degree)) +geom_histogram(bins=10,fill="#028476") +labs(title="male")
shapiro.test(m_subinfo$loop_de_avg_degree) %>% broom::tidy() %>% knitr::kable() %>%  kable_styling()
p2 <- ggplot(m_subinfo, aes(x=loop_ae_rad3_degree)) +geom_histogram(bins=10,fill="#028476") +labs(title="male")
shapiro.test(m_subinfo$loop_de_rad3_degree)%>% broom::tidy() %>% knitr::kable() %>%  kable_styling()
grid.arrange(p1, p2, nrow = 1)
p2 <- ggplot(m_subinfo, aes(x=loop_de_rad3_degree)) +geom_histogram(bins=10,fill="#028476") +labs(title="male")
shapiro.test(m_subinfo$loop_de_rad3_degree)%>% broom::tidy() %>% knitr::kable() %>%  kable_styling()
grid.arrange(p1, p2, nrow = 1)
p3 <- ggplot(f_subinfo, aes(x=loop_de_avg_degree)) +geom_histogram(bins=10,fill="#FB6B90")+labs(title="female")
shapiro.test(f_subinfo$loop_de_avg_degree) %>% broom::tidy() %>% knitr::kable() %>%  kable_styling()
p4 <- ggplot(f_subinfo, aes(x=loop_de_rad3_degree)) +geom_histogram(bins=10,fill="#FB6B90")+labs(title="female")
shapiro.test(f_subinfo$loop_de_rad3_degree) %>% broom::tidy() %>% knitr::kable() %>%  kable_styling()
grid.arrange(p3,p4, nrow = 1)
t.test(m_subinfo$loop_de_avg_degree,f_subinfo$loop_de_avg_degree) %>% broom::tidy() %>% knitr::kable() %>%  kable_styling(full_width = F)
wilcox.test(m_subinfo$loop_de_rad3_degree,f_subinfo$loop_de_rad3_degree) %>% broom::tidy() %>% knitr::kable() %>%  kable_styling(full_width = F)
mean(m_subinfo$loop_de_avg_degree)
class(m_subinfo$loop_de_avg_degree)
class(m_subinfo$loop_de_avg_degree)
mean(m_subinfo$loop_de_avg_degree)
mean(m_subinfo$loop_de_avg_degree,na.rm = TRUE)
ReadingCSVFunc <- function(pathname){
read.delim(paste0(working_dir, pathname), header=FALSE,sep = "\t")
}
#working_dir <- "/Users/danielacossio/Documents/Chrastil_Lab/Projects/SNAG/Cortical_thickness/"
working_dir <- "/Users/danielacossio/Library/CloudStorage/GoogleDrive-dcossio1@uci.edu/Other computers/My iMac/Chrastil_Lab/Projects/SNAG/Cortical_thickness/" # Laptop path
sub_info <- ReadingCSVFunc("subject_info.csv")
library(ggplot2)
#(plyr)
library(tidyverse)
# library(dplyr)
# library(tidyr)
library(stringr)
library(kableExtra)
# library(data.table)
# library(network)
# library(tidygraph)
# library(ggraph)
# library(igraph)
# library(networkD3)
# library(CINNA)
# library(umap)
# library(plotly)
#library(factoextra)
#library(lsr)
# library(car)
library(ggpubr)
#library(entropy)
#library(ds4psy)
# library(pROC)
#library(devtools)
#library(BRRR)
#library(stats)
#library(afex)
library(knitr)
library(janitor)
library(car)
library(ggiraph)
library(ggiraphExtra)
library(moonBook)
library(nationalparkcolors)
library(gridExtra)
library(markdown)
#working_dir <- "/Users/danielacossio/Documents/Chrastil_Lab/Projects/SNAG/Cortical_thickness/"
working_dir <- "/Users/danielacossio/Library/CloudStorage/GoogleDrive-dcossio1@uci.edu/Other computers/My iMac/Chrastil_Lab/Projects/SNAG/Cortical_thickness/" # Laptop path
sub_info <- ReadingCSVFunc("subject_info.csv")
ReadingCSVFunc <- function(pathname){
read.delim(paste0(working_dir, pathname), header=FALSE,sep = "\t")
}
#working_dir <- "/Users/danielacossio/Documents/Chrastil_Lab/Projects/SNAG/Cortical_thickness/"
working_dir <- "/Users/danielacossio/Library/CloudStorage/GoogleDrive-dcossio1@uci.edu/Other computers/My iMac/Chrastil_Lab/Projects/SNAG/Cortical_thickness/" # Laptop path
sub_info <- ReadingCSVFunc("subject_info.csv")
View(sub_info)
ReadingCSVFunc <- function(pathname){
read.delim(paste0(working_dir, pathname), header=FALSE)
}
#working_dir <- "/Users/danielacossio/Documents/Chrastil_Lab/Projects/SNAG/Cortical_thickness/"
working_dir <- "/Users/danielacossio/Library/CloudStorage/GoogleDrive-dcossio1@uci.edu/Other computers/My iMac/Chrastil_Lab/Projects/SNAG/Cortical_thickness/" # Laptop path
sub_info <- ReadingCSVFunc("subject_info.csv")
ReadingCSVFunc <- function(pathname){
read.csv(paste0(working_dir, pathname), header=FALSE)
}
#working_dir <- "/Users/danielacossio/Documents/Chrastil_Lab/Projects/SNAG/Cortical_thickness/"
working_dir <- "/Users/danielacossio/Library/CloudStorage/GoogleDrive-dcossio1@uci.edu/Other computers/My iMac/Chrastil_Lab/Projects/SNAG/Cortical_thickness/" # Laptop path
sub_info <- ReadingCSVFunc("subject_info.csv")
View(sub_info)
ReadingCSVFunc <- function(pathname){
read.csv(paste0(working_dir, pathname), header=TRUE)
}
#working_dir <- "/Users/danielacossio/Documents/Chrastil_Lab/Projects/SNAG/Cortical_thickness/"
working_dir <- "/Users/danielacossio/Library/CloudStorage/GoogleDrive-dcossio1@uci.edu/Other computers/My iMac/Chrastil_Lab/Projects/SNAG/Cortical_thickness/" # Laptop path
sub_info <- ReadingCSVFunc("subject_info.csv")
View(sub_info)
class(sub_info$subject_id)
class(sub_info$loop_pe_rad1_m)
class(sub_info$age_scan_years)
#working_dir <- "/Users/danielacossio/Documents/Chrastil_Lab/Projects/SNAG/Cortical_thickness/"
working_dir <- "/Users/danielacossio/Library/CloudStorage/GoogleDrive-dcossio1@uci.edu/Other computers/My iMac/Chrastil_Lab/Projects/SNAG/Cortical_thickness/" # Laptop path
sub_info <- ReadingCSVFunc("subject_info.csv")
CT_df <- ReadingCSVFunc("master_corticalthicknessROIs.csv")
View(CT_df)
View(sub_info)
View(sub_info)
atlas_rois <- ReadingCSVFunc("Schaefer2018_200Parcels_17Networks_order_FSLMNI152_1mm.Centroid_RAS.csv")
View(atlas_rois)
atlas_rois[1]
atlas_rois[2]
class(atlas_rois)
class(atlas_rois$ROI.Name)
col_names <-c("subject_id",atlas_rois$ROI.Name)
col_names
CT_df <- ReadingCSVFunc("master_corticalthicknessROIs.csv") %>% `colnames<-`(col_names)
View(CT_df)
CT_df <- ReadingCSVFunc("master_corticalthicknessROIs.csv") %>% `colnames<-`(col_names) %>%  arrange(asc(subject_id))
help("arrange")
CT_df <- ReadingCSVFunc("master_corticalthicknessROIs.csv") %>% `colnames<-`(col_names) %>%  arrange(subject_id)
View(CT_df)
View(atlas_rois)
View(CT_df)
View(atlas_rois)
View(CT_df)
View(sub_info)
View(CT_df)
sub_info <- ReadingCSVFunc("subject_info.csv")%>% filter(!(subject_id %in% c("309")))
sub_info <- ReadingCSVFunc("subject_info.csv")%>% filter(!(subject_id %in% c("309", "341")))
View(sub_info)
View(CT_df)
CleanDF <- function(DF,Variable){
subinfo <- sub_info  %>% select(c("subject_id", "sex", "age_scan_years","REPO", Variable))
cleanedDF <- cbind(subinfo,CT_df) %>% na.omit() %>%
return (cleanedDF)
}
AE_ave_df <-CleanDF(CT_df,"loop_ae_avg_degree")
View(sub_info)
ReadingCSVFunc <- function(pathname){
read.csv(paste0(working_dir, pathname), header=TRUE)
}
CleanDF <- function(DF,Variable){
subinfo <- sub_info  %>% select(c("subject_id", "sex", "age_scan_years","repo_status", Variable))
cleanedDF <- cbind(subinfo, DF) %>% na.omit() %>%
return (cleanedDF)
}
AE_ave_df <-CleanDF(CT_df,"loop_ae_avg_degree")
View(AE_ave_df)
library(ppcor)
AE_ave_df <-CleanDF(CT_df,"loop_ae_avg_degree")
View(AE_ave_df)
View(AE_ave_df)
CleanDF <- function(DF,Variable){
subinfo <- sub_info  %>% select(c("subject_id", "sex", "age_scan_years","repo_status", Variable))
cleanedDF <- cbind(subinfo, DF) %>% na.omit()
return (cleanedDF)
}
AE_ave_df <-CleanDF(CT_df,"loop_ae_avg_degree")
library(ggplot2)
#(plyr)
library(tidyverse)
# library(dplyr)
# library(tidyr)
library(stringr)
library(kableExtra)
# library(data.table)
# library(network)
# library(tidygraph)
# library(ggraph)
# library(igraph)
# library(networkD3)
# library(CINNA)
# library(umap)
# library(plotly)
#library(factoextra)
#library(lsr)
# library(car)
library(ggpubr)
#library(entropy)
#library(ds4psy)
# library(pROC)
#library(devtools)
#library(BRRR)
#library(stats)
#library(afex)
library(knitr)
library(janitor)
library(car)
library(ggiraph)
library(ggiraphExtra)
library(moonBook)
library(nationalparkcolors)
library(gridExtra)
library(markdown)
working_dir <-"/Users/danielacossio/Documents/Chrastil_Lab/Projects/SNAG/DSI_rerun_data/"
# PE_working_dir <- "/Users/danielacossio/Library/CloudStorage/GoogleDrive-dcossio1@uci.edu/My Drive/White matter tract/MidlifeWM_DSI2023/DSI/maze/Path_eff/"
rows2grab <- c("Tract Name", "number of tracts","mean length(mm)","diameter(mm)", "volume(mm^3)")
sub_info <- read.csv(paste0(working_dir,"subject_info.csv"))
ReadingCSVFunc <- function(pathname){
read.delim(paste0(working_dir, pathname), header=FALSE,sep = "\t")
}
CleanInput <- function(DF){
DF <- DF %>% remove_empty("cols")
if(length(DF) < 3){
DF <- DF %>%
filter(V1 %in% rows2grab) %>%
t() %>%
`colnames<-`(rows2grab) %>%
as.data.frame() %>%
`[`(-c(1),)
} else{
DF <- DF %>%
filter(V1 %in% rows2grab) %>%
t() %>%
`colnames<-`(rows2grab) %>%
`[`(-c(1),) %>%
as.data.frame()
}
return(DF)
}
Extract_raw_values <- function(DF,Metric) {
# Purpose of this function is to clean the data without me having to copy and paste everything later.
# Data = raw unclean dataframe we want to clean up
# Metric will be either MD or QA
# sex is either male or female
# Let's read in our data frame
colNames <- DF  %>% remove_empty("cols") %>%
filter(V1 == "Tract Name") %>% t() %>% `[`(-1)
# grab  ROIcolumn names
subinfo <- sub_info  %>% select(c("subject_id", "sex", "age_scan_years", "loop_pe_rad3_m", "loop_de_rad3_degree","REPO"))
# Let's grab our values
if (Metric == "MD"){
Values <- DF %>% remove_empty("cols") %>%
filter(str_detect(V1, c("mean_md"))) %>%
`colnames<-`(c("Subjects",colNames)) %>% filter(!str_detect(Subjects, c("sub-369")))
}
else{
Values <- DF %>%
remove_empty("cols") %>%
filter(str_detect(V1, c("mean_qa"))) %>%
`colnames<-`(c("Subjects",colNames)) %>% filter(!str_detect(Subjects, c("sub-369")))
}
# now let's put this together
if (length(Values) < 3) {
Values[,2] <- as.numeric(Values[,2])
}else{
ConvToNum <-  apply(Values[,2:length(Values)],2, as.numeric)
Values[,2:length(Values)] <- ConvToNum
}
cleanedDF <- cbind(subinfo,Values) %>% na.omit() %>% select(-c("Subjects"))
return (cleanedDF)
}
TableOutput <- function(df){
knitr::kable(df, row.names=F) %>% kable_styling(bootstrap_options =  c("striped", "hover", "condensed")) %>% scroll_box(width = "600px", height = "300px")
}
# TableOutput <- function(df, style, width, height, caption){
#
#   if (style == "classic"){
#       knitr::kable(df, row.names=F) %>% kable_classic(full_width = F, html_font = "Cambria")
#   } else {
#       knitr::kable(df, row.names=F) %>% kable_styling(bootstrap_options =  c("striped", "hover", "condensed")) %>% scroll_box(width = paste0(width,"px"), height = paste0(height,"px"))
#
#   }
#
# }
TableOutput(CleanInput(ReadingCSVFunc("maze_acc/QA/fname_covariate/QA_positive_mazeacc_all_fname.csv")))
read_csv(CleanInput(ReadingCSVFunc("maze_acc/QA/fname_covariate/QA_positive_mazeacc_all_fname.csv")))
x <- CleanInput(ReadingCSVFunc("maze_acc/QA/fname_covariate/QA_positive_mazeacc_all_fname.csv"))
x
write_csv(CleanInput(ReadingCSVFunc("maze_acc/QA/fname_covariate/QA_positive_mazeacc_all_fname.csv")))
write_csv(CleanInput(ReadingCSVFunc("maze_acc/QA/fname_covariate/QA_positive_mazeacc_all_fname.csv")), "maze")
write_csv(CleanInput(ReadingCSVFunc("maze_acc/QA/fname_covariate/QA_positive_mazeacc_all_fname.csv")), "maze.csv")
write_csv(CleanInput(ReadingCSVFunc("maze_acc/QA/noFNAME/all_maze_accuracy_pct.t2.length25.pos.csv")), "maze.csv")
write_csv(CleanInput(ReadingCSVFunc("maze_acc/QA/fname_covariate/female.mazelearningacc.pos.csv")), "maze.csv")
write_csv(CleanInput(ReadingCSVFunc("maze_acc/QA/noFNAME/all_maze_accuracy_pct.t2.length25.pos.csv")), "maze.csv")
write_csv(CleanInput(ReadingCSVFunc("maze_acc/QA/fname_covariate/male.mazelearning.acc.pos.csv")), "maze.csv")
write_csv(CleanInput(ReadingCSVFunc("maze_acc/QA/noFNAME/male.maze_accuracy_pct.t2.length25.pos_corr.csv")), "maze.csv")
write_csv(CleanInput(ReadingCSVFunc("maze_acc/QA/noFNAME/male.maze_accuracy_pct.t2.length25.neg_corr.csv")), "maze.csv")
write_csv(CleanInput(ReadingCSVFunc("maze_acc/QA/fname_covariate/pre.mazelearningacc.pos.csv")), "maze.csv")
write_csv(CleanInput(ReadingCSVFunc("maze_acc/QA/fname_covariate/pre.mazelearningacc.neg.csv")), "maze.csv")
write_csv(CleanInput(ReadingCSVFunc("maze_acc/QA/noFNAME/maze.QA.pre.pos.csv")), "maze.csv")
write_csv(CleanInput(ReadingCSVFunc("maze_acc/QA/noFNAME/maze.QA.pre.neg.csv")), "maze.csv")
write_csv(CleanInput(ReadingCSVFunc("maze_acc/QA/fname_covariate/peri.mazelearning.acc.pos.csv")), "maze.csv")
write_csv(CleanInput(ReadingCSVFunc("maze_acc/QA/fname_covariate/peri.mazelearning.acc.neg.csv")), "maze.csv")
write_csv(CleanInput(ReadingCSVFunc("maze_acc/QA/noFNAME/qa.peri.pos.csv")), "maze.csv")
write_csv(CleanInput(ReadingCSVFunc("maze_acc/QA/noFNAME/qa.peri.neg.csv")), "maze.csv")
write_csv(CleanInput(ReadingCSVFunc("maze_acc/QA/fname_covariate/peri.mazelearning.acc.pos.csv")), "maze.csv")
write_csv(CleanInput(ReadingCSVFunc("maze_acc/QA/fname_covariate/peri.mazelearning.acc.neg.csv")), "maze.csv")
write_csv(CleanInput(ReadingCSVFunc("maze_acc/QA/noFNAME/mAZE.QA.post.pos.csv")), "maze.csv")
write_csv(CleanInput(ReadingCSVFunc("maze_acc/MD/FNAME/maze.MD.all.pos.csv")), "MD.csv")
library(ggplot2)
#(plyr)
library(tidyverse)
# library(dplyr)
# library(tidyr)
library(stringr)
library(kableExtra)
# library(data.table)
# library(network)
# library(tidygraph)
# library(ggraph)
# library(igraph)
# library(networkD3)
# library(CINNA)
# library(umap)
# library(plotly)
#library(factoextra)
#library(lsr)
# library(car)
library(ggpubr)
#library(entropy)
#library(ds4psy)
# library(pROC)
#library(devtools)
#library(BRRR)
#library(stats)
#library(afex)
library(knitr)
library(janitor)
library(car)
library(ggiraph)
library(ggiraphExtra)
library(moonBook)
library(nationalparkcolors)
library(gridExtra)
library(markdown)
working_dir <-"/Users/danielacossio/Documents/Chrastil_Lab/Projects/SNAG/DSI_rerun_data/"
# PE_working_dir <- "/Users/danielacossio/Library/CloudStorage/GoogleDrive-dcossio1@uci.edu/My Drive/White matter tract/MidlifeWM_DSI2023/DSI/maze/Path_eff/"
rows2grab <- c("Tract Name", "number of tracts","mean length(mm)","diameter(mm)", "volume(mm^3)")
sub_info <- read.csv(paste0(working_dir,"subject_info.csv"))
ReadingCSVFunc <- function(pathname){
read.delim(paste0(working_dir, pathname), header=FALSE,sep = "\t")
}
CleanInput <- function(DF){
DF <- DF %>% remove_empty("cols")
if(length(DF) < 3){
DF <- DF %>%
filter(V1 %in% rows2grab) %>%
t() %>%
`colnames<-`(rows2grab) %>%
as.data.frame() %>%
`[`(-c(1),)
} else{
DF <- DF %>%
filter(V1 %in% rows2grab) %>%
t() %>%
`colnames<-`(rows2grab) %>%
`[`(-c(1),) %>%
as.data.frame()
}
return(DF)
}
Extract_raw_values <- function(DF,Metric) {
# Purpose of this function is to clean the data without me having to copy and paste everything later.
# Data = raw unclean dataframe we want to clean up
# Metric will be either MD or QA
# sex is either male or female
# Let's read in our data frame
colNames <- DF  %>% remove_empty("cols") %>%
filter(V1 == "Tract Name") %>% t() %>% `[`(-1)
# grab  ROIcolumn names
subinfo <- sub_info  %>% select(c("subject_id", "sex", "age_scan_years", "loop_pe_rad3_m", "loop_de_rad3_degree","REPO"))
# Let's grab our values
if (Metric == "MD"){
Values <- DF %>% remove_empty("cols") %>%
filter(str_detect(V1, c("mean_md"))) %>%
`colnames<-`(c("Subjects",colNames)) %>% filter(!str_detect(Subjects, c("sub-369")))
}
else{
Values <- DF %>%
remove_empty("cols") %>%
filter(str_detect(V1, c("mean_qa"))) %>%
`colnames<-`(c("Subjects",colNames)) %>% filter(!str_detect(Subjects, c("sub-369")))
}
# now let's put this together
if (length(Values) < 3) {
Values[,2] <- as.numeric(Values[,2])
}else{
ConvToNum <-  apply(Values[,2:length(Values)],2, as.numeric)
Values[,2:length(Values)] <- ConvToNum
}
cleanedDF <- cbind(subinfo,Values) %>% na.omit() %>% select(-c("Subjects"))
return (cleanedDF)
}
TableOutput <- function(df){
knitr::kable(df, row.names=F) %>% kable_styling(bootstrap_options =  c("striped", "hover", "condensed")) %>% scroll_box(width = "600px", height = "300px")
}
# TableOutput <- function(df, style, width, height, caption){
#
#   if (style == "classic"){
#       knitr::kable(df, row.names=F) %>% kable_classic(full_width = F, html_font = "Cambria")
#   } else {
#       knitr::kable(df, row.names=F) %>% kable_styling(bootstrap_options =  c("striped", "hover", "condensed")) %>% scroll_box(width = paste0(width,"px"), height = paste0(height,"px"))
#
#   }
#
# }
write_csv(CleanInput(ReadingCSVFunc("maze_acc/MD/FNAME/maze.MD.all.pos.csv")), "MD.csv")
write_csv(CleanInput(ReadingCSVFunc("maze_acc/MD/noFNAME/newversion/maze.MD.all.pos.csv")), "MD.csv")
write_csv(CleanInput(ReadingCSVFunc("maze_acc/MD/FNAME/maze.MD.female.neg.csv")), "MD.csv")
TableOutput(CleanInput(ReadingCSVFunc("maze_acc/QA/fname_covariate/female.mazelearningacc.pos.csv")))
write_csv(CleanInput(ReadingCSVFunc("maze_acc/MD/FNAME/maze.MD.male.pos.csv")), "MD.csv")
write_csv(CleanInput(ReadingCSVFunc("maze_acc/MD/noFNAME/newversion/maze.MD.males.pos.csv")), "MD.csv")
TableOutput(CleanInput(ReadingCSVFunc("maze_acc/MD/FNAME/maze.MD.pre.neg.csv")))
write_csv(CleanInput(ReadingCSVFunc("maze_acc/MD/FNAME/maze.MD.pre.neg.csv")), "MD.csv")
write_csv("maze_acc/MD/noFNAME/newversion/maze.MD.pre.neg.csv")), "MD.csv")
write_csv(CleanInput(ReadingCSVFunc("maze_acc/MD/noFNAME/newversion/maze.MD.pre.neg.csv")), "MD.csv")
write_csv(CleanInput(ReadingCSVFunc("maze_acc/MD/FNAME/maze.MD.post.pos.csv")), "MD.csv")
TableOutput(CleanInput(ReadingCSVFunc("maze_acc/MD/FNAME/maze.MD.peri.pos.csv")))
working_dir <- "/Users/danielacossio/Documents/Chrastil_Lab/Projects/SNAG/DSI_rerun_data/DSP/"
rows2grab <- c("Tract Name", "number of tracts","mean length(mm)","diameter(mm)", "volume(mm^3)")
sub_info <- read.csv("/Users/danielacossio/Documents/Chrastil_Lab/Projects/SNAG/DSI_rerun_data/subject_info.csv")
ReadingCSVFunc <- function(pathname){
read.delim(paste0(working_dir, pathname), header=FALSE,sep = "\t")
}
CleanInput <- function(DF){
DF <- DF %>%
remove_empty("cols") %>%
filter(V1 %in% rows2grab) %>%
t() %>%
`colnames<-`(rows2grab) %>%
`[`(-c(1),) %>%
as.data.frame()
return(DF)
}
Extract_raw_values <- function(DF,Metric) {
# Purpose of this function is to clean the data without me having to copy and paste everything later.
# Data = raw unclean dataframe we want to clean up
# Metric will be either MD or QA
# sex is either male or female
# Let's read in our data frame
# grab  ROIcolumn names
colNames <- DF  %>% remove_empty("cols") %>%
filter(V1 == "Tract Name") %>% t() %>% `[`(-1)
subinfo <- sub_info  %>% select(c("subject_id", "sex", "age_scan_years", "maze_accuracy_pct"))
# Let's grab our values
if (Metric == "MD"){
Values <- DF %>% remove_empty("cols") %>%
filter(str_detect(V1, c("mean_md"))) %>%
`colnames<-`(c("Subjects",colNames))
}
else{
Values <- DF %>%
remove_empty("cols") %>%
filter(str_detect(V1, c("mean_qa"))) %>%
`colnames<-`(c("Subjects",colNames)) %>% filter(!str_detect(Subjects, c("sub-369")))
}
# now let's put this together
ConvToNum <-  apply(Values[,2:length(Values)],2, as.numeric)
Values[,2:length(Values)] <- ConvToNum
cleanedDF <- cbind(subinfo,Values) %>% na.omit() %>% select(-c("Subjects"))
return (cleanedDF)
}
TableOutput <- function(df){
knitr::kable(df, row.names=F) %>%
kable_styling(bootstrap_options =  c("striped", "hover", "condensed")) %>%
scroll_box(width = "600px", height = "300px")
}
TableOutput(CleanInput(ReadingCSVFunc("QA/all.DSP.SI.neg.csv")))
