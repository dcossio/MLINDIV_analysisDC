#library(factoextra)
#library(lsr)
# library(car)
library(ggpubr)
#library(entropy)
#library(ds4psy)
# library(pROC)
#library(devtools)
#library(BRRR)
#library(stats)
#library(afex)
library(knitr)
library(janitor)
library(car)
library(ggiraph)
library(ggiraphExtra)
library(moonBook)
library(nationalparkcolors)
library(gridExtra)
library(markdown)
ReadingCSVFunc <- function(pathname){
read.delim(paste0(working_dir, pathname), header=FALSE,sep = "\t")
}
CleanInput <- function(DF){
DF <- DF %>%
remove_empty("cols") %>%
filter(V1 %in% rows2grab) %>%
t() %>%
`colnames<-`(rows2grab) %>%
`[`(-c(1),) %>%
as.data.frame()
return(DF)
}
Extract_raw_values <- function(DF,Metric) {
# Purpose of this function is to clean the data without me having to copy and paste everything later.
# Data = raw unclean dataframe we want to clean up
# Metric will be either MD or QA
# sex is either male or female
# Let's read in our data frame
# grab  ROIcolumn names
colNames <- DF  %>% remove_empty("cols") %>%
filter(V1 == "Tract Name") %>% t() %>% `[`(-1)
subinfo <- sub_info  %>% select(c("subject_id", "sex", "age_scan_years", "maze_accuracy_pct"))
# Let's grab our values
if (Metric == "MD"){
Values <- DF %>% remove_empty("cols") %>%
filter(str_detect(V1, c("mean_md"))) %>%
`colnames<-`(c("Subjects",colNames))
}
else{
Values <- DF %>%
remove_empty("cols") %>%
filter(str_detect(V1, c("mean_qa"))) %>%
`colnames<-`(c("Subjects",colNames)) %>% filter(!str_detect(Subjects, c("sub-369")))
}
# now let's put this together
ConvToNum <-  apply(Values[,2:length(Values)],2, as.numeric)
Values[,2:length(Values)] <- ConvToNum
cleanedDF <- cbind(subinfo,Values) %>% na.omit() %>% select(-c("Subjects"))
return (cleanedDF)
}
TableOutput <- function(df){
knitr::kable(df, row.names=F) %>%
kable_styling(bootstrap_options =  c("striped", "hover", "condensed")) %>%
scroll_box(width = "600px", height = "300px")
}
all_QA <- CleanInput(ReadingCSVFunc("QA/all/all.DSP.SI.neg.csv"))
TableOutput(all_QA)
female_pos_QA <- CleanInput(ReadingCSVFunc("QA/female/female.dsp.si.pos.csv"))
TableOutput(female_pos_QA)
female_neg_QA <- CleanInput(ReadingCSVFunc("QA/female/female.dsp.si.neg.csv"))
TableOutput(female_neg_QA)
library(ggplot2)
#(plyr)
library(tidyverse)
# library(dplyr)
# library(tidyr)
library(stringr)
library(kableExtra)
# library(data.table)
# library(network)
# library(tidygraph)
# library(ggraph)
# library(igraph)
# library(networkD3)
# library(CINNA)
# library(umap)
# library(plotly)
#library(factoextra)
#library(lsr)
# library(car)
library(ggpubr)
#library(entropy)
#library(ds4psy)
# library(pROC)
#library(devtools)
#library(BRRR)
#library(stats)
#library(afex)
library(knitr)
library(janitor)
library(car)
library(ggiraph)
library(ggiraphExtra)
library(moonBook)
library(nationalparkcolors)
library(gridExtra)
library(markdown)
library(ppcor)
library(mediation)
library(ggplot2)
#(plyr)
library(tidyverse)
# library(dplyr)
# library(tidyr)
library(stringr)
library(kableExtra)
# library(data.table)
# library(network)
# library(tidygraph)
# library(ggraph)
# library(igraph)
# library(networkD3)
# library(CINNA)
# library(umap)
# library(plotly)
#library(factoextra)
#library(lsr)
# library(car)
library(ggpubr)
#library(entropy)
#library(ds4psy)
# library(pROC)
#library(devtools)
#library(BRRR)
#library(stats)
#library(afex)
library(knitr)
library(janitor)
library(car)
library(ggiraph)
library(ggiraphExtra)
library(moonBook)
library(nationalparkcolors)
library(gridExtra)
library(markdown)
library(ppcor)
library(mediation)
library(ggplot2)
#(plyr)
library(tidyverse)
# library(dplyr)
# library(tidyr)
library(stringr)
library(kableExtra)
# library(data.table)
# library(network)
# library(tidygraph)
# library(ggraph)
# library(igraph)
# library(networkD3)
# library(CINNA)
# library(umap)
# library(plotly)
#library(factoextra)
#library(lsr)
# library(car)
library(ggpubr)
#library(entropy)
#library(ds4psy)
# library(pROC)
#library(devtools)
#library(BRRR)
#library(stats)
#library(afex)
library(knitr)
library(janitor)
library(car)
library(ggiraph)
library(ggiraphExtra)
library(moonBook)
library(nationalparkcolors)
library(gridExtra)
library(markdown)
library(ppcor)
library(mediation)
CheckDistribution <- function(dataframe,threshold){
# Purpose of this is to take in a tbss csv dataframe and checking the distribution of each ROI. Then it spits out all the regions that are not normally distributed.
normality_check<- data.frame(matrix(ncol = 2, nrow = 0))
for (roi in c(ROIs$V2)){
df <- data.frame(matrix(ncol = 2, nrow = 1))
normcheck <- shapiro.test(dataframe[[roi]])
if (normcheck[["p.value"]] < threshold) {
df$X1 <- roi
df$X2 <- normcheck[["p.value"]]
#
normality_check <- rbind(normality_check,df)
}
}
colnames(normality_check) <- c("ROI","p.value")
return(normality_check)
}
# Craeting tables for html
TableOutput <- function(df){
knitr::kable(df, row.names=F) %>%
kable_styling(bootstrap_options =  c("striped", "hover", "condensed")) %>%
scroll_box(width = "600px", height = "300px")
}
RunningPcorTest <- function(dataframe, task, covariates){
# Here we need a clean dataframe that contains only on wm metric (FA,AD,RD, MD) and it needs to be combined with the subject info data that we need. here i need maze accuracy, sex, and age. Also, need to remove any rows with NW
finalDF <-   data.frame(matrix(ncol = 7, nrow = 0))
for (roi in c(ROIs$V2)){
df <- data.frame(matrix(ncol = 6, nrow = 1))
pcortestresults <-pcor.test(dataframe[[roi]],dataframe[[task]], dataframe[, c(covariates)])
if (pcortestresults$p.value < 0.05) {
df$X1 <- roi
df[,2:7] <- pcortestresults
#
finalDF <- rbind(finalDF,df)
}
}
colnames(finalDF) <- c("ROI", colnames(pcortestresults))
return(finalDF)
}
AprioriPcorTest <-  function(dataframe,task, covariates){
# Here we have our list of ROIS
list_rois <- c("fornix_body", "fornix_R", "fornix_L","Cingulum_(cingulate_gyrus)_R","Cingulum_(cingulate_gyrus)_L","Cingulum_(hippocampus)_R", "Cingulum_(hippocampus)_L")
DF <-dataframe %>% filter(!is.na(dataframe[[task]]))
finalDF <- data.frame(matrix(ncol = 7, nrow = 0))
for (roi in c(list_rois)){
df <- data.frame(matrix(ncol = 6, nrow = 1))
pcortestresults <- pcor.test(DF[[roi]],DF[[task]],DF[, c(covariates)],method = "spearman")
#
df$X1 <- roi
df[,2:7] <- pcortestresults
#   #
finalDF <- rbind(finalDF,df)
#
}
colnames(finalDF) <- c("ROI", colnames(pcortestresults))
return(finalDF)
}
GetAprioriDF <- function(dataframe){
# List of a prior rois
apriori_ROIS <- c("Fornix_(column_and_body_of_fornix)","Fornix_(cres)_/_Stria_terminalis_(can_not_be_resolved_with_current_resolution)_R","Fornix_(cres)_/_Stria_terminalis_(can_not_be_resolved_with_current_resolution)_L", "Cingulum_(cingulate_gyrus)_R","Cingulum_(cingulate_gyrus)_L","Cingulum_(hippocampus)_R", "Cingulum_(hippocampus)_L")
# clean up the names
df <- dataframe %>% dplyr::select(. ,apriori_ROIS) %>% `colnames<-`(c("fornix_body", "fornix_R", "fornix_L","Cingulum_(cingulate_gyrus)_R","Cingulum_(cingulate_gyrus)_L","Cingulum_(hippocampus)_R", "Cingulum_(hippocampus)_L"))
return(df)
}
# Lets read in our subject information
top_workdir <-"/Users/danielacossio/Documents/Chrastil_Lab/Projects/SNAG/MIDLIFE_TBSS/"
# laptop path "/Users/danielacossio/Library/CloudStorage/GoogleDrive-dcossio1@uci.edu/Other computers/My iMac/Chrastil_Lab/Projects/SNAG/MIDLIFE_TBSS/"
ROIs <- read.table(paste0(top_workdir,"JHU-WhiteMatter-labels-1mm.txt")) %>% dplyr::select(V2)
sub_info_master <- read.csv(paste0(top_workdir,"subject_info.csv"))
raw_FA <- read.csv(paste0(top_workdir,"JHU-skeletonized-FA.csv"), header=FALSE) %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
raw_MD <- read.csv(paste0(top_workdir,"JHU-skeletonized-MD.csv"))  %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
raw_AD <- read.csv(paste0(top_workdir,"JHU-skeletonized-AD.csv")) %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
raw_RD <- read.csv(paste0(top_workdir,"JHU-skeletonized-RD.csv")) %>% remove_empty(. ,which = "cols") %>% `colnames<-`(c(ROIs$V2))
# All
ggplot(sub_info_master, aes(x= maze_accuracy_pct)) +
geom_histogram()
#By sex
ggplot(sub_info_master, aes(x= maze_accuracy_pct, fill =sex, color=sex)) +
geom_histogram()
#  Creating our data frame  by taking apriori rois and also renaming them for a clean name and binding them with or subject information
apriori_FA <- GetAprioriDF(raw_FA) %>% cbind(sub_info_master, .)
View(apriori_FA)
FA_maze_results <- AprioriPcorTest(dataframe = apriori_FA, task ="maze_accuracy_pct",covariates = c("sex.1","age_scan_years"))
TableOutput(FA_maze_results)
FA_maze_results <- AprioriPcorTest(dataframe = apriori_FA, task ="maze_accuracy_pct",covariates = c("sex.1","age_scan_years"))
TableOutput(FA_maze_results)
colnames(sub_info_master)
#  Creating our data frame  by taking apriori rois and also renaming them for a clean name and binding them with or subject information
mazeFA <- sub_info_master %>% select("subject_id","sex.1", "age_scan_years", "maze_accuracy_pct")
#  Creating our data frame  by taking apriori rois and also renaming them for a clean name and binding them with or subject information
mazeFA <- sub_info_master %>% select(c("subject_id","sex.1", "age_scan_years", "maze_accuracy_pct"))
#  Creating our data frame  by taking apriori rois and also renaming them for a clean name and binding them with or subject information
mazeFA <- sub_info_master %>% dplyr::select("subject_id","sex.1", "age_scan_years", "maze_accuracy_pct")
#  Creating our data frame  by taking apriori rois and also renaming them for a clean name and binding them with or subject information
mazeFA <- sub_info_master %>% dplyr::select("subject_id","sex.1", "age_scan_years", "maze_accuracy_pct") %>% cbind(., raw_FA)
View(mazeFA)
#  Creating our data frame  by taking apriori rois and also renaming them for a clean name and binding them with or subject information
mazeFA <- sub_info_master %>% dplyr::select("subject_id","sex.1", "age_scan_years", "maze_accuracy_pct") %>% cbind(., raw_FA) %>% na.omit()
#
mazeFA <- sub_info_master %>% dplyr::select("subject_id","sex.1", "age_scan_years", "maze_accuracy_pct") %>% cbind(., raw_FA) %>% na.omit()
covs <- c("sex.1", "age_scan_years")
mazeFA_results <- RunningPcorTest(mazeFA,"maze_accuracy_pct", covs)
View(mazeFA_results)
finalDF <- list()
list[[1]]
list[[0]]
finalDF[[0]]
finalDF[[1]]
finalDF
finalDF[[]] <- y
finalDF[[]] <- 1
finalDF[0]<- 1
finalDF[1]<- 1
finalDF
finalDF <- vector(mode='list', length=length(ROIs))
length(ROIs)
nrow(ROIs)
finalDF <- vector(mode='list', length=nrow(ROIs))
View(ROIs)
ROIs[1]
ROIs[,1]
ROIs[1,]
finalDF[[1]]
#
finalDF <- vector(mode='list', length=nrow(ROIs))
for (roi in length=nrow(ROIs)){
#
finalDF <- vector(mode='list', length=nrow(ROIs))
for (roi in 1:nrow(ROIs)){
finalDF[[roi]] <- lm(maze_accuracy_pct ~ ROIs[roi,] + sex.1 + age_scan_years, data = mazeFA)
}
ROIs[roi,]
View(mazeFA)
mazeFA[ROIs[roi,]]
#
finalDF <- vector(mode='list', length=nrow(ROIs))
for (roi in 1:nrow(ROIs)){
finalDF[[roi]] <- lm(maze_accuracy_pct ~ mazeFA[ROIs[roi,]] + sex.1 + age_scan_years, data = mazeFA)
}
lm(maze_accuracy_pct ~ mazeFA[ROIs[roi,]] + sex.1 + age_scan_years, data = mazeFA)
mazeFA[ROIs[roi,]]
lm(mazeFA[maze_accuracy_pct] ~ mazeFA[ROIs[roi,]] + sex.1 + age_scan_years, data = mazeFA)
class(mazeFA[ROIs[roi,]])
lm(maze_accuracy_pct ~ ROIs[roi,] + sex.1 + age_scan_years, data = mazeFA)
mazeFA[[ROIs[roi,]]]
class(mazeFA[[ROIs[roi,]]])
lm(maze_accuracy_pct ~ mazeFA[[ROIs[roi,]]] + sex.1 + age_scan_years, data = mazeFA)
lm(maze_accuracy_pct ~ `Cingulum_(cingulate_gyrus)_R` + sex.1 + age_scan_years, data = apriori_FA)
finalDF[[roi]] <- lm(maze_accuracy_pct ~ mazeFA[[ROIs[roi,]]] + sex.1 + age_scan_years, data = mazeFA)
finalDF[[roi]]
summary(finalDF[[roi]])
finalDF[[roi]] <- summary(lm(maze_accuracy_pct ~ mazeFA[[ROIs[roi,]]] + sex.1 + age_scan_years, data = mazeFA))
finalDF[[roi]]
View(finalDF)
names(finalDF[[1]])
names(finalDF[1])
names(finalDF)
View(finalDF)
names(finalDF)[1]
names(finalDF)[1] <- ROIs[roi,]
names(finalDF)[1]
View(finalDF)
#
finalDF <- vector(mode='list', length=nrow(ROIs))
for (roi in 1:nrow(ROIs)){
finalDF[[roi]] <- summary(lm(maze_accuracy_pct ~ mazeFA[[ROIs[roi,]]] + sex.1 + age_scan_years, data = mazeFA))
names(finalDF)[roi] <- ROIs[roi,]
}
View(finalDF)
finalDF[["Splenium_of_corpus_callosum"]]
finalDF[["Middle_cerebellar_peduncle"]]
finalDF[["Body_of_corpus_callosum"]]
finalDF[["Medial_lemniscus_L"]]
finalDF[["Superior_cerebellar_peduncle_R"]]
finalDF[["Cerebral_peduncle_L"]]
finalDF[["Superior_corona_radiata_L"]]
for (roi in finalDF){
print(roi)
}
View(roi)
for (roi in length(finalDF)){
print(roi)
}
length(finalDF)
names(finalDF)
for (roi in names(finalDF)){
print(roi)
}
finalDF[[roi]]
modelsummary <- finalDF[[roi]]
View(modelsummary)
modelsummary[["coefficients"]]
<- modelsummary[["coefficients"]]
x <- modelsummary[["coefficients"]]
class(x)
x
x <- as.data.frame(modelsummary[["coefficients"]])
View(x)
colnames(x)
finalDF[[roi]][["coefficients"]]
modelsummary <- as.data.frame(finalDF[[roi]][["coefficients"]])
for (roi in names(finalDF)){
modelsummary <- as.data.frame(finalDF[[roi]][["coefficients"]])
if (modelsummary$`Pr(>|t|)` < 0.05){
print(roi)
}
}
y <- sum(modelsummary$`Pr(>|t|)` < 0.05)
View(modelsummary)
for (roi in names(finalDF)){
modelsummary <- as.data.frame(finalDF[[roi]][["coefficients"]])
y <- sum(modelsummary$`Pr(>|t|)` < 0.05)
if (modelsummary$`Pr(>|t|)` > 0){
print(roi)
}
}
for (roi in names(finalDF)){
modelsummary <- as.data.frame(finalDF[[roi]][["coefficients"]])
y <- sum(modelsummary$`Pr(>|t|)` < 0.05)
if (y > 0){
print(roi)
}
}
modelsummary <- as.data.frame(finalDF[[roi]][["coefficients"]]) %>% filter(!c("Intercept"))
modelsummary <- as.data.frame(finalDF[[roi]][["coefficients"]]) %>% .[!("intercept"),]
modelsummary <- as.data.frame(finalDF[[roi]][["coefficients"]]) %>% .[!("(intercept)"),]
modelsummary <- as.data.frame(finalDF[[roi]][["coefficients"]]) %>% filer(.,rownames(.) == '(r3)intercept)')
modelsummary <- as.data.frame(finalDF[[roi]][["coefficients"]]) %>% filter(.,rownames(.) == '(intercept)')
modelsummary <- filter(rownames(modelsummary) != '(intercept)')
rownames(modelsummary)
modelsummary <- as.data.frame(finalDF[[roi]][["coefficients"]])
(rownames(modelsummary)
)
modelsummary <- as.data.frame(finalDF[[roi]][["coefficients"]])
modelsummary <- filter(., !(rownames(modelsummary) == "(Intercept)"))
modelsummary <- as.data.frame(finalDF[[roi]][["coefficients"]])
modelsummary <- filter(modelsummary, !(rownames(modelsummary) == "(Intercept)"))
View(modelsummary)
y <- sum(modelsummary$`Pr(>|t|)` < 0.05)
for (roi in names(finalDF)){
modelsummary <- as.data.frame(finalDF[[roi]][["coefficients"]])
modelsummary <- filter(modelsummary, !(rownames(modelsummary) == "(Intercept)"))
y <- sum(modelsummary$`Pr(>|t|)` < 0.05)
if (y > 0){
print(roi)
}
}
ROIs2Check <- list()
for (roi in names(finalDF)){
modelsummary <- as.data.frame(finalDF[[roi]][["coefficients"]])
modelsummary <- filter(modelsummary, !(rownames(modelsummary) == "(Intercept)"))
y <- sum(modelsummary$`Pr(>|t|)` < 0.05)
if (y > 0){
ROIs2Check <- roi
}
}
ROIs2Check <- list()
index <- 0
for (roi in names(finalDF)){
modelsummary <- as.data.frame(finalDF[[roi]][["coefficients"]])
modelsummary <- filter(modelsummary, !(rownames(modelsummary) == "(Intercept)"))
y <- sum(modelsummary$`Pr(>|t|)` < 0.05)
if (y > 0){
ROIs2Check[[index +1]] <- roi
}
}
View(ROIs2Check)
ROIs2Check[[1]]
View(finalDF)
for (roi in names(finalDF)){
modelsummary <- as.data.frame(finalDF[[roi]][["coefficients"]])
modelsummary <- filter(modelsummary, !(rownames(modelsummary) == "(Intercept)"))
y <- sum(modelsummary$`Pr(>|t|)` < 0.05)
if (y > 0){
ROIs2Check[[length(ROIs2Check)+ 1]] <- roi
}
}
View(ROIs2Check)
ROIs2Check <- list()
index <- 0
for (roi in names(finalDF)){
modelsummary <- as.data.frame(finalDF[[roi]][["coefficients"]])
modelsummary <- filter(modelsummary, !(rownames(modelsummary) == "(Intercept)"))
y <- sum(modelsummary$`Pr(>|t|)` < 0.05)
if (y > 0){
ROIs2Check[[length(ROIs2Check)+ 1]] <- roi
}
}
names(finalDF)
ROIs2Check <- c()
ROIs2Check <- c()
index <- 0
for (roi in names(finalDF)){
modelsummary <- as.data.frame(finalDF[[roi]][["coefficients"]])
modelsummary <- filter(modelsummary, !(rownames(modelsummary) == "(Intercept)"))
y <- sum(modelsummary$`Pr(>|t|)` < 0.05)
if (y > 0){
ROIs2Check[[length(ROIs2Check)+ 1]] <- roi
}
}
View(ROIs2Check)
ROIs2Check <- c()
index <- 0
for (roi in names(finalDF)){
modelsummary <- as.data.frame(finalDF[[roi]][["coefficients"]])
modelsummary <- filter(modelsummary, !(rownames(modelsummary) == "(Intercept)"))
y <- sum(modelsummary$`Pr(>|t|)` < 0.05)
if (y > 0){
ROIs2Check[length(ROIs2Check)+ 1] <- roi
}
}
print(ROIs2Check)
finalDF[["Middle_cerebellar_peduncle"]]
finalDF[["Middle_cerebellar_peduncle"]]
as.table(finalDF[["Middle_cerebellar_peduncle"]])
print(finalDF[["Middle_cerebellar_peduncle"]])
ROIs2Check
finalDF[["Fornix_(column_and_body_of_fornix)"]]
model1 <- lm(maze_accuracy_pct ~ fornix_body + sex.1 + age_scan_years, data = apriori_FA)
summary(model1)
finalDF[["Cingulum_(hippocampus)_R"]]
finalDF[["Cingulum_(hippocampus)_L"]]
finalDF[["Superior_fronto-occipital_fasciculus_(could_be_a_part_of_anterior_internal_capsule)_R"]]
finalDF[["Superior_fronto-occipital_fasciculus_(could_be_a_part_of_anterior_internal_capsule)_L"]]
TableOutput(as.data.frame(ROIs2Check))
FA_DSP_results <- AprioriPcorTest(dataframe = apriori_FA, task ="dsp_si_true_pct",covariates = c("sex.1","age_scan_years"))
TableOutput(FA_DSP_results)
