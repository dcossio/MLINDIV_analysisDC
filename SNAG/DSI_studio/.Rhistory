annotate("text", label = "FDR=0.05", x = 0.17 , y = 0.8, color="#f4a2d0", size=4)  +
annotate("text", label = "FDR<0.01", x = 0.17 , y = 0.7, color="#87ced0", size=4)
figDF %>% filter(REPO != 0) %>% ggplot(aes(y=maze_accuracy_pct,x=Cerebellum_L,color=factor(REPO)))+geom_point() +
stat_smooth(method="lm", se=FALSE)+
scale_color_manual(values = c('#e0216e','#f9dd9a','#87ced0'),labels = c("Pre", "Peri", "Post")) +
labs( x = "Cerebellum_L",
y = "% Correct")+
scale_y_continuous(breaks=c(0,1)) +
theme(
axis.title.x = element_text(vjust = -2, size = 16),
axis.title.y = element_text(vjust = 4, size = 16),
axis.text.x = element_text(size = 12, color="black"),
axis.text.y = element_text(size = 12,color="black"),
panel.background = element_blank(),
panel.grid.major = element_blank(),
axis.line = element_line(colour = "black"),
legend.title=element_blank())+
ylim(min(figDF$maze_accuracy_pct), max(figDF$maze_accuracy_pct)) +
annotate("text", label = "FDR< 0.01", x = 0.17 , y = 0.9, color="#e0216e", size=4) +
annotate("text", label = "FDR=0.05", x = 0.17 , y = 0.8, color="#f9dd9a", size=4)  +
annotate("text", label = "FDR<0.01", x = 0.17 , y = 0.7, color="#87ced0", size=4)
tiff("QA_cerebellumL.noFame_REPO.tiff", units="in", width=5, height=4, res=300)
figDF %>% filter(REPO != 0) %>% ggplot(aes(y=maze_accuracy_pct,x=Cerebellum_L,color=factor(REPO)))+geom_point() +
stat_smooth(method="lm", se=FALSE)+
scale_color_manual(values = c('#e0216e','#f9dd9a','#87ced0'),labels = c("Pre", "Peri", "Post")) +
labs( x = "Cerebellum_L",
y = "% Correct")+
scale_y_continuous(breaks=c(0,1)) +
theme(
axis.title.x = element_text(vjust = -2, size = 16),
axis.title.y = element_text(vjust = 4, size = 16),
axis.text.x = element_text(size = 12, color="black"),
axis.text.y = element_text(size = 12,color="black"),
panel.background = element_blank(),
panel.grid.major = element_blank(),
axis.line = element_line(colour = "black"),
legend.title=element_blank())+
ylim(min(figDF$maze_accuracy_pct), max(figDF$maze_accuracy_pct)) +
annotate("text", label = "FDR< 0.01", x = 0.17 , y = 0.9, color="#e0216e", size=4) +
annotate("text", label = "FDR=0.05", x = 0.17 , y = 0.8, color="#f9dd9a", size=4)  +
annotate("text", label = "FDR<0.01", x = 0.17 , y = 0.7, color="#87ced0", size=4)
dev.off()
figDF %>% filter(REPO != 0) %>% ggplot(aes(y=maze_accuracy_pct,x=Cerebellum_L,color=factor(REPO)))+geom_point() +
stat_smooth(method="lm", se=FALSE)+
scale_color_manual(values = c('#a521e0','#f9dd9a','#87ced0'),labels = c("Pre", "Peri", "Post")) +
labs( x = "Cerebellum_L",
y = "% Correct")+
scale_y_continuous(breaks=c(0,1)) +
theme(
axis.title.x = element_text(vjust = -2, size = 16),
axis.title.y = element_text(vjust = 4, size = 16),
axis.text.x = element_text(size = 12, color="black"),
axis.text.y = element_text(size = 12,color="black"),
panel.background = element_blank(),
panel.grid.major = element_blank(),
axis.line = element_line(colour = "black"),
legend.title=element_blank())+
ylim(min(figDF$maze_accuracy_pct), max(figDF$maze_accuracy_pct)) +
annotate("text", label = "FDR< 0.01", x = 0.17 , y = 0.9, color="#a521e0", size=4) +
annotate("text", label = "FDR=0.05", x = 0.17 , y = 0.8, color="#f9dd9a", size=4)  +
annotate("text", label = "FDR<0.01", x = 0.17 , y = 0.7, color="#87ced0", size=4)
dev.off()
tiff("QA_cerebellumL.noFame_REPO.tiff", units="in", width=5, height=4, res=300)
figDF %>% filter(REPO != 0) %>% ggplot(aes(y=maze_accuracy_pct,x=Cerebellum_L,color=factor(REPO)))+geom_point() +
stat_smooth(method="lm", se=FALSE)+
scale_color_manual(values = c('#a521e0','#f9dd9a','#87ced0'),labels = c("Pre", "Peri", "Post")) +
labs( x = "Cerebellum_L",
y = "% Correct")+
scale_y_continuous(breaks=c(0,1)) +
theme(
axis.title.x = element_text(vjust = -2, size = 16),
axis.title.y = element_text(vjust = 4, size = 16),
axis.text.x = element_text(size = 12, color="black"),
axis.text.y = element_text(size = 12,color="black"),
panel.background = element_blank(),
panel.grid.major = element_blank(),
axis.line = element_line(colour = "black"),
legend.title=element_blank())+
ylim(min(figDF$maze_accuracy_pct), max(figDF$maze_accuracy_pct)) +
annotate("text", label = "FDR< 0.01", x = 0.17 , y = 0.9, color="#a521e0", size=4) +
annotate("text", label = "FDR=0.05", x = 0.17 , y = 0.8, color="#f9dd9a", size=4)  +
annotate("text", label = "FDR<0.01", x = 0.17 , y = 0.7, color="#87ced0", size=4)
dev.off()
figDF <- Extract_raw_values(ReadingCSVFunc("maze_acc/QA/noFNAME/females_maze_accuracy_pos.csv"), "QA") %>%  select(c("subject_id", "sex", "age_scan_years", "maze_accuracy_pct", "REPO", "Corticospinal_Tract_L", "Corticospinal_Tract_R")) %>% filter(sex == "Female")
temp <- Extract_raw_values(ReadingCSVFunc("maze_acc/QA/noFNAME/male.maze_accuracy_pct.t2.length25.pos_corr.csv"), "QA") %>%  select(c("subject_id", "sex", "age_scan_years", "maze_accuracy_pct", "REPO", "Corticospinal_Tract_L", "Corticospinal_Tract_R")) %>% filter(sex == "Male")
figDF <- rbind(figDF, temp)
tiff("REPOCorticoSpinalL.tiff", units="in", width=5, height=3, res=300)
figDF %>% filter(REPO != 0) %>%  ggplot(aes(y=maze_accuracy_pct,x=Corticospinal_Tract_L,color=factor(REPO),1))+
geom_point()+
stat_smooth(method="lm", se=FALSE)+
scale_color_manual(values = c('#a521e0','#f9dd9a','#87ced0'), labels = c("Pre", "Peri", "Post")) +
labs( x = "CorticoSpinalL.",
y = "% Correct")+
scale_y_continuous(breaks=c(0,1)) +
theme(
axis.title.x = element_text(vjust = -2, size = 16),
axis.title.y = element_text(vjust = 4, size = 16),
axis.text.x = element_text(size = 12, color="black"),
axis.text.y = element_text(size = 12,color="black"),
panel.background = element_blank(),
panel.grid.major = element_blank(),
axis.line = element_line(colour = "black"),
legend.title=element_blank())+
ylim(min(figDF$maze_accuracy_pct), max(figDF$maze_accuracy_pct)) +
annotate("text", label = "FDR< 0.01", x = 0.25 , y = 0.9, color="#a521e0", size=4) +
annotate("text", label = "FDR<0.001", x = 0.25 , y = 0.8, color="#f9dd9a", size=4)  +
annotate("text", label = "FDR<0.01", x = 0.25 , y = 0.7, color="#87ced0", size=4)
dev.off()
figDF <- Extract_raw_values(ReadingCSVFunc("maze_acc/MD/noFNAME/newversion/maze.MD.all.pos.csv"), "MD") %>%  select(c("subject_id", "sex", "age_scan_years", "maze_accuracy_pct", "REPO", "Fornix_L", "Fornix_R"))  %>% filter(REPO != 0)
tiff("MD_fornixR.REPO.nofname.tiff", units="in", width=5, height=3, res=300)
ggplot(figDF,aes(y=maze_accuracy_pct,x=Fornix_R,color=factor(REPO)))+geom_point() +
stat_smooth(method="lm", se=FALSE)+
scale_color_manual(values = c('#a521e0','#f9dd9a','#87ced0'),labels = c("Pre", "Peri", "Post"))+
labs( x = "Fornix R",
y = "% Correct")+
scale_y_continuous(breaks=c(0,1)) +
theme(
axis.title.x = element_text(vjust = -2, size = 16),
axis.title.y = element_text(vjust = 4, size = 16),
axis.text.x = element_text(size = 12, color="black"),
axis.text.y = element_text(size = 12,color="black"),
panel.background = element_blank(),
panel.grid.major = element_blank(),
axis.line = element_line(colour = "black"),
legend.title=element_blank())+
ylim(min(figDF$maze_accuracy_pct), max(figDF$maze_accuracy_pct))+
annotate("text", label = "FDR< 0.001", x = 1.4 , y = 0.9, color="#a521e0", size=4) +
annotate("text", label = "FDR< 0.001", x = 1.4 , y = 0.8, color="#f9dd9a", size=4)  +
annotate("text", label = "FDR<0.001", x = 1.4 , y = 0.7, color="#87ced0", size=4)
dev.off()
library(ggplot2)
#(plyr)
library(tidyverse)
# library(dplyr)
# library(tidyr)
library(stringr)
library(kableExtra)
# library(data.table)
# library(network)
# library(tidygraph)
# library(ggraph)
# library(igraph)
# library(networkD3)
# library(CINNA)
# library(umap)
# library(plotly)
#library(factoextra)
#library(lsr)
# library(car)
library(ggpubr)
#library(entropy)
#library(ds4psy)
# library(pROC)
#library(devtools)
#library(BRRR)
#library(stats)
#library(afex)
library(knitr)
library(janitor)
library(car)
library(ggiraph)
library(ggiraphExtra)
library(moonBook)
library(nationalparkcolors)
library(gridExtra)
library(markdown)
working_dir <- "/Users/danielacossio/Documents/Chrastil_Lab/Projects/SNAG/DSI_rerun_data/"
#working_dir <- "/Users/danielacossio/Library/CloudStorage/GoogleDrive-dcossio1@uci.edu/Other computers/My iMac/Chrastil_Lab/Projects/SNAG/DSI_rerun_data/" # Laptop path
rows2grab <- c("Tract Name", "number of tracts","mean length(mm)","diameter(mm)", "volume(mm^3)")
# sub_info <- read.csv("/Users/danielacossio/Documents/Chrastil_Lab/Projects/SNAG/DSI_rerun_data/subject_info.csv")
sub_info <- read.csv(paste0(working_dir,"subject_info.csv"))
ReadingCSVFunc <- function(pathname){
read.delim(paste0(working_dir, pathname), header=FALSE,sep = "\t")
}
CleanInput <- function(DF){
DF <- DF %>% remove_empty("cols")
if(length(DF) < 3){
DF <- DF %>%
filter(V1 %in% rows2grab) %>%
t() %>%
`colnames<-`(rows2grab) %>%
as.data.frame() %>%
`[`(-c(1),)
} else{
DF <- DF %>%
filter(V1 %in% rows2grab) %>%
t() %>%
`colnames<-`(rows2grab) %>%
`[`(-c(1),) %>%
as.data.frame() %>%
arrange(`Tract Name`)
}
return(DF)
}
Extract_raw_values <- function(DF,Metric) {
# Purpose of this function is to clean the data without me having to copy and paste everything later.
# Data = raw unclean dataframe we want to clean up
# Metric will be either MD or QA
# sex is either male or female
# Let's read in our data frame
colNames <- DF  %>% remove_empty("cols") %>%
filter(V1 == "Tract Name") %>% t() %>% `[`(-1)
# grab  ROIcolumn names
subinfo <- sub_info  %>% select(c("subject_id", "sex", "age_scan_years", "maze_accuracy_pct", "REPO"))
# Let's grab our values
if (Metric == "MD"){
Values <- DF %>% remove_empty("cols") %>%
filter(str_detect(V1, c("mean_md"))) %>%
`colnames<-`(c("Subjects",colNames)) %>% filter(!str_detect(Subjects, c("sub-369")))
}
else{
Values <- DF %>%
remove_empty("cols") %>%
filter(str_detect(V1, c("mean_qa"))) %>%
`colnames<-`(c("Subjects",colNames)) %>% filter(!str_detect(Subjects, c("sub-369")))
}
# now let's put this together
if (length(Values) < 3) {
Values[,2] <- as.numeric(Values[,2])
}else{
ConvToNum <-  apply(Values[,2:length(Values)],2, as.numeric)
Values[,2:length(Values)] <- ConvToNum
}
cleanedDF <- cbind(subinfo,Values) %>% na.omit() %>% select(-c("Subjects"))
return (cleanedDF)
}
TableOutput <- function(df, style, width, height, caption){
if (style == "classic"){
knitr::kable(df, row.names=F) %>% kable_classic(full_width = F, html_font = "Cambria")
} else {
knitr::kable(df, row.names=F) %>% kable_styling(bootstrap_options =  c("striped", "hover", "condensed")) %>% scroll_box(width = paste0(width,"px"), height = paste0(height,"px"))
}
}
TableOutput(CleanInput(ReadingCSVFunc("Loop/QA/PE/fname_cov/all.loopPE.rad3.neg.csv")), "classic", 500, 200," Table 1.Tracts with QA negatively associated with loop PE rad3 ")
library(ggplot2)
#(plyr)
library(tidyverse)
# library(dplyr)
# library(tidyr)
library(stringr)
library(kableExtra)
# library(data.table)
# library(network)
# library(tidygraph)
# library(ggraph)
# library(igraph)
# library(networkD3)
# library(CINNA)
# library(umap)
# library(plotly)
#library(factoextra)
#library(lsr)
# library(car)
library(ggpubr)
#library(entropy)
#library(ds4psy)
# library(pROC)
#library(devtools)
#library(BRRR)
#library(stats)
#library(afex)
library(knitr)
library(janitor)
library(car)
library(ggiraph)
library(ggiraphExtra)
library(moonBook)
library(nationalparkcolors)
library(gridExtra)
library(markdown)
working_dir <- "/Users/danielacossio/Documents/Chrastil_Lab/Projects/SNAG/DSI_rerun_data/"
#working_dir <- "/Users/danielacossio/Library/CloudStorage/GoogleDrive-dcossio1@uci.edu/Other computers/My iMac/Chrastil_Lab/Projects/SNAG/DSI_rerun_data/" # Laptop path
rows2grab <- c("Tract Name", "number of tracts","mean length(mm)","diameter(mm)", "volume(mm^3)")
# sub_info <- read.csv("/Users/danielacossio/Documents/Chrastil_Lab/Projects/SNAG/DSI_rerun_data/subject_info.csv")
sub_info <- read.csv(paste0(working_dir,"subject_info.csv"))
ReadingCSVFunc <- function(pathname){
read.delim(paste0(working_dir, pathname), header=FALSE,sep = "\t")
}
CleanInput <- function(DF){
DF <- DF %>% remove_empty("cols")
if(length(DF) < 3){
DF <- DF %>%
filter(V1 %in% rows2grab) %>%
t() %>%
`colnames<-`(rows2grab) %>%
as.data.frame() %>%
`[`(-c(1),)
} else{
DF <- DF %>%
filter(V1 %in% rows2grab) %>%
t() %>%
`colnames<-`(rows2grab) %>%
`[`(-c(1),) %>%
as.data.frame() %>%
arrange(`Tract Name`)
}
return(DF)
}
Extract_raw_values <- function(DF,Metric) {
# Purpose of this function is to clean the data without me having to copy and paste everything later.
# Data = raw unclean dataframe we want to clean up
# Metric will be either MD or QA
# sex is either male or female
# Let's read in our data frame
colNames <- DF  %>% remove_empty("cols") %>%
filter(V1 == "Tract Name") %>% t() %>% `[`(-1)
# grab  ROIcolumn names
subinfo <- sub_info  %>% select(c("subject_id", "sex", "age_scan_years", "maze_accuracy_pct", "REPO"))
# Let's grab our values
if (Metric == "MD"){
Values <- DF %>% remove_empty("cols") %>%
filter(str_detect(V1, c("mean_md"))) %>%
`colnames<-`(c("Subjects",colNames)) %>% filter(!str_detect(Subjects, c("sub-369")))
}
else{
Values <- DF %>%
remove_empty("cols") %>%
filter(str_detect(V1, c("mean_qa"))) %>%
`colnames<-`(c("Subjects",colNames)) %>% filter(!str_detect(Subjects, c("sub-369")))
}
# now let's put this together
if (length(Values) < 3) {
Values[,2] <- as.numeric(Values[,2])
}else{
ConvToNum <-  apply(Values[,2:length(Values)],2, as.numeric)
Values[,2:length(Values)] <- ConvToNum
}
cleanedDF <- cbind(subinfo,Values) %>% na.omit() %>% select(-c("Subjects"))
return (cleanedDF)
}
TableOutput <- function(df, style, width, height, caption){
if (style == "classic"){
knitr::kable(df, row.names=F) %>% kable_classic(full_width = F, html_font = "Cambria")
} else {
knitr::kable(df, row.names=F) %>% kable_styling(bootstrap_options =  c("striped", "hover", "condensed")) %>% scroll_box(width = paste0(width,"px"), height = paste0(height,"px"))
}
}
TableOutput(CleanInput(ReadingCSVFunc("Loop/QA/PE/fname_cov/all.loopPE.rad3.neg.csv")), "classic", 500, 200)
TableOutput(CleanInput(ReadingCSVFunc("Loop/QA/PE/noFNAME/rad3pe.all.qa.neg.csv")), "classic", 500, 200)
TableOutput(CleanInput(ReadingCSVFunc("Loop/QA/PE/noFNAME/rad3pe.fem.qa.pos.csv")), "classic", 500, 200, "Table 1.Tracts with QA positively associated with loop PE")
TableOutput(CleanInput(ReadingCSVFunc("Loop/QA/PE/noFNAME/rad3pe.fem.qa.neg.csv")), "classic", 500, 200, "Table 1.Tracts with QA positively associated with loop PE")
TableOutput(CleanInput(ReadingCSVFunc("Loop/QA/PE/noFNAME/rad3pe.male.qa.neg.csv")), "classic", 500, 200)
TableOutput(CleanInput(ReadingCSVFunc("Loop/QA/PE/noFNAME/rad3pe.male.qa.pos.csv")), "classic", 500, 200)
TableOutput(CleanInput(ReadingCSVFunc("Loop/QA/PE/noFNAME/rad3pe.male.qa.neg.csv")), "classic", 500, 200)
TableOutput(CleanInput(ReadingCSVFunc("Loop/QA/PE/noFNAME/rad3pe.peri.qa.neg.csv")), "classic", 500, 200)
TableOutput(CleanInput(ReadingCSVFunc("Loop/QA/PE/fname_cov/all.loopPE.average.neg.csv")), "classic", 500, 200)
TableOutput(CleanInput(ReadingCSVFunc("Loop/QA/PE/fname_cov/female.loopPE.average.neg.csv")), "classic", 500, 200)
TableOutput(CleanInput(ReadingCSVFunc("Loop/QA/PE/fname_cov/female.loopPE.average.pos.csv")), "classic", 500, 200)
TableOutput(CleanInput(ReadingCSVFunc("Loop/QA/DE/nofname/rad3de.all.qa.pos")), "classic", 500, 200)
TableOutput(CleanInput(ReadingCSVFunc("Loop/QA/DE/nofname/rad3de.all.qa.pos.csv")), "classic", 500, 200)
TableOutput(CleanInput(ReadingCSVFunc("Loop/QA/DE/nofname/rad3de.fem.qa.pos.csv")), "classic", 500, 200)
View(Extract_raw_values)
working_dir <- "/Users/danielacossio/Documents/Chrastil_Lab/Projects/SNAG/DSI_rerun_data/"
#working_dir <- "/Users/danielacossio/Library/CloudStorage/GoogleDrive-dcossio1@uci.edu/Other computers/My iMac/Chrastil_Lab/Projects/SNAG/DSI_rerun_data/" # Laptop path
sub_info <- read.csv(paste0(working_dir,"subject_info.csv"))
test_path <- paste0(working_dir,"subject_info.csv")
sub_info <- read.csv(paste0(working_dir,"subject_info.csv"))
test_path <- paste0(working_dir,"subject_info.csv")
print(test_path)
sub_info <- read.csv(paste0(working_dir,"subject_info.csv"))
read.csv(paste0(working_dir,"Loop/MD/fname/MD_loop_pe_rad3_all_neg.csv"))
read.csv(paste0(working_dir,"Loop/MD/fname/MD_loop_pe_rad3_all_neg.csv")) %>% knitr::kable(df, row.names=F) %>% kable_classic(full_width = F, html_font = "Cambria")
library(ggplot2)
#(plyr)
library(tidyverse)
# library(dplyr)
# library(tidyr)
library(stringr)
library(kableExtra)
# library(data.table)
# library(network)
# library(tidygraph)
# library(ggraph)
# library(igraph)
# library(networkD3)
# library(CINNA)
# library(umap)
# library(plotly)
#library(factoextra)
#library(lsr)
# library(car)
library(ggpubr)
#library(entropy)
#library(ds4psy)
# library(pROC)
#library(devtools)
#library(BRRR)
#library(stats)
#library(afex)
library(knitr)
library(janitor)
library(car)
library(ggiraph)
library(ggiraphExtra)
library(moonBook)
library(nationalparkcolors)
library(gridExtra)
library(markdown)
read.csv(paste0(working_dir,"Loop/MD/fname/MD_loop_pe_rad3_all_neg.csv")) %>% knitr::kable(df, row.names=F) %>% kable_classic(full_width = F, html_font = "Cambria")
read.csv(paste0(working_dir,"Loop/MD/fname/MD_loop_pe_rad3_all_neg.csv")) %>% knitr::kable( row.names=F) %>% kable_classic(full_width = F, html_font = "Cambria")
read.delim(paste0(working_dir,"Loop/MD/fname/MD_loop_pe_rad3_all_neg.csv"))
read.csv(paste0(working_dir,"Loop/MD/fname/MD_loop_pe_rad3_all_neg.csv")) %>% knitr::kable( row.names=F) %>% kable_styling(bootstrap_options =  c("striped", "hover", "condensed")) %>% scroll_box(width = paste0(width,"px"), height = paste0(height,"px"))
read.csv(paste0(working_dir,"Loop/MD/fname/MD_loop_pe_rad3_all_neg.csv")) %>% knitr::kable( row.names=F) %>% kable_styling(bootstrap_options =  c("striped", "hover", "condensed")) %>% scroll_box(width = 500), height = 200)
read.csv(paste0(working_dir,"Loop/MD/fname/MD_loop_pe_rad3_all_neg.csv")) %>% knitr::kable( row.names=F) %>% kable_styling(bootstrap_options =  c("striped", "hover", "condensed")) %>% scroll_box(width = 500, height = 200)
read.delim(paste0(working_dir,"Loop/MD/fname/MD_loop_pe_rad3_all_neg.csv")) %>% kknitr::kable( row.names=F) %>% kable_styling(bootstrap_options =  c("striped", "hover", "condensed")) %>% scroll_box(width = 500, height = 200)
read.delim(paste0(working_dir,"Loop/MD/fname/MD_loop_pe_rad3_all_neg.csv")) %>% knitr::kable( row.names=F) %>% kable_styling(bootstrap_options =  c("striped", "hover", "condensed")) %>% scroll_box(width = 500, height = 200)
read.delim(paste0(working_dir,"Loop/MD/fname/MD_loop_pe_rad3_all_neg.csv")) %>% knitr::kable() %>% kable_styling(bootstrap_options =  c("striped", "hover", "condensed")) %>% scroll_box(width = 100, height = 100)
library(ggplot2)
#(plyr)
library(tidyverse)
# library(dplyr)
# library(tidyr)
library(stringr)
library(kableExtra)
# library(data.table)
# library(network)
# library(tidygraph)
# library(ggraph)
# library(igraph)
# library(networkD3)
# library(CINNA)
# library(umap)
# library(plotly)
#library(factoextra)
#library(lsr)
# library(car)
library(ggpubr)
#library(entropy)
#library(ds4psy)
# library(pROC)
#library(devtools)
#library(BRRR)
#library(stats)
#library(afex)
library(knitr)
library(janitor)
library(car)
library(ggiraph)
library(ggiraphExtra)
library(moonBook)
library(nationalparkcolors)
library(gridExtra)
library(markdown)
working_dir <- "/Users/danielacossio/Documents/Chrastil_Lab/Projects/SNAG/DSI_rerun_data/"
#working_dir <- "/Users/danielacossio/Library/CloudStorage/GoogleDrive-dcossio1@uci.edu/Other computers/My iMac/Chrastil_Lab/Projects/SNAG/DSI_rerun_data/" # Laptop path
rows2grab <- c("Tract Name", "number of tracts","mean length(mm)","diameter(mm)", "volume(mm^3)")
# sub_info <- read.csv("/Users/danielacossio/Documents/Chrastil_Lab/Projects/SNAG/DSI_rerun_data/subject_info.csv")
sub_info <- read.csv(paste0(working_dir,"subject_info.csv"))
ReadingCSVFunc <- function(pathname){
read.delim(paste0(working_dir, pathname), header=FALSE,sep = "\t")
}
CleanInput <- function(DF){
DF <- DF %>% remove_empty("cols")
if(length(DF) < 3){
DF <- DF %>%
filter(V1 %in% rows2grab) %>%
t() %>%
`colnames<-`(rows2grab) %>%
as.data.frame() %>%
`[`(-c(1),)
} else{
DF <- DF %>%
filter(V1 %in% rows2grab) %>%
t() %>%
`colnames<-`(rows2grab) %>%
`[`(-c(1),) %>%
as.data.frame() %>%
arrange(`Tract Name`)
}
return(DF)
}
Extract_raw_values <- function(DF,Metric) {
# Purpose of this function is to clean the data without me having to copy and paste everything later.
# Data = raw unclean dataframe we want to clean up
# Metric will be either MD or QA
# sex is either male or female
# Let's read in our data frame
colNames <- DF  %>% remove_empty("cols") %>%
filter(V1 == "Tract Name") %>% t() %>% `[`(-1)
# grab  ROIcolumn names
subinfo <- sub_info  %>% select(c("subject_id", "sex", "age_scan_years", "maze_accuracy_pct", "REPO"))
# Let's grab our values
if (Metric == "MD"){
Values <- DF %>% remove_empty("cols") %>%
filter(str_detect(V1, c("mean_md"))) %>%
`colnames<-`(c("Subjects",colNames)) %>% filter(!str_detect(Subjects, c("sub-369")))
}
else{
Values <- DF %>%
remove_empty("cols") %>%
filter(str_detect(V1, c("mean_qa"))) %>%
`colnames<-`(c("Subjects",colNames)) %>% filter(!str_detect(Subjects, c("sub-369")))
}
# now let's put this together
if (length(Values) < 3) {
Values[,2] <- as.numeric(Values[,2])
}else{
ConvToNum <-  apply(Values[,2:length(Values)],2, as.numeric)
Values[,2:length(Values)] <- ConvToNum
}
cleanedDF <- cbind(subinfo,Values) %>% na.omit() %>% select(-c("Subjects"))
return (cleanedDF)
}
TableOutput <- function(df, style, width, height, caption){
if (style == "classic"){
knitr::kable(df, row.names=F) %>% kable_classic(full_width = F, html_font = "Cambria")
} else {
knitr::kable(df, row.names=F) %>% kable_styling(bootstrap_options =  c("striped", "hover", "condensed")) %>% scroll_box(width = paste0(width,"px"), height = paste0(height,"px"))
}
}
TableOutput(CleanInput(ReadingCSVFunc("Loop/QA/DE/fname/male.loopDE.ave.pos.csv")), "classic", 500, 200)
TableOutput(CleanInput(ReadingCSVFunc("Loop/QA/DE/nofname/avgde.male.qa.pos.csv")), "classic", 500, 200)
