library(kableExtra)
# library(data.table)
# library(network)
# library(tidygraph)
# library(ggraph)
# library(igraph)
# library(networkD3)
# library(CINNA)
# library(umap)
# library(plotly)
#library(factoextra)
#library(lsr)
# library(car)
library(ggpubr)
#library(entropy)
#library(ds4psy)
# library(pROC)
#library(devtools)
#library(BRRR)
#library(stats)
#library(afex)
library(knitr)
library(janitor)
library(car)
library(ggiraph)
library(ggiraphExtra)
library(moonBook)
library(nationalparkcolors)
library(gridExtra)
library(markdown)
working_dir <- "/Users/danielacossio/Documents/Chrastil_Lab/Projects/SNAG/DSI_rerun_data/"
# PE_working_dir <- "/Users/danielacossio/Library/CloudStorage/GoogleDrive-dcossio1@uci.edu/My Drive/White matter tract/MidlifeWM_DSI2023/DSI/maze/Path_eff/"
rows2grab <- c("Tract Name", "number of tracts","mean length(mm)","diameter(mm)", "volume(mm^3)")
sub_info <- read.csv("/Users/danielacossio/Documents/Chrastil_Lab/Projects/SNAG/DSI_rerun_data/subject_info.csv")
ReadingCSVFunc <- function(pathname){
read.delim(paste0(working_dir, pathname), header=FALSE,sep = "\t")
}
CleanInput <- function(DF){
DF <- DF %>%
remove_empty("cols") %>%
filter(V1 %in% rows2grab) %>%
t() %>%
`colnames<-`(rows2grab) %>%
`[`(-c(1),) %>%
as.data.frame()
return(DF)
}
Extract_raw_values <- function(DF,Metric) {
# Purpose of this function is to clean the data without me having to copy and paste everything later.
# Data = raw unclean dataframe we want to clean up
# Metric will be either MD or QA
# sex is either male or female
# Let's read in our data frame
# grab  ROIcolumn names
colNames <- DF  %>% remove_empty("cols") %>%
filter(V1 == "Tract Name") %>% t() %>% `[`(-1)
subinfo <- sub_info  %>% select(c("subject_id", "sex", "age_scan_years", "maze_accuracy_pct"))
# Let's grab our values
if (Metric == "MD"){
Values <- DF %>% remove_empty("cols") %>%
filter(str_detect(V1, c("mean_md"))) %>%
`colnames<-`(c("Subjects",colNames))
}
else{
Values <- DF %>%
remove_empty("cols") %>%
filter(str_detect(V1, c("mean_qa"))) %>%
`colnames<-`(c("Subjects",colNames)) %>% filter(!str_detect(Subjects, c("sub-369")))
}
# now let's put this together
ConvToNum <-  apply(Values[,2:length(Values)],2, as.numeric)
Values[,2:length(Values)] <- ConvToNum
cleanedDF <- cbind(subinfo,Values) %>% na.omit() %>% select(-c("Subjects"))
return (cleanedDF)
}
TableOutput <- function(df, style, width, height, caption){
if (style == "classic"){
knitr::kable(df, row.names=F, caption = caption) %>% kable_classic(full_width = F, html_font = "Cambria")
} else {
knitr::kable(df, row.names=F) %>% kable_styling(bootstrap_options =  c("striped", "hover", "condensed")) %>% scroll_box(width = paste0(width,"px"), height = paste0(height,"px"))
}
}
avePE_QA_all<- CleanInput(ReadingCSVFunc("Loop/QA/PE/fname_cov/all.loopPE.average.neg.csv"))
TableOutput(avePE_QA_all, "classic", 500, 200," Table 1.Tracts with QA negatively associated with loop PE rad3 ")
avePE_QA_all2 <- CleanInput(ReadingCSVFunc("/Loop/QA/DE/nofname/loopDT_all_pos.csv"))
TableOutput(avePE_QA_all2, "classic", 500, 200, " Table 2.Tracts with QA negatively associated with loop PE rad3")
View(avePE_QA_all)
avePE_QA_all %>% arrange(`Tract Name`)
ReadingCSVFunc <- function(pathname){
read.delim(paste0(working_dir, pathname), header=FALSE,sep = "\t")
}
CleanInput <- function(DF){
DF <- DF %>%
remove_empty("cols") %>%
filter(V1 %in% rows2grab) %>%
t() %>%
`colnames<-`(rows2grab) %>%
`[`(-c(1),) %>%
as.data.frame() %>%
arrange(`Tract Name`)
return(DF)
}
Extract_raw_values <- function(DF,Metric) {
# Purpose of this function is to clean the data without me having to copy and paste everything later.
# Data = raw unclean dataframe we want to clean up
# Metric will be either MD or QA
# sex is either male or female
# Let's read in our data frame
# grab  ROIcolumn names
colNames <- DF  %>% remove_empty("cols") %>%
filter(V1 == "Tract Name") %>% t() %>% `[`(-1)
subinfo <- sub_info  %>% select(c("subject_id", "sex", "age_scan_years", "maze_accuracy_pct"))
# Let's grab our values
if (Metric == "MD"){
Values <- DF %>% remove_empty("cols") %>%
filter(str_detect(V1, c("mean_md"))) %>%
`colnames<-`(c("Subjects",colNames))
}
else{
Values <- DF %>%
remove_empty("cols") %>%
filter(str_detect(V1, c("mean_qa"))) %>%
`colnames<-`(c("Subjects",colNames)) %>% filter(!str_detect(Subjects, c("sub-369")))
}
# now let's put this together
ConvToNum <-  apply(Values[,2:length(Values)],2, as.numeric)
Values[,2:length(Values)] <- ConvToNum
cleanedDF <- cbind(subinfo,Values) %>% na.omit() %>% select(-c("Subjects"))
return (cleanedDF)
}
TableOutput <- function(df, style, width, height, caption){
if (style == "classic"){
knitr::kable(df, row.names=F, caption = caption) %>% kable_classic(full_width = F, html_font = "Cambria")
} else {
knitr::kable(df, row.names=F) %>% kable_styling(bootstrap_options =  c("striped", "hover", "condensed")) %>% scroll_box(width = paste0(width,"px"), height = paste0(height,"px"))
}
}
avePE_QA_all2 <- CleanInput(ReadingCSVFunc("/Loop/QA/DE/nofname/loopDT_all_pos.csv"))
TableOutput(avePE_QA_all2, "classic", 500, 200, " Table 2.Tracts with QA negatively associated with loop PE rad3")
avePE_QA_all1 <- CleanInput(ReadingCSVFunc("/Loop/QA/DE/nofname/loopDT_all_pos.csv"))
TableOutput(avePE_QA_all1, "classic", 500, 200, "Table 1.Tracts with QA positively associated with loop PE rad3")
male_neg_MD_maze <- CleanInput(ReadingCSVFunc("maze_acc/MD/noFNAME/MD_male_neg.csv"))
ReadingCSVFunc("maze_acc/MD/noFNAME/MD_male_neg.csv")
ReadingCSVFunc("maze_acc/MD/noFNAME/MD_male_pos.csv")
DF <- ReadingCSVFunc("maze_acc/MD/noFNAME/MD_male_neg.csv")
a <- DF %>%
remove_empty("cols")
View(a)
a %>% filter(V1 %in% rows2grab)
a %>% t()
a %>% filter(V1 %in% rows2grab) %>% t()
a %>%  filter(V1 %in% rows2grab) %>%
t() %>%
`colnames<-`(rows2grab) %>%
`[`(-c(1),) %>%
as.data.frame() %>%
arrange(`Tract Name`)
a %>%  filter(V1 %in% rows2grab) %>%
t() %>%
`colnames<-`(rows2grab)
b <- a %>%  filter(V1 %in% rows2grab) %>%
t() %>%
`colnames<-`(rows2grab)
View(b)
b <- a %>%  filter(V1 %in% rows2grab) %>%
t() %>%
`colnames<-`(rows2grab) %>%
`[`(-c(1),)
b <- a %>%  filter(V1 %in% rows2grab) %>%
t() %>%
`colnames<-`(rows2grab) %>% as.data.frame()
b <- a %>%  filter(V1 %in% rows2grab) %>%
t() %>%
`colnames<-`(rows2grab) %>% as.data.frame() %>%
`[`(-c(1),)
a
length(a)
ReadingCSVFunc <- function(pathname){
read.delim(paste0(working_dir, pathname), header=FALSE,sep = "\t")
}
CleanInput <- function(DF){
DF <- DF %>% remove_empty("cols")
if(length(a) < 3){
DF <- DF %>%
filter(V1 %in% rows2grab) %>%
t() %>%
`colnames<-`(rows2grab) %>%
as.data.frame() %>%
`[`(-c(1),) %>%
arrange(`Tract Name`)
} else{
DF <- DF %>%
filter(V1 %in% rows2grab) %>%
t() %>%
`colnames<-`(rows2grab)
`[`(-c(1),) %>%
as.data.frame() %>%
arrange(`Tract Name`)
}
return(DF)
}
Extract_raw_values <- function(DF,Metric) {
# Purpose of this function is to clean the data without me having to copy and paste everything later.
# Data = raw unclean dataframe we want to clean up
# Metric will be either MD or QA
# sex is either male or female
# Let's read in our data frame
# grab  ROIcolumn names
colNames <- DF  %>% remove_empty("cols") %>%
filter(V1 == "Tract Name") %>% t() %>% `[`(-1)
subinfo <- sub_info  %>% select(c("subject_id", "sex", "age_scan_years", "maze_accuracy_pct"))
# Let's grab our values
if (Metric == "MD"){
Values <- DF %>% remove_empty("cols") %>%
filter(str_detect(V1, c("mean_md"))) %>%
`colnames<-`(c("Subjects",colNames))
}
else{
Values <- DF %>%
remove_empty("cols") %>%
filter(str_detect(V1, c("mean_qa"))) %>%
`colnames<-`(c("Subjects",colNames)) %>% filter(!str_detect(Subjects, c("sub-369")))
}
# now let's put this together
ConvToNum <-  apply(Values[,2:length(Values)],2, as.numeric)
Values[,2:length(Values)] <- ConvToNum
cleanedDF <- cbind(subinfo,Values) %>% na.omit() %>% select(-c("Subjects"))
return (cleanedDF)
}
TableOutput <- function(df, style, width, height, caption){
if (style == "classic"){
knitr::kable(df, row.names=F, caption = caption) %>% kable_classic(full_width = F, html_font = "Cambria")
} else {
knitr::kable(df, row.names=F) %>% kable_styling(bootstrap_options =  c("striped", "hover", "condensed")) %>% scroll_box(width = paste0(width,"px"), height = paste0(height,"px"))
}
}
all_QA <- CleanInput(ReadingCSVFunc("maze_acc/QA/fname_covariate/QA_positive_mazeacc_all_fname.csv"))
TableOutput(all_QA, "classic", 500, 200," Table 1.Tracts with QA positively associated with maze accuracy")
ReadingCSVFunc <- function(pathname){
read.delim(paste0(working_dir, pathname), header=FALSE,sep = "\t")
}
CleanInput <- function(DF){
DF <- DF %>% remove_empty("cols")
if(length(DF) < 3){
DF <- DF %>%
filter(V1 %in% rows2grab) %>%
t() %>%
`colnames<-`(rows2grab) %>%
as.data.frame() %>%
`[`(-c(1),) %>%
arrange(`Tract Name`)
} else{
DF <- DF %>%
filter(V1 %in% rows2grab) %>%
t() %>%
`colnames<-`(rows2grab)
`[`(-c(1),) %>%
as.data.frame() %>%
arrange(`Tract Name`)
}
return(DF)
}
Extract_raw_values <- function(DF,Metric) {
# Purpose of this function is to clean the data without me having to copy and paste everything later.
# Data = raw unclean dataframe we want to clean up
# Metric will be either MD or QA
# sex is either male or female
# Let's read in our data frame
# grab  ROIcolumn names
colNames <- DF  %>% remove_empty("cols") %>%
filter(V1 == "Tract Name") %>% t() %>% `[`(-1)
subinfo <- sub_info  %>% select(c("subject_id", "sex", "age_scan_years", "maze_accuracy_pct"))
# Let's grab our values
if (Metric == "MD"){
Values <- DF %>% remove_empty("cols") %>%
filter(str_detect(V1, c("mean_md"))) %>%
`colnames<-`(c("Subjects",colNames))
}
else{
Values <- DF %>%
remove_empty("cols") %>%
filter(str_detect(V1, c("mean_qa"))) %>%
`colnames<-`(c("Subjects",colNames)) %>% filter(!str_detect(Subjects, c("sub-369")))
}
# now let's put this together
ConvToNum <-  apply(Values[,2:length(Values)],2, as.numeric)
Values[,2:length(Values)] <- ConvToNum
cleanedDF <- cbind(subinfo,Values) %>% na.omit() %>% select(-c("Subjects"))
return (cleanedDF)
}
TableOutput <- function(df, style, width, height, caption){
if (style == "classic"){
knitr::kable(df, row.names=F, caption = caption) %>% kable_classic(full_width = F, html_font = "Cambria")
} else {
knitr::kable(df, row.names=F) %>% kable_styling(bootstrap_options =  c("striped", "hover", "condensed")) %>% scroll_box(width = paste0(width,"px"), height = paste0(height,"px"))
}
}
all_QA <- CleanInput(ReadingCSVFunc("maze_acc/QA/fname_covariate/QA_positive_mazeacc_all_fname.csv"))
a %>%
filter(V1 %in% rows2grab) %>%
t() %>%
`colnames<-`(rows2grab)
a %>%
filter(V1 %in% rows2grab) %>%
t() %>%
`colnames<-`(rows2grab) %>%
as.data.frame() %>%
`[`(-c(1),)
b <- a %>%
filter(V1 %in% rows2grab) %>%
t() %>%
`colnames<-`(rows2grab) %>%
as.data.frame() %>%
`[`(-c(1),)
b arrange(`Tract Name`)
b %>% arrange(`Tract Name`)
ReadingCSVFunc <- function(pathname){
read.delim(paste0(working_dir, pathname), header=FALSE,sep = "\t")
}
CleanInput <- function(DF){
DF <- DF %>% remove_empty("cols")
if(length(DF) < 3){
DF <- DF %>%
filter(V1 %in% rows2grab) %>%
t() %>%
`colnames<-`(rows2grab) %>%
as.data.frame() %>%
`[`(-c(1),)
} else{
DF <- DF %>%
filter(V1 %in% rows2grab) %>%
t() %>%
`colnames<-`(rows2grab)
`[`(-c(1),) %>%
as.data.frame() %>%
arrange(`Tract Name`)
}
return(DF)
}
Extract_raw_values <- function(DF,Metric) {
# Purpose of this function is to clean the data without me having to copy and paste everything later.
# Data = raw unclean dataframe we want to clean up
# Metric will be either MD or QA
# sex is either male or female
# Let's read in our data frame
# grab  ROIcolumn names
colNames <- DF  %>% remove_empty("cols") %>%
filter(V1 == "Tract Name") %>% t() %>% `[`(-1)
subinfo <- sub_info  %>% select(c("subject_id", "sex", "age_scan_years", "maze_accuracy_pct"))
# Let's grab our values
if (Metric == "MD"){
Values <- DF %>% remove_empty("cols") %>%
filter(str_detect(V1, c("mean_md"))) %>%
`colnames<-`(c("Subjects",colNames))
}
else{
Values <- DF %>%
remove_empty("cols") %>%
filter(str_detect(V1, c("mean_qa"))) %>%
`colnames<-`(c("Subjects",colNames)) %>% filter(!str_detect(Subjects, c("sub-369")))
}
# now let's put this together
ConvToNum <-  apply(Values[,2:length(Values)],2, as.numeric)
Values[,2:length(Values)] <- ConvToNum
cleanedDF <- cbind(subinfo,Values) %>% na.omit() %>% select(-c("Subjects"))
return (cleanedDF)
}
TableOutput <- function(df, style, width, height, caption){
if (style == "classic"){
knitr::kable(df, row.names=F, caption = caption) %>% kable_classic(full_width = F, html_font = "Cambria")
} else {
knitr::kable(df, row.names=F) %>% kable_styling(bootstrap_options =  c("striped", "hover", "condensed")) %>% scroll_box(width = paste0(width,"px"), height = paste0(height,"px"))
}
}
a <- ReadingCSVFunc("maze_acc/QA/fname_covariate/QA_positive_mazeacc_all_fname.csv")
View(a)
b <-  a %>% DF %>%
filter(V1 %in% rows2grab) %>%
t() %>%
`colnames<-`(rows2grab)
`[`(-c(1),) %>%
as.data.frame()
View(b)
b <-  a  %>%
filter(V1 %in% rows2grab) %>%
t() %>%
`colnames<-`(rows2grab)
`[`(-c(1),) %>%
as.data.frame()
b <-  a  %>%
filter(V1 %in% rows2grab)
View(b)
a
b <-  a  %>%
filter(V1 %in% rows2grab)
b <- a%>%
filter(V1 %in% rows2grab) %>%
t()
b <- a%>%
filter(V1 %in% rows2grab) %>%
t() %>%
`colnames<-`(rows2grab)
View(b)
b <- filter(V1 %in% rows2grab) %>%
t() %>%
`colnames<-`(rows2grab)
`[`(-c(1),) %>%
as.data.frame()
b <- a %>% filter(V1 %in% rows2grab) %>%
t() %>%
`colnames<-`(rows2grab)
`[`(-c(1),) %>%
as.data.frame()
b <- a %>% filter(V1 %in% rows2grab) %>%
t() %>%
`colnames<-`(rows2grab)
`[`(-c(1),)
View(b)
b <- a %>%
filter(V1 %in% rows2grab) %>%
t() %>%
`colnames<-`(rows2grab) %>%
`[`(-c(1),) %>%
as.data.frame()
View(b)
ReadingCSVFunc <- function(pathname){
read.delim(paste0(working_dir, pathname), header=FALSE,sep = "\t")
}
CleanInput <- function(DF){
DF <- DF %>% remove_empty("cols")
if(length(DF) < 3){
DF <- DF %>%
filter(V1 %in% rows2grab) %>%
t() %>%
`colnames<-`(rows2grab) %>%
as.data.frame() %>%
`[`(-c(1),)
} else{
DF <- DF %>%
filter(V1 %in% rows2grab) %>%
t() %>%
`colnames<-`(rows2grab) %>%
`[`(-c(1),) %>%
as.data.frame() %>%
arrange(`Tract Name`)
}
return(DF)
}
Extract_raw_values <- function(DF,Metric) {
# Purpose of this function is to clean the data without me having to copy and paste everything later.
# Data = raw unclean dataframe we want to clean up
# Metric will be either MD or QA
# sex is either male or female
# Let's read in our data frame
# grab  ROIcolumn names
colNames <- DF  %>% remove_empty("cols") %>%
filter(V1 == "Tract Name") %>% t() %>% `[`(-1)
subinfo <- sub_info  %>% select(c("subject_id", "sex", "age_scan_years", "maze_accuracy_pct"))
# Let's grab our values
if (Metric == "MD"){
Values <- DF %>% remove_empty("cols") %>%
filter(str_detect(V1, c("mean_md"))) %>%
`colnames<-`(c("Subjects",colNames))
}
else{
Values <- DF %>%
remove_empty("cols") %>%
filter(str_detect(V1, c("mean_qa"))) %>%
`colnames<-`(c("Subjects",colNames)) %>% filter(!str_detect(Subjects, c("sub-369")))
}
# now let's put this together
ConvToNum <-  apply(Values[,2:length(Values)],2, as.numeric)
Values[,2:length(Values)] <- ConvToNum
cleanedDF <- cbind(subinfo,Values) %>% na.omit() %>% select(-c("Subjects"))
return (cleanedDF)
}
TableOutput <- function(df, style, width, height, caption){
if (style == "classic"){
knitr::kable(df, row.names=F, caption = caption) %>% kable_classic(full_width = F, html_font = "Cambria")
} else {
knitr::kable(df, row.names=F) %>% kable_styling(bootstrap_options =  c("striped", "hover", "condensed")) %>% scroll_box(width = paste0(width,"px"), height = paste0(height,"px"))
}
}
rad3DE_pos_QA_male <- CleanInput(ReadingCSVFunc("/Loop/QA/DE/fname/males.loopDE.rad3.pos.csv"))
TableOutput(rad3DE_pos_QA_fem, "classic", 500, 200, "Table 1.Tracts with QA positively associated with loop Degrees Traveled")
rad3DE_pos_QA_male <- CleanInput(ReadingCSVFunc("/Loop/QA/DE/fname/males.loopDE.rad3.pos.csv"))
TableOutput(rad3DE_pos_QA_male, "classic", 500, 200, "Table 1.Tracts with QA positively associated with loop Degrees Traveled")
rad3DE_neg_QA_male <- CleanInput(ReadingCSVFunc("Loop/QA/DE/nofname/QA_loopAvgDE_male_neg.csv"))
TableOutput(rad3DE_neg_QA_male, "classic", 500, 200, "Table 1.Tracts with QA positively associated with loop Degrees Traveled")
TableOutput(CleanInput(ReadingCSVFunc("Loop/QA/DE/nofname/loopDT_QA_female_pos.csv")), "classic", 500, 200, "Table 1.Tracts with QA positively associated with loop Degrees Traveled")
TableOutput(CleanInput(ReadingCSVFunc("Loop/fname/MD_loop_De_rad3_fem_pos.csv")),rad3DE_pos_MD_fem1, "classic", 500, 200, "Table 1.Tracts with MD positively associated with loop Degrees Traveled")
TableOutput(CleanInput(ReadingCSVFunc("Loop/fname/MD_loop_De_rad3_fem_pos.csv")), "classic", 500, 200, "Table 1.Tracts with MD positively associated with loop Degrees Traveled")
TableOutput(CleanInput(ReadingCSVFunc("/Loop/fname/MD_loop_De_rad3_fem_pos.csv")), "classic", 500, 200, "Table 1.Tracts with MD positively associated with loop Degrees Traveled")
TableOutput(CleanInput(ReadingCSVFunc("Loop/fname/MD_loop_De_rad3_fem_neg.csv)), "classic", 500, 200, "Table 1.Tracts with MD positively associated with loop Degrees Traveled")
male_neg_MD_maze <- CleanInput(ReadingCSVFunc("maze_acc/MD/noFNAME/MD_male_neg.csv"))
TableOutput(male_neg_MD_maze, "classic", 500, 200," Table 1.Tracts with MD negatively associated with maze accuracy")
TableOutput(CleanInput(ReadingCSVFunc("Loop/MD/fname/MD_loop_De_rad3_fem_neg.csv"), "classic", 500, 200, "Table 1.Tracts with MD positively associated with loop Degrees Traveled")
TableOutput(CleanInput(ReadingCSVFunc("Loop/MD/fname/MD_loop_De_rad3_fem_neg.csv")), "classic", 500, 200, "Table 1.Tracts with MD positively associated with loop Degrees Traveled")
TableOutput(CleanInput(ReadingCSVFunc("Loop/MD/fname/MD_loop_De_rad3_fem_pos.csv")), "classic", 500, 200, "Table 1.Tracts with MD positively associated with loop Degrees Traveled")
rad3PE_neg_MD_all <- CleanInput(ReadingCSVFunc("Loop/MD/Loop/fname/MD_loop_pe_rad3_all_neg.csv"))
rad3DE_pos_MD_all <- CleanInput(ReadingCSVFunc("/Loop/MD/fname/MD_loop_DE_rad3_all_pos.csv"))
TableOutput(rad3DE_pos_MD_all, "classic", 500, 200, "Table 1.Tracts with MD positively associated with loop Degrees Traveled")
rad3DE_pos_MD_all1 <- CleanInput(ReadingCSVFunc("Loop/MD/nofname/MD_loopRad3_all_neg.csv"))
TableOutput(rad3DE_pos_MD_all1, "classic", 500, 200, "Table 1.Tracts with MD positively associated with loop Degrees Traveled")
TableOutput(CleanInput(ReadingCSVFunc("Loop/QA/AE/all/all.loopAE.rad3.neg.csv")), "classic", 500, 200," Table 1.Tracts with QA negatively associated with loop AE rad3 ")
TableOutput(CleanInput(ReadingCSVFunc("Loop/QA/AE/all/all.loopAE.rad3.neg.csv")), "classic", 500, 200," Table 1.Tracts with QA negatively associated with loop AE rad3 ")
TableOutput(CleanInput(ReadingCSVFunc("Loop/QA/AE/all/fname/all.loopAE.rad3.neg.csv")), "classic", 500, 200," Table 1.Tracts with QA negatively associated with loop AE rad3 ")
TableOutput(CleanInput(ReadingCSVFunc("Loop/QA/AE/fname/all.loopAE.ave.neg.csv")), "classic", 500, 200," Table 1.Tracts with QA negatively associated with loop AE rad3 ")
TableOutput(CleanInput(ReadingCSVFunc("Loop/QA/AE/fname/all.loopAE.rad3.neg.csv")), "classic", 500, 200," Table 1.Tracts with QA negatively associated with loop AE rad3 ")
TableOutput(CleanInput(ReadingCSVFunc("Loop/QA/AE/nofname/all.loopAE.rad3.neg.csv")), "classic", 500, 200," Table 1.Tracts with QA negatively associated with loop AE rad3 ")
rTableOutput(CleanInput(ReadingCSVFunc("Loop/QA/AE/nofname/QA_loopAErad3_all_pos.csv")), "classic", 500, 200, "Table 1.Tracts with QA positively associated with loop AE rad3")
TableOutput(CleanInput(ReadingCSVFunc("Loop/QA/AE/nofname/QA_loopAErad3_male_pos.csv")), "classic", 500, 200, "Table 1.Tracts with QA positively associated with loop AE rad3")
