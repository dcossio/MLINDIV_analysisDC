library(car)
library(ggiraph)
library(ggiraphExtra)
library(moonBook)
library(nationalparkcolors)
library(gridExtra)
library(markdown)
working_dir <- "/Users/danielacossio/Documents/Chrastil_Lab/Projects/SNAG/DSI_rerun_data/"
#working_dir <- "/Users/danielacossio/Library/CloudStorage/GoogleDrive-dcossio1@uci.edu/Other computers/My iMac/Chrastil_Lab/Projects/SNAG/DSI_rerun_data/" # Laptop path
rows2grab <- c("Tract Name", "number of tracts","mean length(mm)","diameter(mm)", "volume(mm^3)")
#sub_info <- read.csv("/Users/danielacossio/Documents/Chrastil_Lab/Projects/SNAG/DSI_rerun_data/subject_info.csv")
sub_info <- read.csv(paste0(working_dir,"subject_info.csv"))
ReadingCSVFunc <- function(pathname){
read.delim(paste0(working_dir, pathname), header=FALSE,sep = "\t")
}
CleanInput <- function(DF){
DF <- DF %>% remove_empty("cols")
if(length(DF) < 3){
DF <- DF %>%
filter(V1 %in% rows2grab) %>%
t() %>%
`colnames<-`(rows2grab) %>%
as.data.frame() %>%
`[`(-c(1),)
} else{
DF <- DF %>%
filter(V1 %in% rows2grab) %>%
t() %>%
`colnames<-`(rows2grab) %>%
`[`(-c(1),) %>%
as.data.frame()
}
return(DF)
}
Extract_raw_values <- function(DF,Metric) {
# Purpose of this function is to clean the data without me having to copy and paste everything later.
# Data = raw unclean dataframe we want to clean up
# Metric will be either MD or QA
# sex is either male or female
# Let's read in our data frame
colNames <- DF  %>% remove_empty("cols") %>%
filter(V1 == "Tract Name") %>% t() %>% `[`(-1)
# grab  ROIcolumn names
subinfo <- sub_info  %>% select(c("subject_id", "sex", "age_scan_years", "loop_pe_rad3_m", "loop_de_rad3_degree","REPO"))
# Let's grab our values
if (Metric == "MD"){
Values <- DF %>% remove_empty("cols") %>%
filter(str_detect(V1, c("mean_md"))) %>%
`colnames<-`(c("Subjects",colNames)) %>% filter(!str_detect(Subjects, c("sub-369")))
}
else{
Values <- DF %>%
remove_empty("cols") %>%
filter(str_detect(V1, c("mean_qa"))) %>%
`colnames<-`(c("Subjects",colNames)) %>% filter(!str_detect(Subjects, c("sub-369")))
}
# now let's put this together
if (length(Values) < 3) {
Values[,2] <- as.numeric(Values[,2])
}else{
ConvToNum <-  apply(Values[,2:length(Values)],2, as.numeric)
Values[,2:length(Values)] <- ConvToNum
}
cleanedDF <- cbind(subinfo,Values) %>% na.omit() %>% select(-c("Subjects"))
return (cleanedDF)
}
TableOutput <- function(df){
knitr::kable(df, row.names=F) %>% kable_styling(bootstrap_options =  c("striped", "hover", "condensed")) %>% scroll_box(width = "600px", height = "300px")
}
# TableOutput <- function(df, style, width, height, caption){
#
#   if (style == "classic"){
#       knitr::kable(df, row.names=F) %>% kable_classic(full_width = F, html_font = "Cambria")
#   } else {
#       knitr::kable(df, row.names=F) %>% kable_styling(bootstrap_options =  c("striped", "hover", "condensed")) %>% scroll_box(width = paste0(width,"px"), height = paste0(height,"px"))
#
#   }
#
# }
t.test(m_subinfo$loop_pe_avg_m,f_subinfo$loop_pe_avg_m) %>% broom::tidy() %>% knitr::kable() %>%  kable_styling(full_width = F)
t.test(m_subinfo$loop_pe_avg_m,f_subinfo$loop_pe_avg_m) %>% broom::tidy() %>% knitr::kable() %>%  kable_styling(full_width = F)
# creating our separated databases
m_subinfo <- sub_info %>% filter(sex == "Male")
f_subinfo <- sub_info %>% filter(sex == "Female")
# Let's check out normality
p1 <- ggplot(m_subinfo, aes(x=loop_de_avg_degree)) +geom_histogram(bins=10,fill="#028476") +labs(title="male")
shapiro.test(m_subinfo$loop_de_avg_degree) %>% broom::tidy() %>% knitr::kable() %>%  kable_styling()
# Let's check out normality
p1 <- ggplot(m_subinfo, aes(x=loop_de_avg_degree)) +geom_histogram(bins=10,fill="#028476") +labs(title="male")
shapiro.test(m_subinfo$loop_de_avg_degree) %>% broom::tidy() %>% knitr::kable() %>%  kable_styling()
p2 <- ggplot(m_subinfo, aes(x=loop_de_rad3_degree)) +geom_histogram(bins=10,fill="#028476") +labs(title="male")
shapiro.test(m_subinfo$loop_de_rad3_degree)%>% broom::tidy() %>% knitr::kable() %>%  kable_styling()
grid.arrange( p1,p2, nrow = 1)
View(sub_info)
sub_info$loop_ae_avg_degree
ggplot(sub_info, aes(x=loop_ae_avg_degree, y=loop_pe_rad3_m))
ggplot(sub_info, aes(x=loop_ae_avg_degree, y=loop_pe_rad3_m)) +
geom_point()
ggplot(sub_info, aes(x=loop_ae_avg_degree)) +
geom_point()
ggplot(sub_info, aes(x=loop_ae_avg_degree)) +
geom_freqpoly()
ggplot(sub_info, aes(x=loop_ae_avg_degree)) +
geom_boxplot(aes=sex)
ggplot(sub_info, aes(x=loop_ae_avg_degree)) +
geom_boxplot()
ggplot(sub_info, aes(x=sex,y=loop_ae_avg_degree)) +
geom_boxplot()
ggplot(sub_info, aes(x=sex,y=loop_ae_avg_degree)) +
geom_boxplot()
# Let's just scatter plot performance
# pdf(file = paste0("/Users/danielacossio/Downloads/","sex_diff_CSTr_QA_PE.pdf"),width=12, height=8)
ggplot(sub_info, aes(x=sex,y=loop_ae_avg_degree)) +
geom_boxplot()
ggplot(sub_info, aes(x=sex,y=loop_de_avg_degree)) +
geom_boxplot()
ggplot(sub_info, aes(x=sex,y=loop_de_avg_degree)) +
geom_boxplot() +geom_point(size=4, aes(color = factor(sex)))
library(ggplot2)
#(plyr)
library(tidyverse)
# library(dplyr)
# library(tidyr)
library(stringr)
library(kableExtra)
# library(data.table)
# library(network)
# library(tidygraph)
# library(ggraph)
# library(igraph)
# library(networkD3)
# library(CINNA)
# library(umap)
# library(plotly)
#library(factoextra)
#library(lsr)
# library(car)
library(ggpubr)
#library(entropy)
#library(ds4psy)
# library(pROC)
#library(devtools)
#library(BRRR)
#library(stats)
#library(afex)
library(knitr)
library(janitor)
library(car)
library(ggiraph)
library(ggiraphExtra)
library(moonBook)
library(nationalparkcolors)
library(gridExtra)
library(markdown)
working_dir <- "/Users/danielacossio/Documents/Chrastil_Lab/Projects/SNAG/DSI_rerun_data/"
#working_dir <- "/Users/danielacossio/Library/CloudStorage/GoogleDrive-dcossio1@uci.edu/Other computers/My iMac/Chrastil_Lab/Projects/SNAG/DSI_rerun_data/" # Laptop path
rows2grab <- c("Tract Name", "number of tracts","mean length(mm)","diameter(mm)", "volume(mm^3)")
#sub_info <- read.csv("/Users/danielacossio/Documents/Chrastil_Lab/Projects/SNAG/DSI_rerun_data/subject_info.csv")
sub_info <- read.csv(paste0(working_dir,"subject_info.csv"))
ReadingCSVFunc <- function(pathname){
read.delim(paste0(working_dir, pathname), header=FALSE,sep = "\t")
}
CleanInput <- function(DF){
DF <- DF %>% remove_empty("cols")
if(length(DF) < 3){
DF <- DF %>%
filter(V1 %in% rows2grab) %>%
t() %>%
`colnames<-`(rows2grab) %>%
as.data.frame() %>%
`[`(-c(1),)
} else{
DF <- DF %>%
filter(V1 %in% rows2grab) %>%
t() %>%
`colnames<-`(rows2grab) %>%
`[`(-c(1),) %>%
as.data.frame()
}
return(DF)
}
Extract_raw_values <- function(DF,Metric) {
# Purpose of this function is to clean the data without me having to copy and paste everything later.
# Data = raw unclean dataframe we want to clean up
# Metric will be either MD or QA
# sex is either male or female
# Let's read in our data frame
colNames <- DF  %>% remove_empty("cols") %>%
filter(V1 == "Tract Name") %>% t() %>% `[`(-1)
# grab  ROIcolumn names
subinfo <- sub_info  %>% select(c("subject_id", "sex", "age_scan_years", "loop_pe_rad3_m", "loop_de_rad3_degree","REPO"))
# Let's grab our values
if (Metric == "MD"){
Values <- DF %>% remove_empty("cols") %>%
filter(str_detect(V1, c("mean_md"))) %>%
`colnames<-`(c("Subjects",colNames)) %>% filter(!str_detect(Subjects, c("sub-369")))
}
else{
Values <- DF %>%
remove_empty("cols") %>%
filter(str_detect(V1, c("mean_qa"))) %>%
`colnames<-`(c("Subjects",colNames)) %>% filter(!str_detect(Subjects, c("sub-369")))
}
# now let's put this together
if (length(Values) < 3) {
Values[,2] <- as.numeric(Values[,2])
}else{
ConvToNum <-  apply(Values[,2:length(Values)],2, as.numeric)
Values[,2:length(Values)] <- ConvToNum
}
cleanedDF <- cbind(subinfo,Values) %>% na.omit() %>% select(-c("Subjects"))
return (cleanedDF)
}
TableOutput <- function(df){
knitr::kable(df, row.names=F) %>% kable_styling(bootstrap_options =  c("striped", "hover", "condensed")) %>% scroll_box(width = "600px", height = "300px")
}
# TableOutput <- function(df, style, width, height, caption){
#
#   if (style == "classic"){
#       knitr::kable(df, row.names=F) %>% kable_classic(full_width = F, html_font = "Cambria")
#   } else {
#       knitr::kable(df, row.names=F) %>% kable_styling(bootstrap_options =  c("striped", "hover", "condensed")) %>% scroll_box(width = paste0(width,"px"), height = paste0(height,"px"))
#
#   }
#
# }
ggplot(sub_info, aes(x=sex,y=loop_de_avg_degree)) +
geom_boxplot() +geom_point(size=4, aes(color = factor(sex)))
ggplot(sub_info, aes(x=sex,y=loop_de_avg_degree,color = factor(sex))) +
geom_boxplot() +geom_point(size=4, aes(color = factor(sex)))
ggplot(sub_info, aes(x=sex,y=loop_de_avg_degree,color = factor(sex))) +
geom_boxplot() +geom_point(size=4, aes(color = factor(sex))) +    labs(x ="QA", y = "Position Error") +
scale_color_manual(values = c("#E2929D","#502E23"))
ggplot(sub_info, aes(x=sex,y=loop_de_avg_degree,color = factor(sex))) +
geom_boxplot() +geom_point(size=4, aes(color = factor(sex))) +    labs(x ="sex", y = "Degrees Traveled") +
scale_color_manual(values = c("#E2929D","#502E23"))
ggplot(sub_info, aes(x=sex,y=loop_de_avg_degree,color = factor(sex))) +
geom_boxplot(aes(color = factor(sex))) +geom_point(size=4, aes(color = factor(sex))) +    labs(x ="sex", y = "Degrees Traveled") +
scale_color_manual(values = c("#E2929D","#502E23"))
ggplot(sub_info, aes(x=sex,y=loop_de_avg_degree,color = factor(sex))) +
geom_boxplot(fill=sex) +geom_point(size=4, aes(color = factor(sex))) +    labs(x ="sex", y = "Degrees Traveled") +
scale_color_manual(values = c("#E2929D","#502E23"))
ggplot(sub_info, aes(x=sex,y=loop_de_avg_degree,color = factor(sex))) +
geom_boxplot(fill=factor(sex)) +geom_point(size=4, aes(color = factor(sex))) +    labs(x ="sex", y = "Degrees Traveled") +
scale_color_manual(values = c("#E2929D","#502E23"))
ggplot(sub_info, aes(x=sex,y=loop_de_avg_degree,color = factor(sex)))
ggplot(sub_info, aes(x=sex,y=loop_de_avg_degree, fill=factor(sex))) +
geom_boxplot() +geom_point(size=4, aes(color = factor(sex))) +    labs(x ="sex", y = "Degrees Traveled") +
scale_color_manual(values = c("#E2929D","#502E23"))
ggplot(sub_info, aes(x=sex,y=loop_de_avg_degree, fill=factor(sex))) +
geom_boxplot() +geom_point(size=4, aes(color = factor(sex))) +    labs(x ="sex", y = "Degrees Traveled") +
scale_color_manual(values = c("#E2929D","#502E23"))+scale_fill_brewer(values = c("#E2929D","#502E23"))
ggplot(sub_info, aes(x=sex,y=loop_de_avg_degree, fill=factor(sex))) +
geom_boxplot() +geom_point(size=4, aes(color = factor(sex))) +    labs(x ="sex", y = "Degrees Traveled") +
scale_fill_manual(values = c("#E2929D","#502E23"))
ggplot(sub_info, aes(x=sex,y=loop_de_avg_degree, fill=factor(sex))) +
geom_boxplot() +geom_point(size=4, aes(color = factor(sex))) +    labs(x ="sex", y = "Degrees Traveled") +
scale_color_manual(values = c("#E2929D","#502E23"))+scale_fill_manual(values = c("#E2929D","#502E23"))
ggplot(sub_info, aes(x=sex,y=loop_de_avg_degree, fill=factor(sex))) +
geom_boxplot() +geom_point(size=4, aes(color = factor(sex))) +    labs(x ="sex", y = "Degrees Traveled") +
scale_color_manual(values = c("#E2929D","#502E23"))+scale_fill_manual(color="white")
ggplot(sub_info, aes(x=sex,y=loop_de_avg_degree, fill=factor(sex))) +
geom_boxplot() +geom_point(size=4, aes(color = factor(sex))) +    labs(x ="sex", y = "Degrees Traveled") +
scale_color_manual(values = c("#E2929D","#502E23"))+scale_fill_manual(color="White")
ggplot(sub_info, aes(x=sex,y=loop_de_avg_degree, fill=factor(sex))) +
geom_boxplot() +geom_point(size=4, aes(color = factor(sex))) +    labs(x ="sex", y = "Degrees Traveled") +
scale_color_manual(values = c("#E2929D","#502E23"))
ggplot(sub_info, aes(x=sex,y=loop_de_avg_degree, fill=factor(sex))) +
geom_boxplot() +geom_point(size=4, aes(color = factor(sex))) +    labs(x ="sex", y = "Degrees Traveled") +
scale_color_manual(color="White")+scale_fill_manual(values = c("#E2929D","#502E23"))
ggplot(sub_info, aes(x=sex,y=loop_de_avg_degree, fill=factor(sex))) +
geom_boxplot() +geom_point(size=4, aes(color = "white")) +    labs(x ="sex", y = "Degrees Traveled") + scale_fill_manual(values = c("#E2929D","#502E23"))
ggplot(sub_info, aes(x=sex,y=loop_de_avg_degree, fill=factor(sex))) +
geom_boxplot() +geom_point(size=4, aes(color = "black")) +    labs(x ="sex", y = "Degrees Traveled") + scale_fill_manual(values = c("#E2929D","#502E23"))
ggplot(sub_info, aes(x=sex,y=loop_de_avg_degree, fill=factor(sex))) +
geom_boxplot() +geom_point(size=4, color = "black") +    labs(x ="sex", y = "Degrees Traveled") + scale_fill_manual(values = c("#E2929D","#502E23"))
pdf(file = paste0("/Users/danielacossio/Downloads/","loop_DE_behavior.pdf"),width=12, height=8)
ggplot(sub_info, aes(x=sex,y=loop_de_avg_degree, fill=factor(sex))) +
geom_boxplot() +geom_point(size=4, color = "black") +    labs(x ="sex", y = "Degrees Traveled") + scale_fill_manual(values = c("#E2929D","#502E23"))
dev.off()
library(ggplot2)
#(plyr)
library(tidyverse)
# library(dplyr)
# library(tidyr)
library(stringr)
library(kableExtra)
# library(data.table)
# library(network)
# library(tidygraph)
# library(ggraph)
# library(igraph)
# library(networkD3)
# library(CINNA)
# library(umap)
# library(plotly)
#library(factoextra)
#library(lsr)
# library(car)
library(ggpubr)
#library(entropy)
#library(ds4psy)
# library(pROC)
#library(devtools)
#library(BRRR)
#library(stats)
#library(afex)
library(knitr)
library(janitor)
library(car)
library(ggiraph)
library(ggiraphExtra)
library(moonBook)
library(nationalparkcolors)
library(gridExtra)
library(markdown)
working_dir <-"/Users/danielacossio/Documents/Chrastil_Lab/Projects/SNAG/DSI_rerun_data/"
# PE_working_dir <- "/Users/danielacossio/Library/CloudStorage/GoogleDrive-dcossio1@uci.edu/My Drive/White matter tract/MidlifeWM_DSI2023/DSI/maze/Path_eff/"
rows2grab <- c("Tract Name", "number of tracts","mean length(mm)","diameter(mm)", "volume(mm^3)")
sub_info <- read.csv(paste0(working_dir,"subject_info.csv"))
ReadingCSVFunc <- function(pathname){
read.delim(paste0(working_dir, pathname), header=FALSE,sep = "\t")
}
CleanInput <- function(DF){
DF <- DF %>% remove_empty("cols")
if(length(DF) < 3){
DF <- DF %>%
filter(V1 %in% rows2grab) %>%
t() %>%
`colnames<-`(rows2grab) %>%
as.data.frame() %>%
`[`(-c(1),)
} else{
DF <- DF %>%
filter(V1 %in% rows2grab) %>%
t() %>%
`colnames<-`(rows2grab) %>%
`[`(-c(1),) %>%
as.data.frame()
}
return(DF)
}
Extract_raw_values <- function(DF,Metric) {
# Purpose of this function is to clean the data without me having to copy and paste everything later.
# Data = raw unclean dataframe we want to clean up
# Metric will be either MD or QA
# sex is either male or female
# Let's read in our data frame
colNames <- DF  %>% remove_empty("cols") %>%
filter(V1 == "Tract Name") %>% t() %>% `[`(-1)
# grab  ROIcolumn names
subinfo <- sub_info  %>% select(c("subject_id", "sex", "age_scan_years", "loop_pe_rad3_m", "loop_de_rad3_degree","REPO"))
# Let's grab our values
if (Metric == "MD"){
Values <- DF %>% remove_empty("cols") %>%
filter(str_detect(V1, c("mean_md"))) %>%
`colnames<-`(c("Subjects",colNames)) %>% filter(!str_detect(Subjects, c("sub-369")))
}
else{
Values <- DF %>%
remove_empty("cols") %>%
filter(str_detect(V1, c("mean_qa"))) %>%
`colnames<-`(c("Subjects",colNames)) %>% filter(!str_detect(Subjects, c("sub-369")))
}
# now let's put this together
if (length(Values) < 3) {
Values[,2] <- as.numeric(Values[,2])
}else{
ConvToNum <-  apply(Values[,2:length(Values)],2, as.numeric)
Values[,2:length(Values)] <- ConvToNum
}
cleanedDF <- cbind(subinfo,Values) %>% na.omit() %>% select(-c("Subjects"))
return (cleanedDF)
}
TableOutput <- function(df){
knitr::kable(df, row.names=F) %>% kable_styling(bootstrap_options =  c("striped", "hover", "condensed")) %>% scroll_box(width = "600px", height = "300px")
}
# TableOutput <- function(df, style, width, height, caption){
#
#   if (style == "classic"){
#       knitr::kable(df, row.names=F) %>% kable_classic(full_width = F, html_font = "Cambria")
#   } else {
#       knitr::kable(df, row.names=F) %>% kable_styling(bootstrap_options =  c("striped", "hover", "condensed")) %>% scroll_box(width = paste0(width,"px"), height = paste0(height,"px"))
#
#   }
#
# }
ggplot(sub_info, aes(x=sex,y=maze_accuracy_pct, fill=factor(sex))) +
geom_boxplot() +geom_point(size=4, color = "black") +    labs(x ="sex", y = "Degrees Traveled") + scale_fill_manual(values = c("#E2929D","#502E23"))
ggplot(sub_info, aes(x=sex,y=maze_accuracy_pct, fill=factor(sex))) +
geom_boxplot() +geom_point(size=4, color = "black") +    labs(x ="sex", y = "Maze Accuracy")
ggplot(sub_info, aes(x=sex,y=maze_accuracy_pct)) +
geom_boxplot()
ggplot(sub_info, aes(y=maze_accuracy_pct))
ggplot(sub_info, aes(y=maze_accuracy_pct)) +
geom_boxplot()
ggplot(sub_info, aes(x=subject,y=maze_accuracy_pct))
ggplot(sub_info, aes(x=sex,y=maze_accuracy_pct, fill=factor(sex))) +
geom_boxplot() +geom_point(size=4, color = "black") +    labs(x ="sex", y = "Maze Accuracy") + scale_fill_manual(values = c("#E2929D","#502E23"))
pdf(file = paste0("/Users/danielacossio/Downloads/","maze_acc.pdf"),width=12, height=8)
ggplot(sub_info, aes(x=sex,y=maze_accuracy_pct, fill=factor(sex))) +
geom_boxplot() +geom_point(size=4, color = "black") +    labs(x ="sex", y = "Maze Accuracy") + scale_fill_manual(values = c("#E2929D","#502E23"))
dev.off()
working_dir <- "/Users/danielacossio/Documents/Chrastil_Lab/Projects/SNAG/DSI_rerun_data/DSP/"
rows2grab <- c("Tract Name", "number of tracts","mean length(mm)","diameter(mm)", "volume(mm^3)")
sub_info <- read.csv("/Users/danielacossio/Documents/Chrastil_Lab/Projects/SNAG/DSI_rerun_data/subject_info.csv")
ReadingCSVFunc <- function(pathname){
read.delim(paste0(working_dir, pathname), header=FALSE,sep = "\t")
}
CleanInput <- function(DF){
DF <- DF %>%
remove_empty("cols") %>%
filter(V1 %in% rows2grab) %>%
t() %>%
`colnames<-`(rows2grab) %>%
`[`(-c(1),) %>%
as.data.frame()
return(DF)
}
Extract_raw_values <- function(DF,Metric) {
# Purpose of this function is to clean the data without me having to copy and paste everything later.
# Data = raw unclean dataframe we want to clean up
# Metric will be either MD or QA
# sex is either male or female
# Let's read in our data frame
# grab  ROIcolumn names
colNames <- DF  %>% remove_empty("cols") %>%
filter(V1 == "Tract Name") %>% t() %>% `[`(-1)
subinfo <- sub_info  %>% select(c("subject_id", "sex", "age_scan_years", "maze_accuracy_pct"))
# Let's grab our values
if (Metric == "MD"){
Values <- DF %>% remove_empty("cols") %>%
filter(str_detect(V1, c("mean_md"))) %>%
`colnames<-`(c("Subjects",colNames))
}
else{
Values <- DF %>%
remove_empty("cols") %>%
filter(str_detect(V1, c("mean_qa"))) %>%
`colnames<-`(c("Subjects",colNames)) %>% filter(!str_detect(Subjects, c("sub-369")))
}
# now let's put this together
ConvToNum <-  apply(Values[,2:length(Values)],2, as.numeric)
Values[,2:length(Values)] <- ConvToNum
cleanedDF <- cbind(subinfo,Values) %>% na.omit() %>% select(-c("Subjects"))
return (cleanedDF)
}
TableOutput <- function(df){
knitr::kable(df, row.names=F) %>%
kable_styling(bootstrap_options =  c("striped", "hover", "condensed")) %>%
scroll_box(width = "600px", height = "300px")
}
ggplot(sub_info, aes(x=sex,y=dsp_si_true_pct, fill=factor(sex))) +
geom_boxplot() +geom_point(size=4, color = "black") +    labs(x ="sex", y = "Maze Accuracy") + scale_fill_manual(values = c("#E2929D","#502E23"))
ggplot(sub_info, aes(x=subject_id,y=dsp_si_true_pct)) + geom_point(size=4, color = "black")
test <- sub_info %>% select(dsp_si_true_pct) %>% sort()
test <- sub_info %>% select(dsp_si_true_pct) %>% sort()
test <- sub_info %>% select(sub_info$dsp_si_true_pct) %>% sort()
test <- sub_info$dsp_si_true_pct %>% sort()
test <- sub_info$dsp_si_true_pct %>% sort() %>% as.data.frame()
View(test)
nrow(test)
test <- sub_info$dsp_si_true_pct %>% sort() %>% as.data.frame() %>% mutate(rank=range(1:72))
rank=range(1:72)
rank
range(1,72)
range(72)
rank=1:100
test <- sub_info$dsp_si_true_pct %>% sort() %>% as.data.frame() %>% mutate(rank=1:72)
View(test)
ggplot(sub_info, aes(x=subject_id,y=dsp_si_true_pct)) + geom_point(size=4, color = "black")
ggplot(test, aes(x=rank,y=dsp_si_true_pct)) + geom_point(size=4, color = "black")
View(test)
ggplot(test, aes(x=rank,y=.)) + geom_point(size=4, color = "black")
nrow(sub_info$maze_accuracy_pct)
length(sub_info$maze_accuracy_pct)
test <- sub_info$maze_accuracy_pct %>% sort() %>% as.data.frame() %>% mutate(rank=1:length(sub_info$maze_accuracy_pct))
test <- sub_info$maze_accuracy_pct %>% sort() %>% as.data.frame()
View(test)
length(sub_info$maze_accuracy_pct)
test <- sub_info$maze_accuracy_pct %>% sort() %>% as.data.frame() %>% mutate(rank=1:length(test))
ggplot(test, aes(x=rank,y=.)) + geom_point(size=4, color = "black")
View(test)
test <- sub_info$maze_accuracy_pct %>% sort() %>% as.data.frame()
test <- sub_info$maze_accuracy_pct %>% sort() %>% as.data.frame() %>% mutate(rank=1:82)
ggplot(test, aes(x=rank,y=.)) + geom_point(size=4, color = "black")
test <- sub_info$loop_ae_avg_degree
test <- sub_info$loop_ae_avg_degree %>% sort() %>% as.data.frame()
test <- sub_info$loop_ae_avg_degree %>% sort() %>% as.data.frame() %>% mutate(rank=1:42)
ggplot(test, aes(x=rank,y=.)) + geom_point(size=4, color = "black")
pdf(file = paste0("/Users/danielacossio/Downloads/","loop_DE_behavior_rank.pdf"),width=12, height=8)
test <- sub_info$loop_ae_avg_degree %>% sort() %>% as.data.frame() %>% mutate(rank=1:42)
ggplot(test, aes(x=rank,y=.)) + geom_point(size=4, color = "black")
dev.off()
pdf(file = paste0("/Users/danielacossio/Downloads/","loop_PE_behavior_rank.pdf"),width=12, height=8)
test <- sub_info$loop_ae_avg_degree %>% sort() %>% as.data.frame() %>% mutate(rank=1:42)
ggplot(test, aes(x=rank,y=.)) + geom_point(size=4, color = "black")
dev.off()
pdf(file = paste0("/Users/danielacossio/Downloads/","loop_AE_behavior_rank.pdf"),width=12, height=8)
test <- sub_info$loop_ae_avg_degree %>% sort() %>% as.data.frame() %>% mutate(rank=1:42)
ggplot(test, aes(x=rank,y=.)) + geom_point(size=4, color = "black")
dev.off()
pdf(file = paste0("/Users/danielacossio/Downloads/","loop_DE_behavior_rank.pdf"),width=12, height=8)
test <- sub_info$loop_de_avg_degree %>% sort() %>% as.data.frame() %>% mutate(rank=1:42)
ggplot(test, aes(x=rank,y=.)) + geom_point(size=4, color = "black")
dev.off()
test <- sub_info$loop_de_avg_degree %>% sort() %>% as.data.frame() %>% mutate(rank=1:42)
ggplot(test, aes(x=rank,y=.)) + geom_point(size=4, color = "black")
pdf(file = paste0("/Users/danielacossio/Downloads/","maze_acc_rank.pdf"),width=12, height=8)
test <- sub_info$maze_accuracy_pct %>% sort() %>% as.data.frame() %>% mutate(rank=1:82)
ggplot(test, aes(x=rank,y=.)) + geom_point(size=4, color = "black")
dev.off()
